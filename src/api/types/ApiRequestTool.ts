/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Vapi from "../index";

export interface ApiRequestTool {
    /**
     * These are the messages that will be spoken to the user as the tool is running.
     *
     * For some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.
     */
    messages?: Vapi.ApiRequestToolMessagesItem[];
    type: "apiRequest";
    method: Vapi.ApiRequestToolMethod;
    /**
     * This is the timeout in seconds for the request. Defaults to 20 seconds.
     *
     * @default 20
     */
    timeoutSeconds?: number;
    /** This is the unique identifier for the tool. */
    id: string;
    /** This is the unique identifier for the organization that this tool belongs to. */
    orgId: string;
    /** This is the ISO 8601 date-time string of when the tool was created. */
    createdAt: string;
    /** This is the ISO 8601 date-time string of when the tool was last updated. */
    updatedAt: string;
    /**
     * This is the function definition of the tool.
     *
     * For `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.
     *
     * An example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument "reason". Then, in `messages` array, you can have many "request-complete" messages. One of these messages will be triggered if the `messages[].conditions` matches the "reason" argument.
     */
    function?: Vapi.OpenAiFunction;
    /**
     * This is the name of the tool. This will be passed to the model.
     *
     * Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 40.
     */
    name?: string;
    /** This is the description of the tool. This will be passed to the model. */
    description?: string;
    /** This is where the request will be sent. */
    url: string;
    /** This is the body of the request. */
    body?: Vapi.JsonSchema;
    /** These are the headers to send in the request. */
    headers?: Vapi.JsonSchema;
    /**
     * This is the backoff plan if the request fails. Defaults to undefined (the request will not be retried).
     *
     * @default undefined (the request will not be retried)
     */
    backoffPlan?: Vapi.BackoffPlan;
    /** This is the plan that controls the variable extraction from the tool's response. */
    variableExtractionPlan?: Vapi.VariableExtractionPlan;
}
