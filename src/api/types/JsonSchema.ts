/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface JsonSchema {
    /**
     * This is the type of output you'd like.
     *
     * `string`, `number`, `integer`, `boolean` are the primitive types and should be obvious.
     *
     * `array` and `object` are more interesting and quite powerful. They allow you to define nested structures.
     *
     * For `array`, you can define the schema of the items in the array using the `items` property.
     *
     * For `object`, you can define the properties of the object using the `properties` property.
     */
    type: JsonSchema.Type;
    /**
     * This is required if the type is "array". This is the schema of the items in the array.
     *
     * This is of type JsonSchema. However, Swagger doesn't support circular references.
     */
    items?: Record<string, unknown>;
    /**
     * This is required if the type is "object". This specifies the properties of the object.
     *
     * This is a map of string to JsonSchema. However, Swagger doesn't support circular references.
     */
    properties?: Record<string, unknown>;
    /** This is the description to help the model understand what it needs to output. */
    description?: string;
    /**
     * This is the pattern of the string. This is a regex that will be used to validate the data in question. To use a common format, use the `format` property instead.
     *
     * OpenAI documentation: https://platform.openai.com/docs/guides/structured-outputs#supported-properties
     */
    pattern?: string;
    /**
     * This is the format of the string. To pass a regex, use the `pattern` property instead.
     *
     * OpenAI documentation: https://platform.openai.com/docs/guides/structured-outputs?api-mode=chat&type-restrictions=string-restrictions
     */
    format?: JsonSchema.Format;
    /**
     * This is a list of properties that are required.
     *
     * This only makes sense if the type is "object".
     */
    required?: string[];
    /** This array specifies the allowed values that can be used to restrict the output of the model. */
    enum?: string[];
    /** This is the title of the schema. */
    title?: string;
}

export namespace JsonSchema {
    /**
     * This is the type of output you'd like.
     *
     * `string`, `number`, `integer`, `boolean` are the primitive types and should be obvious.
     *
     * `array` and `object` are more interesting and quite powerful. They allow you to define nested structures.
     *
     * For `array`, you can define the schema of the items in the array using the `items` property.
     *
     * For `object`, you can define the properties of the object using the `properties` property.
     */
    export type Type = "string" | "number" | "integer" | "boolean" | "array" | "object";
    export const Type = {
        String: "string",
        Number: "number",
        Integer: "integer",
        Boolean: "boolean",
        Array: "array",
        Object: "object",
    } as const;
    /**
     * This is the format of the string. To pass a regex, use the `pattern` property instead.
     *
     * OpenAI documentation: https://platform.openai.com/docs/guides/structured-outputs?api-mode=chat&type-restrictions=string-restrictions
     */
    export type Format = "date-time" | "time" | "date" | "duration" | "email" | "hostname" | "ipv4" | "ipv6" | "uuid";
    export const Format = {
        DateTime: "date-time",
        Time: "time",
        Date: "date",
        Duration: "duration",
        Email: "email",
        Hostname: "hostname",
        Ipv4: "ipv4",
        Ipv6: "ipv6",
        Uuid: "uuid",
    } as const;
}
