/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface AnalyticsOperation {
    /** This is the aggregation operation you want to perform. */
    operation: AnalyticsOperation.Operation;
    /** This is the columns you want to perform the aggregation operation on. */
    column: AnalyticsOperation.Column;
    /** This is the alias for column name returned. Defaults to `${operation}${column}`. */
    alias?: string;
}

export namespace AnalyticsOperation {
    /**
     * This is the aggregation operation you want to perform.
     */
    export type Operation = "sum" | "avg" | "count" | "min" | "max" | "history";
    export const Operation = {
        Sum: "sum",
        Avg: "avg",
        Count: "count",
        Min: "min",
        Max: "max",
        History: "history",
    } as const;
    /**
     * This is the columns you want to perform the aggregation operation on.
     */
    export type Column =
        | "id"
        | "cost"
        | "costBreakdown.llm"
        | "costBreakdown.stt"
        | "costBreakdown.tts"
        | "costBreakdown.vapi"
        | "costBreakdown.transport"
        | "costBreakdown.analysisBreakdown.summary"
        | "costBreakdown.transcriber"
        | "costBreakdown.ttsCharacters"
        | "costBreakdown.llmPromptTokens"
        | "costBreakdown.llmCompletionTokens"
        | "duration"
        | "concurrency"
        | "minutesUsed";
    export const Column = {
        Id: "id",
        Cost: "cost",
        CostBreakdownLlm: "costBreakdown.llm",
        CostBreakdownStt: "costBreakdown.stt",
        CostBreakdownTts: "costBreakdown.tts",
        CostBreakdownVapi: "costBreakdown.vapi",
        CostBreakdownTransport: "costBreakdown.transport",
        CostBreakdownAnalysisBreakdownSummary: "costBreakdown.analysisBreakdown.summary",
        CostBreakdownTranscriber: "costBreakdown.transcriber",
        CostBreakdownTtsCharacters: "costBreakdown.ttsCharacters",
        CostBreakdownLlmPromptTokens: "costBreakdown.llmPromptTokens",
        CostBreakdownLlmCompletionTokens: "costBreakdown.llmCompletionTokens",
        Duration: "duration",
        Concurrency: "concurrency",
        MinutesUsed: "minutesUsed",
    } as const;
}
