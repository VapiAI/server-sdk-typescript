/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Vapi from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace TestSuiteTests {
    export interface Options {
        environment?: core.Supplier<environments.VapiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class TestSuiteTests {
    protected readonly _options: TestSuiteTests.Options;

    constructor(_options: TestSuiteTests.Options) {
        this._options = _options;
    }

    /**
     * @param {string} testSuiteId
     * @param {Vapi.TestSuiteTestControllerFindAllPaginatedRequest} request
     * @param {TestSuiteTests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.testSuiteTests.testSuiteTestControllerFindAllPaginated("testSuiteId")
     */
    public testSuiteTestControllerFindAllPaginated(
        testSuiteId: string,
        request: Vapi.TestSuiteTestControllerFindAllPaginatedRequest = {},
        requestOptions?: TestSuiteTests.RequestOptions,
    ): core.HttpResponsePromise<Vapi.TestSuiteTestsPaginatedResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__testSuiteTestControllerFindAllPaginated(testSuiteId, request, requestOptions),
        );
    }

    private async __testSuiteTestControllerFindAllPaginated(
        testSuiteId: string,
        request: Vapi.TestSuiteTestControllerFindAllPaginatedRequest = {},
        requestOptions?: TestSuiteTests.RequestOptions,
    ): Promise<core.WithRawResponse<Vapi.TestSuiteTestsPaginatedResponse>> {
        const {
            page,
            sortOrder,
            limit,
            createdAtGt,
            createdAtLt,
            createdAtGe,
            createdAtLe,
            updatedAtGt,
            updatedAtLt,
            updatedAtGe,
            updatedAtLe,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (page !== undefined) {
            _queryParams["page"] = page?.toString() ?? null;
        }

        if (sortOrder !== undefined) {
            _queryParams["sortOrder"] = sortOrder;
        }

        if (limit !== undefined) {
            _queryParams["limit"] = limit?.toString() ?? null;
        }

        if (createdAtGt !== undefined) {
            _queryParams["createdAtGt"] = createdAtGt;
        }

        if (createdAtLt !== undefined) {
            _queryParams["createdAtLt"] = createdAtLt;
        }

        if (createdAtGe !== undefined) {
            _queryParams["createdAtGe"] = createdAtGe;
        }

        if (createdAtLe !== undefined) {
            _queryParams["createdAtLe"] = createdAtLe;
        }

        if (updatedAtGt !== undefined) {
            _queryParams["updatedAtGt"] = updatedAtGt;
        }

        if (updatedAtLt !== undefined) {
            _queryParams["updatedAtLt"] = updatedAtLt;
        }

        if (updatedAtGe !== undefined) {
            _queryParams["updatedAtGe"] = updatedAtGe;
        }

        if (updatedAtLe !== undefined) {
            _queryParams["updatedAtLe"] = updatedAtLe;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.VapiEnvironment.Default,
                `test-suite/${encodeURIComponent(testSuiteId)}/test`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Vapi.TestSuiteTestsPaginatedResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VapiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VapiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VapiTimeoutError("Timeout exceeded when calling GET /test-suite/{testSuiteId}/test.");
            case "unknown":
                throw new errors.VapiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} testSuiteId
     * @param {Vapi.TestSuiteTestControllerCreateRequest} request
     * @param {TestSuiteTests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.testSuiteTests.testSuiteTestControllerCreate("testSuiteId", {
     *         scorers: [{
     *                 type: "ai",
     *                 rubric: "rubric"
     *             }],
     *         type: "voice",
     *         script: "script"
     *     })
     */
    public testSuiteTestControllerCreate(
        testSuiteId: string,
        request: Vapi.TestSuiteTestControllerCreateRequest,
        requestOptions?: TestSuiteTests.RequestOptions,
    ): core.HttpResponsePromise<Vapi.TestSuiteTestControllerCreateResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__testSuiteTestControllerCreate(testSuiteId, request, requestOptions),
        );
    }

    private async __testSuiteTestControllerCreate(
        testSuiteId: string,
        request: Vapi.TestSuiteTestControllerCreateRequest,
        requestOptions?: TestSuiteTests.RequestOptions,
    ): Promise<core.WithRawResponse<Vapi.TestSuiteTestControllerCreateResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.VapiEnvironment.Default,
                `test-suite/${encodeURIComponent(testSuiteId)}/test`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Vapi.TestSuiteTestControllerCreateResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VapiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VapiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VapiTimeoutError("Timeout exceeded when calling POST /test-suite/{testSuiteId}/test.");
            case "unknown":
                throw new errors.VapiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} testSuiteId
     * @param {string} id
     * @param {TestSuiteTests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.testSuiteTests.testSuiteTestControllerFindOne("testSuiteId", "id")
     */
    public testSuiteTestControllerFindOne(
        testSuiteId: string,
        id: string,
        requestOptions?: TestSuiteTests.RequestOptions,
    ): core.HttpResponsePromise<Vapi.TestSuiteTestControllerFindOneResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__testSuiteTestControllerFindOne(testSuiteId, id, requestOptions),
        );
    }

    private async __testSuiteTestControllerFindOne(
        testSuiteId: string,
        id: string,
        requestOptions?: TestSuiteTests.RequestOptions,
    ): Promise<core.WithRawResponse<Vapi.TestSuiteTestControllerFindOneResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.VapiEnvironment.Default,
                `test-suite/${encodeURIComponent(testSuiteId)}/test/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Vapi.TestSuiteTestControllerFindOneResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VapiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VapiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VapiTimeoutError(
                    "Timeout exceeded when calling GET /test-suite/{testSuiteId}/test/{id}.",
                );
            case "unknown":
                throw new errors.VapiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} testSuiteId
     * @param {string} id
     * @param {TestSuiteTests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.testSuiteTests.testSuiteTestControllerRemove("testSuiteId", "id")
     */
    public testSuiteTestControllerRemove(
        testSuiteId: string,
        id: string,
        requestOptions?: TestSuiteTests.RequestOptions,
    ): core.HttpResponsePromise<Vapi.TestSuiteTestControllerRemoveResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__testSuiteTestControllerRemove(testSuiteId, id, requestOptions),
        );
    }

    private async __testSuiteTestControllerRemove(
        testSuiteId: string,
        id: string,
        requestOptions?: TestSuiteTests.RequestOptions,
    ): Promise<core.WithRawResponse<Vapi.TestSuiteTestControllerRemoveResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.VapiEnvironment.Default,
                `test-suite/${encodeURIComponent(testSuiteId)}/test/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Vapi.TestSuiteTestControllerRemoveResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VapiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VapiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VapiTimeoutError(
                    "Timeout exceeded when calling DELETE /test-suite/{testSuiteId}/test/{id}.",
                );
            case "unknown":
                throw new errors.VapiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} testSuiteId
     * @param {string} id
     * @param {Vapi.TestSuiteTestControllerUpdateRequest} request
     * @param {TestSuiteTests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.testSuiteTests.testSuiteTestControllerUpdate("testSuiteId", "id", {
     *         type: "voice"
     *     })
     */
    public testSuiteTestControllerUpdate(
        testSuiteId: string,
        id: string,
        request: Vapi.TestSuiteTestControllerUpdateRequest,
        requestOptions?: TestSuiteTests.RequestOptions,
    ): core.HttpResponsePromise<Vapi.TestSuiteTestControllerUpdateResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__testSuiteTestControllerUpdate(testSuiteId, id, request, requestOptions),
        );
    }

    private async __testSuiteTestControllerUpdate(
        testSuiteId: string,
        id: string,
        request: Vapi.TestSuiteTestControllerUpdateRequest,
        requestOptions?: TestSuiteTests.RequestOptions,
    ): Promise<core.WithRawResponse<Vapi.TestSuiteTestControllerUpdateResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.VapiEnvironment.Default,
                `test-suite/${encodeURIComponent(testSuiteId)}/test/${encodeURIComponent(id)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Vapi.TestSuiteTestControllerUpdateResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VapiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VapiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VapiTimeoutError(
                    "Timeout exceeded when calling PATCH /test-suite/{testSuiteId}/test/{id}.",
                );
            case "unknown":
                throw new errors.VapiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
