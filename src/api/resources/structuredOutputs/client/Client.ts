/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Vapi from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace StructuredOutputs {
    export interface Options {
        environment?: core.Supplier<environments.VapiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class StructuredOutputs {
    protected readonly _options: StructuredOutputs.Options;

    constructor(_options: StructuredOutputs.Options) {
        this._options = _options;
    }

    /**
     * @param {Vapi.StructuredOutputControllerFindAllRequest} request
     * @param {StructuredOutputs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.structuredOutputs.structuredOutputControllerFindAll()
     */
    public structuredOutputControllerFindAll(
        request: Vapi.StructuredOutputControllerFindAllRequest = {},
        requestOptions?: StructuredOutputs.RequestOptions,
    ): core.HttpResponsePromise<Vapi.StructuredOutputPaginatedResponse> {
        return core.HttpResponsePromise.fromPromise(this.__structuredOutputControllerFindAll(request, requestOptions));
    }

    private async __structuredOutputControllerFindAll(
        request: Vapi.StructuredOutputControllerFindAllRequest = {},
        requestOptions?: StructuredOutputs.RequestOptions,
    ): Promise<core.WithRawResponse<Vapi.StructuredOutputPaginatedResponse>> {
        const {
            id,
            name,
            page,
            sortOrder,
            limit,
            createdAtGt,
            createdAtLt,
            createdAtGe,
            createdAtLe,
            updatedAtGt,
            updatedAtLt,
            updatedAtGe,
            updatedAtLe,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (id !== undefined) {
            _queryParams["id"] = id;
        }

        if (name !== undefined) {
            _queryParams["name"] = name;
        }

        if (page !== undefined) {
            _queryParams["page"] = page?.toString() ?? null;
        }

        if (sortOrder !== undefined) {
            _queryParams["sortOrder"] = sortOrder;
        }

        if (limit !== undefined) {
            _queryParams["limit"] = limit?.toString() ?? null;
        }

        if (createdAtGt !== undefined) {
            _queryParams["createdAtGt"] = createdAtGt;
        }

        if (createdAtLt !== undefined) {
            _queryParams["createdAtLt"] = createdAtLt;
        }

        if (createdAtGe !== undefined) {
            _queryParams["createdAtGe"] = createdAtGe;
        }

        if (createdAtLe !== undefined) {
            _queryParams["createdAtLe"] = createdAtLe;
        }

        if (updatedAtGt !== undefined) {
            _queryParams["updatedAtGt"] = updatedAtGt;
        }

        if (updatedAtLt !== undefined) {
            _queryParams["updatedAtLt"] = updatedAtLt;
        }

        if (updatedAtGe !== undefined) {
            _queryParams["updatedAtGe"] = updatedAtGe;
        }

        if (updatedAtLe !== undefined) {
            _queryParams["updatedAtLe"] = updatedAtLe;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.VapiEnvironment.Default,
                "structured-output",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Vapi.StructuredOutputPaginatedResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VapiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VapiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VapiTimeoutError("Timeout exceeded when calling GET /structured-output.");
            case "unknown":
                throw new errors.VapiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Vapi.CreateStructuredOutputDto} request
     * @param {StructuredOutputs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.structuredOutputs.structuredOutputControllerCreate({
     *         name: "name",
     *         schema: {
     *             type: "string"
     *         }
     *     })
     */
    public structuredOutputControllerCreate(
        request: Vapi.CreateStructuredOutputDto,
        requestOptions?: StructuredOutputs.RequestOptions,
    ): core.HttpResponsePromise<Vapi.StructuredOutput> {
        return core.HttpResponsePromise.fromPromise(this.__structuredOutputControllerCreate(request, requestOptions));
    }

    private async __structuredOutputControllerCreate(
        request: Vapi.CreateStructuredOutputDto,
        requestOptions?: StructuredOutputs.RequestOptions,
    ): Promise<core.WithRawResponse<Vapi.StructuredOutput>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.VapiEnvironment.Default,
                "structured-output",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Vapi.StructuredOutput, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VapiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VapiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VapiTimeoutError("Timeout exceeded when calling POST /structured-output.");
            case "unknown":
                throw new errors.VapiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} id
     * @param {StructuredOutputs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.structuredOutputs.structuredOutputControllerFindOne("id")
     */
    public structuredOutputControllerFindOne(
        id: string,
        requestOptions?: StructuredOutputs.RequestOptions,
    ): core.HttpResponsePromise<Vapi.StructuredOutput> {
        return core.HttpResponsePromise.fromPromise(this.__structuredOutputControllerFindOne(id, requestOptions));
    }

    private async __structuredOutputControllerFindOne(
        id: string,
        requestOptions?: StructuredOutputs.RequestOptions,
    ): Promise<core.WithRawResponse<Vapi.StructuredOutput>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.VapiEnvironment.Default,
                `structured-output/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Vapi.StructuredOutput, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VapiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VapiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VapiTimeoutError("Timeout exceeded when calling GET /structured-output/{id}.");
            case "unknown":
                throw new errors.VapiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} id
     * @param {StructuredOutputs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.structuredOutputs.structuredOutputControllerRemove("id")
     */
    public structuredOutputControllerRemove(
        id: string,
        requestOptions?: StructuredOutputs.RequestOptions,
    ): core.HttpResponsePromise<Vapi.StructuredOutput> {
        return core.HttpResponsePromise.fromPromise(this.__structuredOutputControllerRemove(id, requestOptions));
    }

    private async __structuredOutputControllerRemove(
        id: string,
        requestOptions?: StructuredOutputs.RequestOptions,
    ): Promise<core.WithRawResponse<Vapi.StructuredOutput>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.VapiEnvironment.Default,
                `structured-output/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Vapi.StructuredOutput, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VapiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VapiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VapiTimeoutError("Timeout exceeded when calling DELETE /structured-output/{id}.");
            case "unknown":
                throw new errors.VapiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} id
     * @param {Vapi.UpdateStructuredOutputDto} request
     * @param {StructuredOutputs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.structuredOutputs.structuredOutputControllerUpdate("id", {
     *         schemaOverride: "schemaOverride"
     *     })
     */
    public structuredOutputControllerUpdate(
        id: string,
        request: Vapi.UpdateStructuredOutputDto,
        requestOptions?: StructuredOutputs.RequestOptions,
    ): core.HttpResponsePromise<Vapi.StructuredOutput> {
        return core.HttpResponsePromise.fromPromise(
            this.__structuredOutputControllerUpdate(id, request, requestOptions),
        );
    }

    private async __structuredOutputControllerUpdate(
        id: string,
        request: Vapi.UpdateStructuredOutputDto,
        requestOptions?: StructuredOutputs.RequestOptions,
    ): Promise<core.WithRawResponse<Vapi.StructuredOutput>> {
        const { schemaOverride, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["schemaOverride"] = schemaOverride;
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.VapiEnvironment.Default,
                `structured-output/${encodeURIComponent(id)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Vapi.StructuredOutput, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VapiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VapiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VapiTimeoutError("Timeout exceeded when calling PATCH /structured-output/{id}.");
            case "unknown":
                throw new errors.VapiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
