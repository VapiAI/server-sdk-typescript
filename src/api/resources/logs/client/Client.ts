/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Vapi from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Logs {
    export interface Options {
        environment?: core.Supplier<environments.VapiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Logs {
    protected readonly _options: Logs.Options;

    constructor(_options: Logs.Options) {
        this._options = _options;
    }

    /**
     * @param {Vapi.LogsGetRequest} request
     * @param {Logs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.logs.get()
     */
    public async get(
        request: Vapi.LogsGetRequest = {},
        requestOptions?: Logs.RequestOptions,
    ): Promise<core.Page<Vapi.Log>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (request: Vapi.LogsGetRequest): Promise<core.WithRawResponse<Vapi.LogsPaginatedResponse>> => {
                const {
                    type: type_,
                    webhookType,
                    assistantId,
                    phoneNumberId,
                    customerId,
                    squadId,
                    callId,
                    page,
                    sortOrder,
                    limit,
                    createdAtGt,
                    createdAtLt,
                    createdAtGe,
                    createdAtLe,
                    updatedAtGt,
                    updatedAtLt,
                    updatedAtGe,
                    updatedAtLe,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (type_ !== undefined) {
                    _queryParams["type"] = type_;
                }
                if (webhookType !== undefined) {
                    _queryParams["webhookType"] = webhookType;
                }
                if (assistantId !== undefined) {
                    _queryParams["assistantId"] = assistantId;
                }
                if (phoneNumberId !== undefined) {
                    _queryParams["phoneNumberId"] = phoneNumberId;
                }
                if (customerId !== undefined) {
                    _queryParams["customerId"] = customerId;
                }
                if (squadId !== undefined) {
                    _queryParams["squadId"] = squadId;
                }
                if (callId !== undefined) {
                    _queryParams["callId"] = callId;
                }
                if (page !== undefined) {
                    _queryParams["page"] = page?.toString() ?? null;
                }
                if (sortOrder !== undefined) {
                    _queryParams["sortOrder"] = sortOrder;
                }
                if (limit !== undefined) {
                    _queryParams["limit"] = limit?.toString() ?? null;
                }
                if (createdAtGt !== undefined) {
                    _queryParams["createdAtGt"] = createdAtGt;
                }
                if (createdAtLt !== undefined) {
                    _queryParams["createdAtLt"] = createdAtLt;
                }
                if (createdAtGe !== undefined) {
                    _queryParams["createdAtGe"] = createdAtGe;
                }
                if (createdAtLe !== undefined) {
                    _queryParams["createdAtLe"] = createdAtLe;
                }
                if (updatedAtGt !== undefined) {
                    _queryParams["updatedAtGt"] = updatedAtGt;
                }
                if (updatedAtLt !== undefined) {
                    _queryParams["updatedAtLt"] = updatedAtLt;
                }
                if (updatedAtGe !== undefined) {
                    _queryParams["updatedAtGe"] = updatedAtGe;
                }
                if (updatedAtLe !== undefined) {
                    _queryParams["updatedAtLe"] = updatedAtLe;
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.VapiEnvironment.Default,
                        "logs",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return { data: _response.body as Vapi.LogsPaginatedResponse, rawResponse: _response.rawResponse };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.VapiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.VapiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.VapiTimeoutError("Timeout exceeded when calling GET /logs.");
                    case "unknown":
                        throw new errors.VapiError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.page != null ? request?.page : 1;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Vapi.LogsPaginatedResponse, Vapi.Log>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.results ?? []).length > 0,
            getItems: (response) => response?.results ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "page", _offset));
            },
        });
    }

    /**
     * @param {Vapi.LoggingControllerLogsDeleteQueryRequest} request
     * @param {Logs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.logs.loggingControllerLogsDeleteQuery()
     */
    public loggingControllerLogsDeleteQuery(
        request: Vapi.LoggingControllerLogsDeleteQueryRequest = {},
        requestOptions?: Logs.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__loggingControllerLogsDeleteQuery(request, requestOptions));
    }

    private async __loggingControllerLogsDeleteQuery(
        request: Vapi.LoggingControllerLogsDeleteQueryRequest = {},
        requestOptions?: Logs.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const { type: type_, assistantId, phoneNumberId, customerId, squadId, callId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (type_ !== undefined) {
            _queryParams["type"] = type_;
        }

        if (assistantId !== undefined) {
            _queryParams["assistantId"] = assistantId;
        }

        if (phoneNumberId !== undefined) {
            _queryParams["phoneNumberId"] = phoneNumberId;
        }

        if (customerId !== undefined) {
            _queryParams["customerId"] = customerId;
        }

        if (squadId !== undefined) {
            _queryParams["squadId"] = squadId;
        }

        if (callId !== undefined) {
            _queryParams["callId"] = callId;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.VapiEnvironment.Default,
                "logs",
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VapiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VapiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VapiTimeoutError("Timeout exceeded when calling DELETE /logs.");
            case "unknown":
                throw new errors.VapiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
