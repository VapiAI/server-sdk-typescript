/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import { Calls } from "./api/resources/calls/client/Client.js";
import { Chats } from "./api/resources/chats/client/Client.js";
import { Campaigns } from "./api/resources/campaigns/client/Client.js";
import { Sessions } from "./api/resources/sessions/client/Client.js";
import { Assistants } from "./api/resources/assistants/client/Client.js";
import { PhoneNumbers } from "./api/resources/phoneNumbers/client/Client.js";
import { Tools } from "./api/resources/tools/client/Client.js";
import { Files } from "./api/resources/files/client/Client.js";
import { KnowledgeBases } from "./api/resources/knowledgeBases/client/Client.js";
import { Workflow } from "./api/resources/workflow/client/Client.js";
import { Squads } from "./api/resources/squads/client/Client.js";
import { TestSuites } from "./api/resources/testSuites/client/Client.js";
import { TestSuiteTests } from "./api/resources/testSuiteTests/client/Client.js";
import { TestSuiteRuns } from "./api/resources/testSuiteRuns/client/Client.js";
import { Analytics } from "./api/resources/analytics/client/Client.js";
import { Logs } from "./api/resources/logs/client/Client.js";

export declare namespace VapiClient {
    export interface Options {
        environment?: core.Supplier<environments.VapiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class VapiClient {
    protected readonly _options: VapiClient.Options;
    protected _calls: Calls | undefined;
    protected _chats: Chats | undefined;
    protected _campaigns: Campaigns | undefined;
    protected _sessions: Sessions | undefined;
    protected _assistants: Assistants | undefined;
    protected _phoneNumbers: PhoneNumbers | undefined;
    protected _tools: Tools | undefined;
    protected _files: Files | undefined;
    protected _knowledgeBases: KnowledgeBases | undefined;
    protected _workflow: Workflow | undefined;
    protected _squads: Squads | undefined;
    protected _testSuites: TestSuites | undefined;
    protected _testSuiteTests: TestSuiteTests | undefined;
    protected _testSuiteRuns: TestSuiteRuns | undefined;
    protected _analytics: Analytics | undefined;
    protected _logs: Logs | undefined;

    constructor(_options: VapiClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@vapi-ai/server-sdk",
                    "X-Fern-SDK-Version": "0.10.0",
                    "User-Agent": "@vapi-ai/server-sdk/0.10.0",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    public get calls(): Calls {
        return (this._calls ??= new Calls(this._options));
    }

    public get chats(): Chats {
        return (this._chats ??= new Chats(this._options));
    }

    public get campaigns(): Campaigns {
        return (this._campaigns ??= new Campaigns(this._options));
    }

    public get sessions(): Sessions {
        return (this._sessions ??= new Sessions(this._options));
    }

    public get assistants(): Assistants {
        return (this._assistants ??= new Assistants(this._options));
    }

    public get phoneNumbers(): PhoneNumbers {
        return (this._phoneNumbers ??= new PhoneNumbers(this._options));
    }

    public get tools(): Tools {
        return (this._tools ??= new Tools(this._options));
    }

    public get files(): Files {
        return (this._files ??= new Files(this._options));
    }

    public get knowledgeBases(): KnowledgeBases {
        return (this._knowledgeBases ??= new KnowledgeBases(this._options));
    }

    public get workflow(): Workflow {
        return (this._workflow ??= new Workflow(this._options));
    }

    public get squads(): Squads {
        return (this._squads ??= new Squads(this._options));
    }

    public get testSuites(): TestSuites {
        return (this._testSuites ??= new TestSuites(this._options));
    }

    public get testSuiteTests(): TestSuiteTests {
        return (this._testSuiteTests ??= new TestSuiteTests(this._options));
    }

    public get testSuiteRuns(): TestSuiteRuns {
        return (this._testSuiteRuns ??= new TestSuiteRuns(this._options));
    }

    public get analytics(): Analytics {
        return (this._analytics ??= new Analytics(this._options));
    }

    public get logs(): Logs {
        return (this._logs ??= new Logs(this._options));
    }
}
