/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { VapiClient } from "../../src/Client";
import * as Vapi from "../../src/api/index";

describe("KnowledgeBases", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                provider: "trieve",
                name: "name",
                searchPlan: { topK: 1.1, removeStopWords: true, scoreThreshold: 1.1, searchType: "fulltext" },
                createPlan: { type: "import", providerId: "providerId" },
                id: "id",
                orgId: "orgId",
            },
        ];
        server.mockEndpoint().get("/knowledge-base").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.knowledgeBases.list();
        expect(response).toEqual([
            {
                provider: "trieve",
                name: "name",
                searchPlan: {
                    topK: 1.1,
                    removeStopWords: true,
                    scoreThreshold: 1.1,
                    searchType: "fulltext",
                },
                createPlan: {
                    type: "import",
                    providerId: "providerId",
                },
                id: "id",
                orgId: "orgId",
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { provider: "trieve" };
        const rawResponseBody = {
            provider: "trieve",
            name: "name",
            searchPlan: { topK: 1.1, removeStopWords: true, scoreThreshold: 1.1, searchType: "fulltext" },
            createPlan: { type: "import", providerId: "providerId" },
            id: "id",
            orgId: "orgId",
        };
        server
            .mockEndpoint()
            .post("/knowledge-base")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.knowledgeBases.create({
            provider: "trieve",
        });
        expect(response).toEqual({
            provider: "trieve",
            name: "name",
            searchPlan: {
                topK: 1.1,
                removeStopWords: true,
                scoreThreshold: 1.1,
                searchType: "fulltext",
            },
            createPlan: {
                type: "import",
                providerId: "providerId",
            },
            id: "id",
            orgId: "orgId",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            provider: "trieve",
            name: "name",
            searchPlan: { topK: 1.1, removeStopWords: true, scoreThreshold: 1.1, searchType: "fulltext" },
            createPlan: { type: "import", providerId: "providerId" },
            id: "id",
            orgId: "orgId",
        };
        server.mockEndpoint().get("/knowledge-base/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.knowledgeBases.get("id");
        expect(response).toEqual({
            provider: "trieve",
            name: "name",
            searchPlan: {
                topK: 1.1,
                removeStopWords: true,
                scoreThreshold: 1.1,
                searchType: "fulltext",
            },
            createPlan: {
                type: "import",
                providerId: "providerId",
            },
            id: "id",
            orgId: "orgId",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            provider: "trieve",
            name: "name",
            searchPlan: { topK: 1.1, removeStopWords: true, scoreThreshold: 1.1, searchType: "fulltext" },
            createPlan: { type: "import", providerId: "providerId" },
            id: "id",
            orgId: "orgId",
        };
        server
            .mockEndpoint()
            .delete("/knowledge-base/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.knowledgeBases.delete("id");
        expect(response).toEqual({
            provider: "trieve",
            name: "name",
            searchPlan: {
                topK: 1.1,
                removeStopWords: true,
                scoreThreshold: 1.1,
                searchType: "fulltext",
            },
            createPlan: {
                type: "import",
                providerId: "providerId",
            },
            id: "id",
            orgId: "orgId",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            provider: "trieve",
            name: "name",
            searchPlan: { topK: 1.1, removeStopWords: true, scoreThreshold: 1.1, searchType: "fulltext" },
            createPlan: { type: "import", providerId: "providerId" },
            id: "id",
            orgId: "orgId",
        };
        server
            .mockEndpoint()
            .patch("/knowledge-base/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.knowledgeBases.update("id", {});
        expect(response).toEqual({
            provider: "trieve",
            name: "name",
            searchPlan: {
                topK: 1.1,
                removeStopWords: true,
                scoreThreshold: 1.1,
                searchType: "fulltext",
            },
            createPlan: {
                type: "import",
                providerId: "providerId",
            },
            id: "id",
            orgId: "orgId",
        });
    });
});
