/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { VapiClient } from "../../src/Client";

describe("StructuredOutputs", () => {
    test("StructuredOutputController_findAll", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            results: [
                {
                    model: { provider: "openai", model: "gpt-5" },
                    id: "id",
                    orgId: "orgId",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    name: "name",
                    description: "description",
                    assistantIds: ["assistantIds"],
                    workflowIds: ["workflowIds"],
                    schema: { type: "string" },
                },
            ],
            metadata: {
                itemsPerPage: 1.1,
                totalItems: 1.1,
                currentPage: 1.1,
                itemsBeyondRetention: true,
                createdAtLe: "2024-01-15T09:30:00Z",
                createdAtGe: "2024-01-15T09:30:00Z",
            },
        };
        server.mockEndpoint().get("/structured-output").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.structuredOutputs.structuredOutputControllerFindAll();
        expect(response).toEqual({
            results: [
                {
                    model: {
                        provider: "openai",
                        model: "gpt-5",
                    },
                    id: "id",
                    orgId: "orgId",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    name: "name",
                    description: "description",
                    assistantIds: ["assistantIds"],
                    workflowIds: ["workflowIds"],
                    schema: {
                        type: "string",
                    },
                },
            ],
            metadata: {
                itemsPerPage: 1.1,
                totalItems: 1.1,
                currentPage: 1.1,
                itemsBeyondRetention: true,
                createdAtLe: "2024-01-15T09:30:00Z",
                createdAtGe: "2024-01-15T09:30:00Z",
            },
        });
    });

    test("StructuredOutputController_create", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", schema: { type: "string" } };
        const rawResponseBody = {
            model: { provider: "openai", model: "gpt-5", temperature: 1.1, maxTokens: 1.1 },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            description: "description",
            assistantIds: ["assistantIds"],
            workflowIds: ["workflowIds"],
            schema: {
                type: "string",
                items: { key: "value" },
                properties: { key: "value" },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
        };
        server
            .mockEndpoint()
            .post("/structured-output")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.structuredOutputs.structuredOutputControllerCreate({
            name: "name",
            schema: {
                type: "string",
            },
        });
        expect(response).toEqual({
            model: {
                provider: "openai",
                model: "gpt-5",
                temperature: 1.1,
                maxTokens: 1.1,
            },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            description: "description",
            assistantIds: ["assistantIds"],
            workflowIds: ["workflowIds"],
            schema: {
                type: "string",
                items: {
                    key: "value",
                },
                properties: {
                    key: "value",
                },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
        });
    });

    test("StructuredOutputController_findOne", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            model: { provider: "openai", model: "gpt-5", temperature: 1.1, maxTokens: 1.1 },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            description: "description",
            assistantIds: ["assistantIds"],
            workflowIds: ["workflowIds"],
            schema: {
                type: "string",
                items: { key: "value" },
                properties: { key: "value" },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
        };
        server
            .mockEndpoint()
            .get("/structured-output/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.structuredOutputs.structuredOutputControllerFindOne("id");
        expect(response).toEqual({
            model: {
                provider: "openai",
                model: "gpt-5",
                temperature: 1.1,
                maxTokens: 1.1,
            },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            description: "description",
            assistantIds: ["assistantIds"],
            workflowIds: ["workflowIds"],
            schema: {
                type: "string",
                items: {
                    key: "value",
                },
                properties: {
                    key: "value",
                },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
        });
    });

    test("StructuredOutputController_remove", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            model: { provider: "openai", model: "gpt-5", temperature: 1.1, maxTokens: 1.1 },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            description: "description",
            assistantIds: ["assistantIds"],
            workflowIds: ["workflowIds"],
            schema: {
                type: "string",
                items: { key: "value" },
                properties: { key: "value" },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
        };
        server
            .mockEndpoint()
            .delete("/structured-output/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.structuredOutputs.structuredOutputControllerRemove("id");
        expect(response).toEqual({
            model: {
                provider: "openai",
                model: "gpt-5",
                temperature: 1.1,
                maxTokens: 1.1,
            },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            description: "description",
            assistantIds: ["assistantIds"],
            workflowIds: ["workflowIds"],
            schema: {
                type: "string",
                items: {
                    key: "value",
                },
                properties: {
                    key: "value",
                },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
        });
    });

    test("StructuredOutputController_update", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            model: { provider: "openai", model: "gpt-5", temperature: 1.1, maxTokens: 1.1 },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            description: "description",
            assistantIds: ["assistantIds"],
            workflowIds: ["workflowIds"],
            schema: {
                type: "string",
                items: { key: "value" },
                properties: { key: "value" },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
        };
        server
            .mockEndpoint()
            .patch("/structured-output/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.structuredOutputs.structuredOutputControllerUpdate("id", {
            schemaOverride: "schemaOverride",
        });
        expect(response).toEqual({
            model: {
                provider: "openai",
                model: "gpt-5",
                temperature: 1.1,
                maxTokens: 1.1,
            },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            description: "description",
            assistantIds: ["assistantIds"],
            workflowIds: ["workflowIds"],
            schema: {
                type: "string",
                items: {
                    key: "value",
                },
                properties: {
                    key: "value",
                },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
        });
    });
});
