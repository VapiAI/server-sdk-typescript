/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { VapiClient } from "../../src/Client";

describe("Chats", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            results: [
                {
                    assistantId: "assistantId",
                    assistant: {
                        voice: {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                            fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
                        },
                        firstMessage: "Hello! How can I help you today?",
                        silenceTimeoutSeconds: 30,
                        maxDurationSeconds: 600,
                        backgroundSound: "off",
                        modelOutputInMessagesEnabled: false,
                    },
                    assistantOverrides: {
                        voice: {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                            fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
                        },
                        firstMessage: "Hello! How can I help you today?",
                        silenceTimeoutSeconds: 30,
                        maxDurationSeconds: 600,
                        backgroundSound: "off",
                        modelOutputInMessagesEnabled: false,
                    },
                    name: "name",
                    sessionId: "sessionId",
                    input: "input",
                    stream: true,
                    previousChatId: "previousChatId",
                    id: "id",
                    orgId: "orgId",
                    messages: [{ role: "role", message: "message", time: 1.1, secondsFromStart: 1.1 }],
                    output: [{ role: "role", message: "message", time: 1.1, secondsFromStart: 1.1 }],
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    costs: [
                        { type: "model", model: { key: "value" }, promptTokens: 1.1, completionTokens: 1.1, cost: 1.1 },
                    ],
                    cost: 1.1,
                },
            ],
            metadata: { itemsPerPage: 1.1, totalItems: 1.1, currentPage: 1.1 },
        };
        server.mockEndpoint().get("/chat").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.chats.list();
        expect(response).toEqual({
            results: [
                {
                    assistantId: "assistantId",
                    assistant: {
                        voice: {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                            fallbackPlan: {
                                voices: [
                                    {
                                        cachingEnabled: true,
                                        provider: "azure",
                                        voiceId: "andrew",
                                    },
                                ],
                            },
                        },
                        firstMessage: "Hello! How can I help you today?",
                        silenceTimeoutSeconds: 30,
                        maxDurationSeconds: 600,
                        backgroundSound: "off",
                        modelOutputInMessagesEnabled: false,
                    },
                    assistantOverrides: {
                        voice: {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                            fallbackPlan: {
                                voices: [
                                    {
                                        cachingEnabled: true,
                                        provider: "azure",
                                        voiceId: "andrew",
                                    },
                                ],
                            },
                        },
                        firstMessage: "Hello! How can I help you today?",
                        silenceTimeoutSeconds: 30,
                        maxDurationSeconds: 600,
                        backgroundSound: "off",
                        modelOutputInMessagesEnabled: false,
                    },
                    name: "name",
                    sessionId: "sessionId",
                    input: "input",
                    stream: true,
                    previousChatId: "previousChatId",
                    id: "id",
                    orgId: "orgId",
                    messages: [
                        {
                            role: "role",
                            message: "message",
                            time: 1.1,
                            secondsFromStart: 1.1,
                        },
                    ],
                    output: [
                        {
                            role: "role",
                            message: "message",
                            time: 1.1,
                            secondsFromStart: 1.1,
                        },
                    ],
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    costs: [
                        {
                            type: "model",
                            model: {
                                key: "value",
                            },
                            promptTokens: 1.1,
                            completionTokens: 1.1,
                            cost: 1.1,
                        },
                    ],
                    cost: 1.1,
                },
            ],
            metadata: {
                itemsPerPage: 1.1,
                totalItems: 1.1,
                currentPage: 1.1,
            },
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { input: "input" };
        const rawResponseBody = {
            assistantId: "assistantId",
            assistant: {
                transcriber: {
                    provider: "assembly-ai",
                    language: "en",
                    confidenceThreshold: 0.4,
                    enableUniversalStreamingApi: false,
                    formatTurns: false,
                    endOfTurnConfidenceThreshold: 0.7,
                    minEndOfTurnSilenceWhenConfident: 160,
                    wordFinalizationMaxWaitTime: 160,
                    maxTurnSilence: 400,
                    realtimeUrl: "realtimeUrl",
                    wordBoost: ["wordBoost"],
                    endUtteranceSilenceThreshold: 1.1,
                    disablePartialTranscripts: true,
                    fallbackPlan: {
                        transcribers: [
                            {
                                provider: "assembly-ai",
                                confidenceThreshold: 0.4,
                                enableUniversalStreamingApi: false,
                                formatTurns: false,
                                endOfTurnConfidenceThreshold: 0.7,
                                minEndOfTurnSilenceWhenConfident: 160,
                                wordFinalizationMaxWaitTime: 160,
                                maxTurnSilence: 400,
                            },
                        ],
                    },
                },
                model: {
                    messages: [{ role: "assistant" }],
                    tools: [
                        {
                            type: "apiRequest",
                            method: "POST",
                            timeoutSeconds: 20,
                            url: "url",
                            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                        },
                    ],
                    toolIds: ["toolIds"],
                    knowledgeBase: {
                        provider: "custom-knowledge-base",
                        server: {
                            timeoutSeconds: 20,
                            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                        },
                    },
                    knowledgeBaseId: "knowledgeBaseId",
                    model: "claude-3-opus-20240229",
                    provider: "anthropic",
                    thinking: { type: "enabled", budgetTokens: 1.1 },
                    temperature: 1.1,
                    maxTokens: 1.1,
                    emotionRecognitionEnabled: true,
                    numFastTurns: 1.1,
                },
                voice: {
                    cachingEnabled: true,
                    provider: "azure",
                    voiceId: "andrew",
                    chunkPlan: { enabled: true, minCharacters: 30 },
                    speed: 1.1,
                    fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
                },
                firstMessage: "Hello! How can I help you today?",
                firstMessageInterruptionsEnabled: true,
                firstMessageMode: "assistant-speaks-first",
                voicemailDetection: { beepMaxAwaitSeconds: 1.1, provider: "google" },
                clientMessages: [
                    "conversation-update",
                    "function-call",
                    "hang",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transfer-update",
                    "transcript",
                    "tool-calls",
                    "user-interrupted",
                    "voice-input",
                    "workflow.node.started",
                ],
                serverMessages: [
                    "conversation-update",
                    "end-of-call-report",
                    "function-call",
                    "hang",
                    "speech-update",
                    "status-update",
                    "tool-calls",
                    "transfer-destination-request",
                    "user-interrupted",
                ],
                silenceTimeoutSeconds: 30,
                maxDurationSeconds: 600,
                backgroundSound: "off",
                modelOutputInMessagesEnabled: false,
                transportConfigurations: [{ provider: "twilio", timeout: 60, record: false }],
                observabilityPlan: { provider: "langfuse", tags: ["tags"], metadata: { key: "value" } },
                credentials: [{ provider: "11labs", apiKey: "apiKey" }],
                hooks: [{ on: "call.ending", do: [{ type: "transfer" }] }],
                name: "name",
                voicemailMessage: "voicemailMessage",
                endCallMessage: "endCallMessage",
                endCallPhrases: ["endCallPhrases"],
                compliancePlan: { hipaaEnabled: true, pciEnabled: true },
                metadata: { key: "value" },
                backgroundSpeechDenoisingPlan: {
                    fourierDenoisingPlan: {
                        mediaDetectionEnabled: true,
                        staticThreshold: -35,
                        baselineOffsetDb: -15,
                        windowSizeMs: 3000,
                        baselinePercentile: 85,
                    },
                },
                analysisPlan: { minMessagesThreshold: 1.1, structuredDataMultiPlan: [{ key: "key", plan: {} }] },
                artifactPlan: {
                    recordingEnabled: true,
                    recordingFormat: "wav;l16",
                    videoRecordingEnabled: false,
                    pcapEnabled: true,
                    pcapS3PathPrefix: "/pcaps",
                    transcriptPlan: { enabled: true },
                    recordingPath: "recordingPath",
                },
                messagePlan: {
                    idleMessages: ["idleMessages"],
                    idleMessageMaxSpokenCount: 1.1,
                    idleMessageResetCountOnUserSpeechEnabled: true,
                    idleTimeoutSeconds: 1.1,
                    silenceTimeoutMessage: "silenceTimeoutMessage",
                },
                startSpeakingPlan: {
                    waitSeconds: 0.4,
                    smartEndpointingPlan: { provider: "vapi" },
                    customEndpointingRules: [{ type: "assistant", regex: "regex", timeoutSeconds: 1.1 }],
                    transcriptionEndpointingPlan: {
                        onPunctuationSeconds: 0.1,
                        onNoPunctuationSeconds: 1.5,
                        onNumberSeconds: 0.5,
                    },
                },
                stopSpeakingPlan: {
                    numWords: 0,
                    voiceSeconds: 0.2,
                    backoffSeconds: 1,
                    acknowledgementPhrases: [
                        "i understand",
                        "i see",
                        "i got it",
                        "i hear you",
                        "im listening",
                        "im with you",
                        "right",
                        "okay",
                        "ok",
                        "sure",
                        "alright",
                        "got it",
                        "understood",
                        "yeah",
                        "yes",
                        "uh-huh",
                        "mm-hmm",
                        "gotcha",
                        "mhmm",
                        "ah",
                        "yeah okay",
                        "yeah sure",
                    ],
                    interruptionPhrases: [
                        "stop",
                        "shut",
                        "up",
                        "enough",
                        "quiet",
                        "silence",
                        "but",
                        "dont",
                        "not",
                        "no",
                        "hold",
                        "wait",
                        "cut",
                        "pause",
                        "nope",
                        "nah",
                        "nevermind",
                        "never",
                        "bad",
                        "actually",
                    ],
                },
                monitorPlan: {
                    listenEnabled: false,
                    listenAuthenticationEnabled: false,
                    controlEnabled: false,
                    controlAuthenticationEnabled: false,
                },
                credentialIds: ["credentialIds"],
                server: {
                    timeoutSeconds: 20,
                    url: "url",
                    headers: { key: "value" },
                    backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                },
                keypadInputPlan: { enabled: true, timeoutSeconds: 1.1, delimiters: "#" },
            },
            assistantOverrides: {
                transcriber: {
                    provider: "assembly-ai",
                    language: "en",
                    confidenceThreshold: 0.4,
                    enableUniversalStreamingApi: false,
                    formatTurns: false,
                    endOfTurnConfidenceThreshold: 0.7,
                    minEndOfTurnSilenceWhenConfident: 160,
                    wordFinalizationMaxWaitTime: 160,
                    maxTurnSilence: 400,
                    realtimeUrl: "realtimeUrl",
                    wordBoost: ["wordBoost"],
                    endUtteranceSilenceThreshold: 1.1,
                    disablePartialTranscripts: true,
                    fallbackPlan: {
                        transcribers: [
                            {
                                provider: "assembly-ai",
                                confidenceThreshold: 0.4,
                                enableUniversalStreamingApi: false,
                                formatTurns: false,
                                endOfTurnConfidenceThreshold: 0.7,
                                minEndOfTurnSilenceWhenConfident: 160,
                                wordFinalizationMaxWaitTime: 160,
                                maxTurnSilence: 400,
                            },
                        ],
                    },
                },
                model: {
                    messages: [{ role: "assistant" }],
                    tools: [
                        {
                            type: "apiRequest",
                            method: "POST",
                            timeoutSeconds: 20,
                            url: "url",
                            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                        },
                    ],
                    toolIds: ["toolIds"],
                    knowledgeBase: {
                        provider: "custom-knowledge-base",
                        server: {
                            timeoutSeconds: 20,
                            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                        },
                    },
                    knowledgeBaseId: "knowledgeBaseId",
                    model: "claude-3-opus-20240229",
                    provider: "anthropic",
                    thinking: { type: "enabled", budgetTokens: 1.1 },
                    temperature: 1.1,
                    maxTokens: 1.1,
                    emotionRecognitionEnabled: true,
                    numFastTurns: 1.1,
                },
                voice: {
                    cachingEnabled: true,
                    provider: "azure",
                    voiceId: "andrew",
                    chunkPlan: { enabled: true, minCharacters: 30 },
                    speed: 1.1,
                    fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
                },
                firstMessage: "Hello! How can I help you today?",
                firstMessageInterruptionsEnabled: true,
                firstMessageMode: "assistant-speaks-first",
                voicemailDetection: { beepMaxAwaitSeconds: 1.1, provider: "google" },
                clientMessages: [
                    "conversation-update",
                    "function-call",
                    "hang",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transfer-update",
                    "transcript",
                    "tool-calls",
                    "user-interrupted",
                    "voice-input",
                    "workflow.node.started",
                ],
                serverMessages: [
                    "conversation-update",
                    "end-of-call-report",
                    "function-call",
                    "hang",
                    "speech-update",
                    "status-update",
                    "tool-calls",
                    "transfer-destination-request",
                    "user-interrupted",
                ],
                silenceTimeoutSeconds: 30,
                maxDurationSeconds: 600,
                backgroundSound: "off",
                modelOutputInMessagesEnabled: false,
                transportConfigurations: [{ provider: "twilio", timeout: 60, record: false }],
                observabilityPlan: { provider: "langfuse", tags: ["tags"], metadata: { key: "value" } },
                credentials: [{ provider: "11labs", apiKey: "apiKey" }],
                hooks: [{ on: "call.ending", do: [{ type: "transfer" }] }],
                variableValues: { key: "value" },
                name: "name",
                voicemailMessage: "voicemailMessage",
                endCallMessage: "endCallMessage",
                endCallPhrases: ["endCallPhrases"],
                compliancePlan: { hipaaEnabled: true, pciEnabled: true },
                metadata: { key: "value" },
                backgroundSpeechDenoisingPlan: {
                    fourierDenoisingPlan: {
                        mediaDetectionEnabled: true,
                        staticThreshold: -35,
                        baselineOffsetDb: -15,
                        windowSizeMs: 3000,
                        baselinePercentile: 85,
                    },
                },
                analysisPlan: { minMessagesThreshold: 1.1, structuredDataMultiPlan: [{ key: "key", plan: {} }] },
                artifactPlan: {
                    recordingEnabled: true,
                    recordingFormat: "wav;l16",
                    videoRecordingEnabled: false,
                    pcapEnabled: true,
                    pcapS3PathPrefix: "/pcaps",
                    transcriptPlan: { enabled: true },
                    recordingPath: "recordingPath",
                },
                messagePlan: {
                    idleMessages: ["idleMessages"],
                    idleMessageMaxSpokenCount: 1.1,
                    idleMessageResetCountOnUserSpeechEnabled: true,
                    idleTimeoutSeconds: 1.1,
                    silenceTimeoutMessage: "silenceTimeoutMessage",
                },
                startSpeakingPlan: {
                    waitSeconds: 0.4,
                    smartEndpointingPlan: { provider: "vapi" },
                    customEndpointingRules: [{ type: "assistant", regex: "regex", timeoutSeconds: 1.1 }],
                    transcriptionEndpointingPlan: {
                        onPunctuationSeconds: 0.1,
                        onNoPunctuationSeconds: 1.5,
                        onNumberSeconds: 0.5,
                    },
                },
                stopSpeakingPlan: {
                    numWords: 0,
                    voiceSeconds: 0.2,
                    backoffSeconds: 1,
                    acknowledgementPhrases: [
                        "i understand",
                        "i see",
                        "i got it",
                        "i hear you",
                        "im listening",
                        "im with you",
                        "right",
                        "okay",
                        "ok",
                        "sure",
                        "alright",
                        "got it",
                        "understood",
                        "yeah",
                        "yes",
                        "uh-huh",
                        "mm-hmm",
                        "gotcha",
                        "mhmm",
                        "ah",
                        "yeah okay",
                        "yeah sure",
                    ],
                    interruptionPhrases: [
                        "stop",
                        "shut",
                        "up",
                        "enough",
                        "quiet",
                        "silence",
                        "but",
                        "dont",
                        "not",
                        "no",
                        "hold",
                        "wait",
                        "cut",
                        "pause",
                        "nope",
                        "nah",
                        "nevermind",
                        "never",
                        "bad",
                        "actually",
                    ],
                },
                monitorPlan: {
                    listenEnabled: false,
                    listenAuthenticationEnabled: false,
                    controlEnabled: false,
                    controlAuthenticationEnabled: false,
                },
                credentialIds: ["credentialIds"],
                server: {
                    timeoutSeconds: 20,
                    url: "url",
                    headers: { key: "value" },
                    backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                },
                keypadInputPlan: { enabled: true, timeoutSeconds: 1.1, delimiters: "#" },
            },
            name: "name",
            sessionId: "sessionId",
            input: "input",
            stream: true,
            previousChatId: "previousChatId",
            id: "id",
            orgId: "orgId",
            messages: [{ role: "role", message: "message", time: 1.1, secondsFromStart: 1.1 }],
            output: [{ role: "role", message: "message", time: 1.1, secondsFromStart: 1.1 }],
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            costs: [{ type: "model", model: { key: "value" }, promptTokens: 1.1, completionTokens: 1.1, cost: 1.1 }],
            cost: 1.1,
        };
        server
            .mockEndpoint()
            .post("/chat")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.chats.create({
            input: "input",
        });
        expect(response).toEqual({
            assistantId: "assistantId",
            assistant: {
                transcriber: {
                    provider: "assembly-ai",
                    language: "en",
                    confidenceThreshold: 0.4,
                    enableUniversalStreamingApi: false,
                    formatTurns: false,
                    endOfTurnConfidenceThreshold: 0.7,
                    minEndOfTurnSilenceWhenConfident: 160,
                    wordFinalizationMaxWaitTime: 160,
                    maxTurnSilence: 400,
                    realtimeUrl: "realtimeUrl",
                    wordBoost: ["wordBoost"],
                    endUtteranceSilenceThreshold: 1.1,
                    disablePartialTranscripts: true,
                    fallbackPlan: {
                        transcribers: [
                            {
                                provider: "assembly-ai",
                                confidenceThreshold: 0.4,
                                enableUniversalStreamingApi: false,
                                formatTurns: false,
                                endOfTurnConfidenceThreshold: 0.7,
                                minEndOfTurnSilenceWhenConfident: 160,
                                wordFinalizationMaxWaitTime: 160,
                                maxTurnSilence: 400,
                            },
                        ],
                    },
                },
                model: {
                    messages: [
                        {
                            role: "assistant",
                        },
                    ],
                    tools: [
                        {
                            type: "apiRequest",
                            method: "POST",
                            timeoutSeconds: 20,
                            url: "url",
                            backoffPlan: {
                                type: {
                                    key: "value",
                                },
                                maxRetries: 0,
                                baseDelaySeconds: 1,
                            },
                        },
                    ],
                    toolIds: ["toolIds"],
                    knowledgeBase: {
                        provider: "custom-knowledge-base",
                        server: {
                            timeoutSeconds: 20,
                            backoffPlan: {
                                type: {
                                    key: "value",
                                },
                                maxRetries: 0,
                                baseDelaySeconds: 1,
                            },
                        },
                    },
                    knowledgeBaseId: "knowledgeBaseId",
                    model: "claude-3-opus-20240229",
                    provider: "anthropic",
                    thinking: {
                        type: "enabled",
                        budgetTokens: 1.1,
                    },
                    temperature: 1.1,
                    maxTokens: 1.1,
                    emotionRecognitionEnabled: true,
                    numFastTurns: 1.1,
                },
                voice: {
                    cachingEnabled: true,
                    provider: "azure",
                    voiceId: "andrew",
                    chunkPlan: {
                        enabled: true,
                        minCharacters: 30,
                    },
                    speed: 1.1,
                    fallbackPlan: {
                        voices: [
                            {
                                cachingEnabled: true,
                                provider: "azure",
                                voiceId: "andrew",
                            },
                        ],
                    },
                },
                firstMessage: "Hello! How can I help you today?",
                firstMessageInterruptionsEnabled: true,
                firstMessageMode: "assistant-speaks-first",
                voicemailDetection: {
                    beepMaxAwaitSeconds: 1.1,
                    provider: "google",
                },
                clientMessages: [
                    "conversation-update",
                    "function-call",
                    "hang",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transfer-update",
                    "transcript",
                    "tool-calls",
                    "user-interrupted",
                    "voice-input",
                    "workflow.node.started",
                ],
                serverMessages: [
                    "conversation-update",
                    "end-of-call-report",
                    "function-call",
                    "hang",
                    "speech-update",
                    "status-update",
                    "tool-calls",
                    "transfer-destination-request",
                    "user-interrupted",
                ],
                silenceTimeoutSeconds: 30,
                maxDurationSeconds: 600,
                backgroundSound: "off",
                modelOutputInMessagesEnabled: false,
                transportConfigurations: [
                    {
                        provider: "twilio",
                        timeout: 60,
                        record: false,
                    },
                ],
                observabilityPlan: {
                    provider: "langfuse",
                    tags: ["tags"],
                    metadata: {
                        key: "value",
                    },
                },
                credentials: [
                    {
                        provider: "11labs",
                        apiKey: "apiKey",
                    },
                ],
                hooks: [
                    {
                        on: "call.ending",
                        do: [
                            {
                                type: "transfer",
                            },
                        ],
                    },
                ],
                name: "name",
                voicemailMessage: "voicemailMessage",
                endCallMessage: "endCallMessage",
                endCallPhrases: ["endCallPhrases"],
                compliancePlan: {
                    hipaaEnabled: true,
                    pciEnabled: true,
                },
                metadata: {
                    key: "value",
                },
                backgroundSpeechDenoisingPlan: {
                    fourierDenoisingPlan: {
                        mediaDetectionEnabled: true,
                        staticThreshold: -35,
                        baselineOffsetDb: -15,
                        windowSizeMs: 3000,
                        baselinePercentile: 85,
                    },
                },
                analysisPlan: {
                    minMessagesThreshold: 1.1,
                    structuredDataMultiPlan: [
                        {
                            key: "key",
                            plan: {},
                        },
                    ],
                },
                artifactPlan: {
                    recordingEnabled: true,
                    recordingFormat: "wav;l16",
                    videoRecordingEnabled: false,
                    pcapEnabled: true,
                    pcapS3PathPrefix: "/pcaps",
                    transcriptPlan: {
                        enabled: true,
                    },
                    recordingPath: "recordingPath",
                },
                messagePlan: {
                    idleMessages: ["idleMessages"],
                    idleMessageMaxSpokenCount: 1.1,
                    idleMessageResetCountOnUserSpeechEnabled: true,
                    idleTimeoutSeconds: 1.1,
                    silenceTimeoutMessage: "silenceTimeoutMessage",
                },
                startSpeakingPlan: {
                    waitSeconds: 0.4,
                    smartEndpointingPlan: {
                        provider: "vapi",
                    },
                    customEndpointingRules: [
                        {
                            type: "assistant",
                            regex: "regex",
                            timeoutSeconds: 1.1,
                        },
                    ],
                    transcriptionEndpointingPlan: {
                        onPunctuationSeconds: 0.1,
                        onNoPunctuationSeconds: 1.5,
                        onNumberSeconds: 0.5,
                    },
                },
                stopSpeakingPlan: {
                    numWords: 0,
                    voiceSeconds: 0.2,
                    backoffSeconds: 1,
                    acknowledgementPhrases: [
                        "i understand",
                        "i see",
                        "i got it",
                        "i hear you",
                        "im listening",
                        "im with you",
                        "right",
                        "okay",
                        "ok",
                        "sure",
                        "alright",
                        "got it",
                        "understood",
                        "yeah",
                        "yes",
                        "uh-huh",
                        "mm-hmm",
                        "gotcha",
                        "mhmm",
                        "ah",
                        "yeah okay",
                        "yeah sure",
                    ],
                    interruptionPhrases: [
                        "stop",
                        "shut",
                        "up",
                        "enough",
                        "quiet",
                        "silence",
                        "but",
                        "dont",
                        "not",
                        "no",
                        "hold",
                        "wait",
                        "cut",
                        "pause",
                        "nope",
                        "nah",
                        "nevermind",
                        "never",
                        "bad",
                        "actually",
                    ],
                },
                monitorPlan: {
                    listenEnabled: false,
                    listenAuthenticationEnabled: false,
                    controlEnabled: false,
                    controlAuthenticationEnabled: false,
                },
                credentialIds: ["credentialIds"],
                server: {
                    timeoutSeconds: 20,
                    url: "url",
                    headers: {
                        key: "value",
                    },
                    backoffPlan: {
                        type: {
                            key: "value",
                        },
                        maxRetries: 0,
                        baseDelaySeconds: 1,
                    },
                },
                keypadInputPlan: {
                    enabled: true,
                    timeoutSeconds: 1.1,
                    delimiters: "#",
                },
            },
            assistantOverrides: {
                transcriber: {
                    provider: "assembly-ai",
                    language: "en",
                    confidenceThreshold: 0.4,
                    enableUniversalStreamingApi: false,
                    formatTurns: false,
                    endOfTurnConfidenceThreshold: 0.7,
                    minEndOfTurnSilenceWhenConfident: 160,
                    wordFinalizationMaxWaitTime: 160,
                    maxTurnSilence: 400,
                    realtimeUrl: "realtimeUrl",
                    wordBoost: ["wordBoost"],
                    endUtteranceSilenceThreshold: 1.1,
                    disablePartialTranscripts: true,
                    fallbackPlan: {
                        transcribers: [
                            {
                                provider: "assembly-ai",
                                confidenceThreshold: 0.4,
                                enableUniversalStreamingApi: false,
                                formatTurns: false,
                                endOfTurnConfidenceThreshold: 0.7,
                                minEndOfTurnSilenceWhenConfident: 160,
                                wordFinalizationMaxWaitTime: 160,
                                maxTurnSilence: 400,
                            },
                        ],
                    },
                },
                model: {
                    messages: [
                        {
                            role: "assistant",
                        },
                    ],
                    tools: [
                        {
                            type: "apiRequest",
                            method: "POST",
                            timeoutSeconds: 20,
                            url: "url",
                            backoffPlan: {
                                type: {
                                    key: "value",
                                },
                                maxRetries: 0,
                                baseDelaySeconds: 1,
                            },
                        },
                    ],
                    toolIds: ["toolIds"],
                    knowledgeBase: {
                        provider: "custom-knowledge-base",
                        server: {
                            timeoutSeconds: 20,
                            backoffPlan: {
                                type: {
                                    key: "value",
                                },
                                maxRetries: 0,
                                baseDelaySeconds: 1,
                            },
                        },
                    },
                    knowledgeBaseId: "knowledgeBaseId",
                    model: "claude-3-opus-20240229",
                    provider: "anthropic",
                    thinking: {
                        type: "enabled",
                        budgetTokens: 1.1,
                    },
                    temperature: 1.1,
                    maxTokens: 1.1,
                    emotionRecognitionEnabled: true,
                    numFastTurns: 1.1,
                },
                voice: {
                    cachingEnabled: true,
                    provider: "azure",
                    voiceId: "andrew",
                    chunkPlan: {
                        enabled: true,
                        minCharacters: 30,
                    },
                    speed: 1.1,
                    fallbackPlan: {
                        voices: [
                            {
                                cachingEnabled: true,
                                provider: "azure",
                                voiceId: "andrew",
                            },
                        ],
                    },
                },
                firstMessage: "Hello! How can I help you today?",
                firstMessageInterruptionsEnabled: true,
                firstMessageMode: "assistant-speaks-first",
                voicemailDetection: {
                    beepMaxAwaitSeconds: 1.1,
                    provider: "google",
                },
                clientMessages: [
                    "conversation-update",
                    "function-call",
                    "hang",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transfer-update",
                    "transcript",
                    "tool-calls",
                    "user-interrupted",
                    "voice-input",
                    "workflow.node.started",
                ],
                serverMessages: [
                    "conversation-update",
                    "end-of-call-report",
                    "function-call",
                    "hang",
                    "speech-update",
                    "status-update",
                    "tool-calls",
                    "transfer-destination-request",
                    "user-interrupted",
                ],
                silenceTimeoutSeconds: 30,
                maxDurationSeconds: 600,
                backgroundSound: "off",
                modelOutputInMessagesEnabled: false,
                transportConfigurations: [
                    {
                        provider: "twilio",
                        timeout: 60,
                        record: false,
                    },
                ],
                observabilityPlan: {
                    provider: "langfuse",
                    tags: ["tags"],
                    metadata: {
                        key: "value",
                    },
                },
                credentials: [
                    {
                        provider: "11labs",
                        apiKey: "apiKey",
                    },
                ],
                hooks: [
                    {
                        on: "call.ending",
                        do: [
                            {
                                type: "transfer",
                            },
                        ],
                    },
                ],
                variableValues: {
                    key: "value",
                },
                name: "name",
                voicemailMessage: "voicemailMessage",
                endCallMessage: "endCallMessage",
                endCallPhrases: ["endCallPhrases"],
                compliancePlan: {
                    hipaaEnabled: true,
                    pciEnabled: true,
                },
                metadata: {
                    key: "value",
                },
                backgroundSpeechDenoisingPlan: {
                    fourierDenoisingPlan: {
                        mediaDetectionEnabled: true,
                        staticThreshold: -35,
                        baselineOffsetDb: -15,
                        windowSizeMs: 3000,
                        baselinePercentile: 85,
                    },
                },
                analysisPlan: {
                    minMessagesThreshold: 1.1,
                    structuredDataMultiPlan: [
                        {
                            key: "key",
                            plan: {},
                        },
                    ],
                },
                artifactPlan: {
                    recordingEnabled: true,
                    recordingFormat: "wav;l16",
                    videoRecordingEnabled: false,
                    pcapEnabled: true,
                    pcapS3PathPrefix: "/pcaps",
                    transcriptPlan: {
                        enabled: true,
                    },
                    recordingPath: "recordingPath",
                },
                messagePlan: {
                    idleMessages: ["idleMessages"],
                    idleMessageMaxSpokenCount: 1.1,
                    idleMessageResetCountOnUserSpeechEnabled: true,
                    idleTimeoutSeconds: 1.1,
                    silenceTimeoutMessage: "silenceTimeoutMessage",
                },
                startSpeakingPlan: {
                    waitSeconds: 0.4,
                    smartEndpointingPlan: {
                        provider: "vapi",
                    },
                    customEndpointingRules: [
                        {
                            type: "assistant",
                            regex: "regex",
                            timeoutSeconds: 1.1,
                        },
                    ],
                    transcriptionEndpointingPlan: {
                        onPunctuationSeconds: 0.1,
                        onNoPunctuationSeconds: 1.5,
                        onNumberSeconds: 0.5,
                    },
                },
                stopSpeakingPlan: {
                    numWords: 0,
                    voiceSeconds: 0.2,
                    backoffSeconds: 1,
                    acknowledgementPhrases: [
                        "i understand",
                        "i see",
                        "i got it",
                        "i hear you",
                        "im listening",
                        "im with you",
                        "right",
                        "okay",
                        "ok",
                        "sure",
                        "alright",
                        "got it",
                        "understood",
                        "yeah",
                        "yes",
                        "uh-huh",
                        "mm-hmm",
                        "gotcha",
                        "mhmm",
                        "ah",
                        "yeah okay",
                        "yeah sure",
                    ],
                    interruptionPhrases: [
                        "stop",
                        "shut",
                        "up",
                        "enough",
                        "quiet",
                        "silence",
                        "but",
                        "dont",
                        "not",
                        "no",
                        "hold",
                        "wait",
                        "cut",
                        "pause",
                        "nope",
                        "nah",
                        "nevermind",
                        "never",
                        "bad",
                        "actually",
                    ],
                },
                monitorPlan: {
                    listenEnabled: false,
                    listenAuthenticationEnabled: false,
                    controlEnabled: false,
                    controlAuthenticationEnabled: false,
                },
                credentialIds: ["credentialIds"],
                server: {
                    timeoutSeconds: 20,
                    url: "url",
                    headers: {
                        key: "value",
                    },
                    backoffPlan: {
                        type: {
                            key: "value",
                        },
                        maxRetries: 0,
                        baseDelaySeconds: 1,
                    },
                },
                keypadInputPlan: {
                    enabled: true,
                    timeoutSeconds: 1.1,
                    delimiters: "#",
                },
            },
            name: "name",
            sessionId: "sessionId",
            input: "input",
            stream: true,
            previousChatId: "previousChatId",
            id: "id",
            orgId: "orgId",
            messages: [
                {
                    role: "role",
                    message: "message",
                    time: 1.1,
                    secondsFromStart: 1.1,
                },
            ],
            output: [
                {
                    role: "role",
                    message: "message",
                    time: 1.1,
                    secondsFromStart: 1.1,
                },
            ],
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            costs: [
                {
                    type: "model",
                    model: {
                        key: "value",
                    },
                    promptTokens: 1.1,
                    completionTokens: 1.1,
                    cost: 1.1,
                },
            ],
            cost: 1.1,
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            assistantId: "assistantId",
            assistant: {
                transcriber: {
                    provider: "assembly-ai",
                    language: "en",
                    confidenceThreshold: 0.4,
                    enableUniversalStreamingApi: false,
                    formatTurns: false,
                    endOfTurnConfidenceThreshold: 0.7,
                    minEndOfTurnSilenceWhenConfident: 160,
                    wordFinalizationMaxWaitTime: 160,
                    maxTurnSilence: 400,
                    realtimeUrl: "realtimeUrl",
                    wordBoost: ["wordBoost"],
                    endUtteranceSilenceThreshold: 1.1,
                    disablePartialTranscripts: true,
                    fallbackPlan: {
                        transcribers: [
                            {
                                provider: "assembly-ai",
                                confidenceThreshold: 0.4,
                                enableUniversalStreamingApi: false,
                                formatTurns: false,
                                endOfTurnConfidenceThreshold: 0.7,
                                minEndOfTurnSilenceWhenConfident: 160,
                                wordFinalizationMaxWaitTime: 160,
                                maxTurnSilence: 400,
                            },
                        ],
                    },
                },
                model: {
                    messages: [{ role: "assistant" }],
                    tools: [
                        {
                            type: "apiRequest",
                            method: "POST",
                            timeoutSeconds: 20,
                            url: "url",
                            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                        },
                    ],
                    toolIds: ["toolIds"],
                    knowledgeBase: {
                        provider: "custom-knowledge-base",
                        server: {
                            timeoutSeconds: 20,
                            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                        },
                    },
                    knowledgeBaseId: "knowledgeBaseId",
                    model: "claude-3-opus-20240229",
                    provider: "anthropic",
                    thinking: { type: "enabled", budgetTokens: 1.1 },
                    temperature: 1.1,
                    maxTokens: 1.1,
                    emotionRecognitionEnabled: true,
                    numFastTurns: 1.1,
                },
                voice: {
                    cachingEnabled: true,
                    provider: "azure",
                    voiceId: "andrew",
                    chunkPlan: { enabled: true, minCharacters: 30 },
                    speed: 1.1,
                    fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
                },
                firstMessage: "Hello! How can I help you today?",
                firstMessageInterruptionsEnabled: true,
                firstMessageMode: "assistant-speaks-first",
                voicemailDetection: { beepMaxAwaitSeconds: 1.1, provider: "google" },
                clientMessages: [
                    "conversation-update",
                    "function-call",
                    "hang",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transfer-update",
                    "transcript",
                    "tool-calls",
                    "user-interrupted",
                    "voice-input",
                    "workflow.node.started",
                ],
                serverMessages: [
                    "conversation-update",
                    "end-of-call-report",
                    "function-call",
                    "hang",
                    "speech-update",
                    "status-update",
                    "tool-calls",
                    "transfer-destination-request",
                    "user-interrupted",
                ],
                silenceTimeoutSeconds: 30,
                maxDurationSeconds: 600,
                backgroundSound: "off",
                modelOutputInMessagesEnabled: false,
                transportConfigurations: [{ provider: "twilio", timeout: 60, record: false }],
                observabilityPlan: { provider: "langfuse", tags: ["tags"], metadata: { key: "value" } },
                credentials: [{ provider: "11labs", apiKey: "apiKey" }],
                hooks: [{ on: "call.ending", do: [{ type: "transfer" }] }],
                name: "name",
                voicemailMessage: "voicemailMessage",
                endCallMessage: "endCallMessage",
                endCallPhrases: ["endCallPhrases"],
                compliancePlan: { hipaaEnabled: true, pciEnabled: true },
                metadata: { key: "value" },
                backgroundSpeechDenoisingPlan: {
                    fourierDenoisingPlan: {
                        mediaDetectionEnabled: true,
                        staticThreshold: -35,
                        baselineOffsetDb: -15,
                        windowSizeMs: 3000,
                        baselinePercentile: 85,
                    },
                },
                analysisPlan: { minMessagesThreshold: 1.1, structuredDataMultiPlan: [{ key: "key", plan: {} }] },
                artifactPlan: {
                    recordingEnabled: true,
                    recordingFormat: "wav;l16",
                    videoRecordingEnabled: false,
                    pcapEnabled: true,
                    pcapS3PathPrefix: "/pcaps",
                    transcriptPlan: { enabled: true },
                    recordingPath: "recordingPath",
                },
                messagePlan: {
                    idleMessages: ["idleMessages"],
                    idleMessageMaxSpokenCount: 1.1,
                    idleMessageResetCountOnUserSpeechEnabled: true,
                    idleTimeoutSeconds: 1.1,
                    silenceTimeoutMessage: "silenceTimeoutMessage",
                },
                startSpeakingPlan: {
                    waitSeconds: 0.4,
                    smartEndpointingPlan: { provider: "vapi" },
                    customEndpointingRules: [{ type: "assistant", regex: "regex", timeoutSeconds: 1.1 }],
                    transcriptionEndpointingPlan: {
                        onPunctuationSeconds: 0.1,
                        onNoPunctuationSeconds: 1.5,
                        onNumberSeconds: 0.5,
                    },
                },
                stopSpeakingPlan: {
                    numWords: 0,
                    voiceSeconds: 0.2,
                    backoffSeconds: 1,
                    acknowledgementPhrases: [
                        "i understand",
                        "i see",
                        "i got it",
                        "i hear you",
                        "im listening",
                        "im with you",
                        "right",
                        "okay",
                        "ok",
                        "sure",
                        "alright",
                        "got it",
                        "understood",
                        "yeah",
                        "yes",
                        "uh-huh",
                        "mm-hmm",
                        "gotcha",
                        "mhmm",
                        "ah",
                        "yeah okay",
                        "yeah sure",
                    ],
                    interruptionPhrases: [
                        "stop",
                        "shut",
                        "up",
                        "enough",
                        "quiet",
                        "silence",
                        "but",
                        "dont",
                        "not",
                        "no",
                        "hold",
                        "wait",
                        "cut",
                        "pause",
                        "nope",
                        "nah",
                        "nevermind",
                        "never",
                        "bad",
                        "actually",
                    ],
                },
                monitorPlan: {
                    listenEnabled: false,
                    listenAuthenticationEnabled: false,
                    controlEnabled: false,
                    controlAuthenticationEnabled: false,
                },
                credentialIds: ["credentialIds"],
                server: {
                    timeoutSeconds: 20,
                    url: "url",
                    headers: { key: "value" },
                    backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                },
                keypadInputPlan: { enabled: true, timeoutSeconds: 1.1, delimiters: "#" },
            },
            assistantOverrides: {
                transcriber: {
                    provider: "assembly-ai",
                    language: "en",
                    confidenceThreshold: 0.4,
                    enableUniversalStreamingApi: false,
                    formatTurns: false,
                    endOfTurnConfidenceThreshold: 0.7,
                    minEndOfTurnSilenceWhenConfident: 160,
                    wordFinalizationMaxWaitTime: 160,
                    maxTurnSilence: 400,
                    realtimeUrl: "realtimeUrl",
                    wordBoost: ["wordBoost"],
                    endUtteranceSilenceThreshold: 1.1,
                    disablePartialTranscripts: true,
                    fallbackPlan: {
                        transcribers: [
                            {
                                provider: "assembly-ai",
                                confidenceThreshold: 0.4,
                                enableUniversalStreamingApi: false,
                                formatTurns: false,
                                endOfTurnConfidenceThreshold: 0.7,
                                minEndOfTurnSilenceWhenConfident: 160,
                                wordFinalizationMaxWaitTime: 160,
                                maxTurnSilence: 400,
                            },
                        ],
                    },
                },
                model: {
                    messages: [{ role: "assistant" }],
                    tools: [
                        {
                            type: "apiRequest",
                            method: "POST",
                            timeoutSeconds: 20,
                            url: "url",
                            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                        },
                    ],
                    toolIds: ["toolIds"],
                    knowledgeBase: {
                        provider: "custom-knowledge-base",
                        server: {
                            timeoutSeconds: 20,
                            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                        },
                    },
                    knowledgeBaseId: "knowledgeBaseId",
                    model: "claude-3-opus-20240229",
                    provider: "anthropic",
                    thinking: { type: "enabled", budgetTokens: 1.1 },
                    temperature: 1.1,
                    maxTokens: 1.1,
                    emotionRecognitionEnabled: true,
                    numFastTurns: 1.1,
                },
                voice: {
                    cachingEnabled: true,
                    provider: "azure",
                    voiceId: "andrew",
                    chunkPlan: { enabled: true, minCharacters: 30 },
                    speed: 1.1,
                    fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
                },
                firstMessage: "Hello! How can I help you today?",
                firstMessageInterruptionsEnabled: true,
                firstMessageMode: "assistant-speaks-first",
                voicemailDetection: { beepMaxAwaitSeconds: 1.1, provider: "google" },
                clientMessages: [
                    "conversation-update",
                    "function-call",
                    "hang",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transfer-update",
                    "transcript",
                    "tool-calls",
                    "user-interrupted",
                    "voice-input",
                    "workflow.node.started",
                ],
                serverMessages: [
                    "conversation-update",
                    "end-of-call-report",
                    "function-call",
                    "hang",
                    "speech-update",
                    "status-update",
                    "tool-calls",
                    "transfer-destination-request",
                    "user-interrupted",
                ],
                silenceTimeoutSeconds: 30,
                maxDurationSeconds: 600,
                backgroundSound: "off",
                modelOutputInMessagesEnabled: false,
                transportConfigurations: [{ provider: "twilio", timeout: 60, record: false }],
                observabilityPlan: { provider: "langfuse", tags: ["tags"], metadata: { key: "value" } },
                credentials: [{ provider: "11labs", apiKey: "apiKey" }],
                hooks: [{ on: "call.ending", do: [{ type: "transfer" }] }],
                variableValues: { key: "value" },
                name: "name",
                voicemailMessage: "voicemailMessage",
                endCallMessage: "endCallMessage",
                endCallPhrases: ["endCallPhrases"],
                compliancePlan: { hipaaEnabled: true, pciEnabled: true },
                metadata: { key: "value" },
                backgroundSpeechDenoisingPlan: {
                    fourierDenoisingPlan: {
                        mediaDetectionEnabled: true,
                        staticThreshold: -35,
                        baselineOffsetDb: -15,
                        windowSizeMs: 3000,
                        baselinePercentile: 85,
                    },
                },
                analysisPlan: { minMessagesThreshold: 1.1, structuredDataMultiPlan: [{ key: "key", plan: {} }] },
                artifactPlan: {
                    recordingEnabled: true,
                    recordingFormat: "wav;l16",
                    videoRecordingEnabled: false,
                    pcapEnabled: true,
                    pcapS3PathPrefix: "/pcaps",
                    transcriptPlan: { enabled: true },
                    recordingPath: "recordingPath",
                },
                messagePlan: {
                    idleMessages: ["idleMessages"],
                    idleMessageMaxSpokenCount: 1.1,
                    idleMessageResetCountOnUserSpeechEnabled: true,
                    idleTimeoutSeconds: 1.1,
                    silenceTimeoutMessage: "silenceTimeoutMessage",
                },
                startSpeakingPlan: {
                    waitSeconds: 0.4,
                    smartEndpointingPlan: { provider: "vapi" },
                    customEndpointingRules: [{ type: "assistant", regex: "regex", timeoutSeconds: 1.1 }],
                    transcriptionEndpointingPlan: {
                        onPunctuationSeconds: 0.1,
                        onNoPunctuationSeconds: 1.5,
                        onNumberSeconds: 0.5,
                    },
                },
                stopSpeakingPlan: {
                    numWords: 0,
                    voiceSeconds: 0.2,
                    backoffSeconds: 1,
                    acknowledgementPhrases: [
                        "i understand",
                        "i see",
                        "i got it",
                        "i hear you",
                        "im listening",
                        "im with you",
                        "right",
                        "okay",
                        "ok",
                        "sure",
                        "alright",
                        "got it",
                        "understood",
                        "yeah",
                        "yes",
                        "uh-huh",
                        "mm-hmm",
                        "gotcha",
                        "mhmm",
                        "ah",
                        "yeah okay",
                        "yeah sure",
                    ],
                    interruptionPhrases: [
                        "stop",
                        "shut",
                        "up",
                        "enough",
                        "quiet",
                        "silence",
                        "but",
                        "dont",
                        "not",
                        "no",
                        "hold",
                        "wait",
                        "cut",
                        "pause",
                        "nope",
                        "nah",
                        "nevermind",
                        "never",
                        "bad",
                        "actually",
                    ],
                },
                monitorPlan: {
                    listenEnabled: false,
                    listenAuthenticationEnabled: false,
                    controlEnabled: false,
                    controlAuthenticationEnabled: false,
                },
                credentialIds: ["credentialIds"],
                server: {
                    timeoutSeconds: 20,
                    url: "url",
                    headers: { key: "value" },
                    backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                },
                keypadInputPlan: { enabled: true, timeoutSeconds: 1.1, delimiters: "#" },
            },
            name: "name",
            sessionId: "sessionId",
            input: "input",
            stream: true,
            previousChatId: "previousChatId",
            id: "id",
            orgId: "orgId",
            messages: [{ role: "role", message: "message", time: 1.1, secondsFromStart: 1.1 }],
            output: [{ role: "role", message: "message", time: 1.1, secondsFromStart: 1.1 }],
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            costs: [{ type: "model", model: { key: "value" }, promptTokens: 1.1, completionTokens: 1.1, cost: 1.1 }],
            cost: 1.1,
        };
        server.mockEndpoint().get("/chat/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.chats.get("id");
        expect(response).toEqual({
            assistantId: "assistantId",
            assistant: {
                transcriber: {
                    provider: "assembly-ai",
                    language: "en",
                    confidenceThreshold: 0.4,
                    enableUniversalStreamingApi: false,
                    formatTurns: false,
                    endOfTurnConfidenceThreshold: 0.7,
                    minEndOfTurnSilenceWhenConfident: 160,
                    wordFinalizationMaxWaitTime: 160,
                    maxTurnSilence: 400,
                    realtimeUrl: "realtimeUrl",
                    wordBoost: ["wordBoost"],
                    endUtteranceSilenceThreshold: 1.1,
                    disablePartialTranscripts: true,
                    fallbackPlan: {
                        transcribers: [
                            {
                                provider: "assembly-ai",
                                confidenceThreshold: 0.4,
                                enableUniversalStreamingApi: false,
                                formatTurns: false,
                                endOfTurnConfidenceThreshold: 0.7,
                                minEndOfTurnSilenceWhenConfident: 160,
                                wordFinalizationMaxWaitTime: 160,
                                maxTurnSilence: 400,
                            },
                        ],
                    },
                },
                model: {
                    messages: [
                        {
                            role: "assistant",
                        },
                    ],
                    tools: [
                        {
                            type: "apiRequest",
                            method: "POST",
                            timeoutSeconds: 20,
                            url: "url",
                            backoffPlan: {
                                type: {
                                    key: "value",
                                },
                                maxRetries: 0,
                                baseDelaySeconds: 1,
                            },
                        },
                    ],
                    toolIds: ["toolIds"],
                    knowledgeBase: {
                        provider: "custom-knowledge-base",
                        server: {
                            timeoutSeconds: 20,
                            backoffPlan: {
                                type: {
                                    key: "value",
                                },
                                maxRetries: 0,
                                baseDelaySeconds: 1,
                            },
                        },
                    },
                    knowledgeBaseId: "knowledgeBaseId",
                    model: "claude-3-opus-20240229",
                    provider: "anthropic",
                    thinking: {
                        type: "enabled",
                        budgetTokens: 1.1,
                    },
                    temperature: 1.1,
                    maxTokens: 1.1,
                    emotionRecognitionEnabled: true,
                    numFastTurns: 1.1,
                },
                voice: {
                    cachingEnabled: true,
                    provider: "azure",
                    voiceId: "andrew",
                    chunkPlan: {
                        enabled: true,
                        minCharacters: 30,
                    },
                    speed: 1.1,
                    fallbackPlan: {
                        voices: [
                            {
                                cachingEnabled: true,
                                provider: "azure",
                                voiceId: "andrew",
                            },
                        ],
                    },
                },
                firstMessage: "Hello! How can I help you today?",
                firstMessageInterruptionsEnabled: true,
                firstMessageMode: "assistant-speaks-first",
                voicemailDetection: {
                    beepMaxAwaitSeconds: 1.1,
                    provider: "google",
                },
                clientMessages: [
                    "conversation-update",
                    "function-call",
                    "hang",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transfer-update",
                    "transcript",
                    "tool-calls",
                    "user-interrupted",
                    "voice-input",
                    "workflow.node.started",
                ],
                serverMessages: [
                    "conversation-update",
                    "end-of-call-report",
                    "function-call",
                    "hang",
                    "speech-update",
                    "status-update",
                    "tool-calls",
                    "transfer-destination-request",
                    "user-interrupted",
                ],
                silenceTimeoutSeconds: 30,
                maxDurationSeconds: 600,
                backgroundSound: "off",
                modelOutputInMessagesEnabled: false,
                transportConfigurations: [
                    {
                        provider: "twilio",
                        timeout: 60,
                        record: false,
                    },
                ],
                observabilityPlan: {
                    provider: "langfuse",
                    tags: ["tags"],
                    metadata: {
                        key: "value",
                    },
                },
                credentials: [
                    {
                        provider: "11labs",
                        apiKey: "apiKey",
                    },
                ],
                hooks: [
                    {
                        on: "call.ending",
                        do: [
                            {
                                type: "transfer",
                            },
                        ],
                    },
                ],
                name: "name",
                voicemailMessage: "voicemailMessage",
                endCallMessage: "endCallMessage",
                endCallPhrases: ["endCallPhrases"],
                compliancePlan: {
                    hipaaEnabled: true,
                    pciEnabled: true,
                },
                metadata: {
                    key: "value",
                },
                backgroundSpeechDenoisingPlan: {
                    fourierDenoisingPlan: {
                        mediaDetectionEnabled: true,
                        staticThreshold: -35,
                        baselineOffsetDb: -15,
                        windowSizeMs: 3000,
                        baselinePercentile: 85,
                    },
                },
                analysisPlan: {
                    minMessagesThreshold: 1.1,
                    structuredDataMultiPlan: [
                        {
                            key: "key",
                            plan: {},
                        },
                    ],
                },
                artifactPlan: {
                    recordingEnabled: true,
                    recordingFormat: "wav;l16",
                    videoRecordingEnabled: false,
                    pcapEnabled: true,
                    pcapS3PathPrefix: "/pcaps",
                    transcriptPlan: {
                        enabled: true,
                    },
                    recordingPath: "recordingPath",
                },
                messagePlan: {
                    idleMessages: ["idleMessages"],
                    idleMessageMaxSpokenCount: 1.1,
                    idleMessageResetCountOnUserSpeechEnabled: true,
                    idleTimeoutSeconds: 1.1,
                    silenceTimeoutMessage: "silenceTimeoutMessage",
                },
                startSpeakingPlan: {
                    waitSeconds: 0.4,
                    smartEndpointingPlan: {
                        provider: "vapi",
                    },
                    customEndpointingRules: [
                        {
                            type: "assistant",
                            regex: "regex",
                            timeoutSeconds: 1.1,
                        },
                    ],
                    transcriptionEndpointingPlan: {
                        onPunctuationSeconds: 0.1,
                        onNoPunctuationSeconds: 1.5,
                        onNumberSeconds: 0.5,
                    },
                },
                stopSpeakingPlan: {
                    numWords: 0,
                    voiceSeconds: 0.2,
                    backoffSeconds: 1,
                    acknowledgementPhrases: [
                        "i understand",
                        "i see",
                        "i got it",
                        "i hear you",
                        "im listening",
                        "im with you",
                        "right",
                        "okay",
                        "ok",
                        "sure",
                        "alright",
                        "got it",
                        "understood",
                        "yeah",
                        "yes",
                        "uh-huh",
                        "mm-hmm",
                        "gotcha",
                        "mhmm",
                        "ah",
                        "yeah okay",
                        "yeah sure",
                    ],
                    interruptionPhrases: [
                        "stop",
                        "shut",
                        "up",
                        "enough",
                        "quiet",
                        "silence",
                        "but",
                        "dont",
                        "not",
                        "no",
                        "hold",
                        "wait",
                        "cut",
                        "pause",
                        "nope",
                        "nah",
                        "nevermind",
                        "never",
                        "bad",
                        "actually",
                    ],
                },
                monitorPlan: {
                    listenEnabled: false,
                    listenAuthenticationEnabled: false,
                    controlEnabled: false,
                    controlAuthenticationEnabled: false,
                },
                credentialIds: ["credentialIds"],
                server: {
                    timeoutSeconds: 20,
                    url: "url",
                    headers: {
                        key: "value",
                    },
                    backoffPlan: {
                        type: {
                            key: "value",
                        },
                        maxRetries: 0,
                        baseDelaySeconds: 1,
                    },
                },
                keypadInputPlan: {
                    enabled: true,
                    timeoutSeconds: 1.1,
                    delimiters: "#",
                },
            },
            assistantOverrides: {
                transcriber: {
                    provider: "assembly-ai",
                    language: "en",
                    confidenceThreshold: 0.4,
                    enableUniversalStreamingApi: false,
                    formatTurns: false,
                    endOfTurnConfidenceThreshold: 0.7,
                    minEndOfTurnSilenceWhenConfident: 160,
                    wordFinalizationMaxWaitTime: 160,
                    maxTurnSilence: 400,
                    realtimeUrl: "realtimeUrl",
                    wordBoost: ["wordBoost"],
                    endUtteranceSilenceThreshold: 1.1,
                    disablePartialTranscripts: true,
                    fallbackPlan: {
                        transcribers: [
                            {
                                provider: "assembly-ai",
                                confidenceThreshold: 0.4,
                                enableUniversalStreamingApi: false,
                                formatTurns: false,
                                endOfTurnConfidenceThreshold: 0.7,
                                minEndOfTurnSilenceWhenConfident: 160,
                                wordFinalizationMaxWaitTime: 160,
                                maxTurnSilence: 400,
                            },
                        ],
                    },
                },
                model: {
                    messages: [
                        {
                            role: "assistant",
                        },
                    ],
                    tools: [
                        {
                            type: "apiRequest",
                            method: "POST",
                            timeoutSeconds: 20,
                            url: "url",
                            backoffPlan: {
                                type: {
                                    key: "value",
                                },
                                maxRetries: 0,
                                baseDelaySeconds: 1,
                            },
                        },
                    ],
                    toolIds: ["toolIds"],
                    knowledgeBase: {
                        provider: "custom-knowledge-base",
                        server: {
                            timeoutSeconds: 20,
                            backoffPlan: {
                                type: {
                                    key: "value",
                                },
                                maxRetries: 0,
                                baseDelaySeconds: 1,
                            },
                        },
                    },
                    knowledgeBaseId: "knowledgeBaseId",
                    model: "claude-3-opus-20240229",
                    provider: "anthropic",
                    thinking: {
                        type: "enabled",
                        budgetTokens: 1.1,
                    },
                    temperature: 1.1,
                    maxTokens: 1.1,
                    emotionRecognitionEnabled: true,
                    numFastTurns: 1.1,
                },
                voice: {
                    cachingEnabled: true,
                    provider: "azure",
                    voiceId: "andrew",
                    chunkPlan: {
                        enabled: true,
                        minCharacters: 30,
                    },
                    speed: 1.1,
                    fallbackPlan: {
                        voices: [
                            {
                                cachingEnabled: true,
                                provider: "azure",
                                voiceId: "andrew",
                            },
                        ],
                    },
                },
                firstMessage: "Hello! How can I help you today?",
                firstMessageInterruptionsEnabled: true,
                firstMessageMode: "assistant-speaks-first",
                voicemailDetection: {
                    beepMaxAwaitSeconds: 1.1,
                    provider: "google",
                },
                clientMessages: [
                    "conversation-update",
                    "function-call",
                    "hang",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transfer-update",
                    "transcript",
                    "tool-calls",
                    "user-interrupted",
                    "voice-input",
                    "workflow.node.started",
                ],
                serverMessages: [
                    "conversation-update",
                    "end-of-call-report",
                    "function-call",
                    "hang",
                    "speech-update",
                    "status-update",
                    "tool-calls",
                    "transfer-destination-request",
                    "user-interrupted",
                ],
                silenceTimeoutSeconds: 30,
                maxDurationSeconds: 600,
                backgroundSound: "off",
                modelOutputInMessagesEnabled: false,
                transportConfigurations: [
                    {
                        provider: "twilio",
                        timeout: 60,
                        record: false,
                    },
                ],
                observabilityPlan: {
                    provider: "langfuse",
                    tags: ["tags"],
                    metadata: {
                        key: "value",
                    },
                },
                credentials: [
                    {
                        provider: "11labs",
                        apiKey: "apiKey",
                    },
                ],
                hooks: [
                    {
                        on: "call.ending",
                        do: [
                            {
                                type: "transfer",
                            },
                        ],
                    },
                ],
                variableValues: {
                    key: "value",
                },
                name: "name",
                voicemailMessage: "voicemailMessage",
                endCallMessage: "endCallMessage",
                endCallPhrases: ["endCallPhrases"],
                compliancePlan: {
                    hipaaEnabled: true,
                    pciEnabled: true,
                },
                metadata: {
                    key: "value",
                },
                backgroundSpeechDenoisingPlan: {
                    fourierDenoisingPlan: {
                        mediaDetectionEnabled: true,
                        staticThreshold: -35,
                        baselineOffsetDb: -15,
                        windowSizeMs: 3000,
                        baselinePercentile: 85,
                    },
                },
                analysisPlan: {
                    minMessagesThreshold: 1.1,
                    structuredDataMultiPlan: [
                        {
                            key: "key",
                            plan: {},
                        },
                    ],
                },
                artifactPlan: {
                    recordingEnabled: true,
                    recordingFormat: "wav;l16",
                    videoRecordingEnabled: false,
                    pcapEnabled: true,
                    pcapS3PathPrefix: "/pcaps",
                    transcriptPlan: {
                        enabled: true,
                    },
                    recordingPath: "recordingPath",
                },
                messagePlan: {
                    idleMessages: ["idleMessages"],
                    idleMessageMaxSpokenCount: 1.1,
                    idleMessageResetCountOnUserSpeechEnabled: true,
                    idleTimeoutSeconds: 1.1,
                    silenceTimeoutMessage: "silenceTimeoutMessage",
                },
                startSpeakingPlan: {
                    waitSeconds: 0.4,
                    smartEndpointingPlan: {
                        provider: "vapi",
                    },
                    customEndpointingRules: [
                        {
                            type: "assistant",
                            regex: "regex",
                            timeoutSeconds: 1.1,
                        },
                    ],
                    transcriptionEndpointingPlan: {
                        onPunctuationSeconds: 0.1,
                        onNoPunctuationSeconds: 1.5,
                        onNumberSeconds: 0.5,
                    },
                },
                stopSpeakingPlan: {
                    numWords: 0,
                    voiceSeconds: 0.2,
                    backoffSeconds: 1,
                    acknowledgementPhrases: [
                        "i understand",
                        "i see",
                        "i got it",
                        "i hear you",
                        "im listening",
                        "im with you",
                        "right",
                        "okay",
                        "ok",
                        "sure",
                        "alright",
                        "got it",
                        "understood",
                        "yeah",
                        "yes",
                        "uh-huh",
                        "mm-hmm",
                        "gotcha",
                        "mhmm",
                        "ah",
                        "yeah okay",
                        "yeah sure",
                    ],
                    interruptionPhrases: [
                        "stop",
                        "shut",
                        "up",
                        "enough",
                        "quiet",
                        "silence",
                        "but",
                        "dont",
                        "not",
                        "no",
                        "hold",
                        "wait",
                        "cut",
                        "pause",
                        "nope",
                        "nah",
                        "nevermind",
                        "never",
                        "bad",
                        "actually",
                    ],
                },
                monitorPlan: {
                    listenEnabled: false,
                    listenAuthenticationEnabled: false,
                    controlEnabled: false,
                    controlAuthenticationEnabled: false,
                },
                credentialIds: ["credentialIds"],
                server: {
                    timeoutSeconds: 20,
                    url: "url",
                    headers: {
                        key: "value",
                    },
                    backoffPlan: {
                        type: {
                            key: "value",
                        },
                        maxRetries: 0,
                        baseDelaySeconds: 1,
                    },
                },
                keypadInputPlan: {
                    enabled: true,
                    timeoutSeconds: 1.1,
                    delimiters: "#",
                },
            },
            name: "name",
            sessionId: "sessionId",
            input: "input",
            stream: true,
            previousChatId: "previousChatId",
            id: "id",
            orgId: "orgId",
            messages: [
                {
                    role: "role",
                    message: "message",
                    time: 1.1,
                    secondsFromStart: 1.1,
                },
            ],
            output: [
                {
                    role: "role",
                    message: "message",
                    time: 1.1,
                    secondsFromStart: 1.1,
                },
            ],
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            costs: [
                {
                    type: "model",
                    model: {
                        key: "value",
                    },
                    promptTokens: 1.1,
                    completionTokens: 1.1,
                    cost: 1.1,
                },
            ],
            cost: 1.1,
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            assistantId: "assistantId",
            assistant: {
                transcriber: {
                    provider: "assembly-ai",
                    language: "en",
                    confidenceThreshold: 0.4,
                    enableUniversalStreamingApi: false,
                    formatTurns: false,
                    endOfTurnConfidenceThreshold: 0.7,
                    minEndOfTurnSilenceWhenConfident: 160,
                    wordFinalizationMaxWaitTime: 160,
                    maxTurnSilence: 400,
                    realtimeUrl: "realtimeUrl",
                    wordBoost: ["wordBoost"],
                    endUtteranceSilenceThreshold: 1.1,
                    disablePartialTranscripts: true,
                    fallbackPlan: {
                        transcribers: [
                            {
                                provider: "assembly-ai",
                                confidenceThreshold: 0.4,
                                enableUniversalStreamingApi: false,
                                formatTurns: false,
                                endOfTurnConfidenceThreshold: 0.7,
                                minEndOfTurnSilenceWhenConfident: 160,
                                wordFinalizationMaxWaitTime: 160,
                                maxTurnSilence: 400,
                            },
                        ],
                    },
                },
                model: {
                    messages: [{ role: "assistant" }],
                    tools: [
                        {
                            type: "apiRequest",
                            method: "POST",
                            timeoutSeconds: 20,
                            url: "url",
                            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                        },
                    ],
                    toolIds: ["toolIds"],
                    knowledgeBase: {
                        provider: "custom-knowledge-base",
                        server: {
                            timeoutSeconds: 20,
                            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                        },
                    },
                    knowledgeBaseId: "knowledgeBaseId",
                    model: "claude-3-opus-20240229",
                    provider: "anthropic",
                    thinking: { type: "enabled", budgetTokens: 1.1 },
                    temperature: 1.1,
                    maxTokens: 1.1,
                    emotionRecognitionEnabled: true,
                    numFastTurns: 1.1,
                },
                voice: {
                    cachingEnabled: true,
                    provider: "azure",
                    voiceId: "andrew",
                    chunkPlan: { enabled: true, minCharacters: 30 },
                    speed: 1.1,
                    fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
                },
                firstMessage: "Hello! How can I help you today?",
                firstMessageInterruptionsEnabled: true,
                firstMessageMode: "assistant-speaks-first",
                voicemailDetection: { beepMaxAwaitSeconds: 1.1, provider: "google" },
                clientMessages: [
                    "conversation-update",
                    "function-call",
                    "hang",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transfer-update",
                    "transcript",
                    "tool-calls",
                    "user-interrupted",
                    "voice-input",
                    "workflow.node.started",
                ],
                serverMessages: [
                    "conversation-update",
                    "end-of-call-report",
                    "function-call",
                    "hang",
                    "speech-update",
                    "status-update",
                    "tool-calls",
                    "transfer-destination-request",
                    "user-interrupted",
                ],
                silenceTimeoutSeconds: 30,
                maxDurationSeconds: 600,
                backgroundSound: "off",
                modelOutputInMessagesEnabled: false,
                transportConfigurations: [{ provider: "twilio", timeout: 60, record: false }],
                observabilityPlan: { provider: "langfuse", tags: ["tags"], metadata: { key: "value" } },
                credentials: [{ provider: "11labs", apiKey: "apiKey" }],
                hooks: [{ on: "call.ending", do: [{ type: "transfer" }] }],
                name: "name",
                voicemailMessage: "voicemailMessage",
                endCallMessage: "endCallMessage",
                endCallPhrases: ["endCallPhrases"],
                compliancePlan: { hipaaEnabled: true, pciEnabled: true },
                metadata: { key: "value" },
                backgroundSpeechDenoisingPlan: {
                    fourierDenoisingPlan: {
                        mediaDetectionEnabled: true,
                        staticThreshold: -35,
                        baselineOffsetDb: -15,
                        windowSizeMs: 3000,
                        baselinePercentile: 85,
                    },
                },
                analysisPlan: { minMessagesThreshold: 1.1, structuredDataMultiPlan: [{ key: "key", plan: {} }] },
                artifactPlan: {
                    recordingEnabled: true,
                    recordingFormat: "wav;l16",
                    videoRecordingEnabled: false,
                    pcapEnabled: true,
                    pcapS3PathPrefix: "/pcaps",
                    transcriptPlan: { enabled: true },
                    recordingPath: "recordingPath",
                },
                messagePlan: {
                    idleMessages: ["idleMessages"],
                    idleMessageMaxSpokenCount: 1.1,
                    idleMessageResetCountOnUserSpeechEnabled: true,
                    idleTimeoutSeconds: 1.1,
                    silenceTimeoutMessage: "silenceTimeoutMessage",
                },
                startSpeakingPlan: {
                    waitSeconds: 0.4,
                    smartEndpointingPlan: { provider: "vapi" },
                    customEndpointingRules: [{ type: "assistant", regex: "regex", timeoutSeconds: 1.1 }],
                    transcriptionEndpointingPlan: {
                        onPunctuationSeconds: 0.1,
                        onNoPunctuationSeconds: 1.5,
                        onNumberSeconds: 0.5,
                    },
                },
                stopSpeakingPlan: {
                    numWords: 0,
                    voiceSeconds: 0.2,
                    backoffSeconds: 1,
                    acknowledgementPhrases: [
                        "i understand",
                        "i see",
                        "i got it",
                        "i hear you",
                        "im listening",
                        "im with you",
                        "right",
                        "okay",
                        "ok",
                        "sure",
                        "alright",
                        "got it",
                        "understood",
                        "yeah",
                        "yes",
                        "uh-huh",
                        "mm-hmm",
                        "gotcha",
                        "mhmm",
                        "ah",
                        "yeah okay",
                        "yeah sure",
                    ],
                    interruptionPhrases: [
                        "stop",
                        "shut",
                        "up",
                        "enough",
                        "quiet",
                        "silence",
                        "but",
                        "dont",
                        "not",
                        "no",
                        "hold",
                        "wait",
                        "cut",
                        "pause",
                        "nope",
                        "nah",
                        "nevermind",
                        "never",
                        "bad",
                        "actually",
                    ],
                },
                monitorPlan: {
                    listenEnabled: false,
                    listenAuthenticationEnabled: false,
                    controlEnabled: false,
                    controlAuthenticationEnabled: false,
                },
                credentialIds: ["credentialIds"],
                server: {
                    timeoutSeconds: 20,
                    url: "url",
                    headers: { key: "value" },
                    backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                },
                keypadInputPlan: { enabled: true, timeoutSeconds: 1.1, delimiters: "#" },
            },
            assistantOverrides: {
                transcriber: {
                    provider: "assembly-ai",
                    language: "en",
                    confidenceThreshold: 0.4,
                    enableUniversalStreamingApi: false,
                    formatTurns: false,
                    endOfTurnConfidenceThreshold: 0.7,
                    minEndOfTurnSilenceWhenConfident: 160,
                    wordFinalizationMaxWaitTime: 160,
                    maxTurnSilence: 400,
                    realtimeUrl: "realtimeUrl",
                    wordBoost: ["wordBoost"],
                    endUtteranceSilenceThreshold: 1.1,
                    disablePartialTranscripts: true,
                    fallbackPlan: {
                        transcribers: [
                            {
                                provider: "assembly-ai",
                                confidenceThreshold: 0.4,
                                enableUniversalStreamingApi: false,
                                formatTurns: false,
                                endOfTurnConfidenceThreshold: 0.7,
                                minEndOfTurnSilenceWhenConfident: 160,
                                wordFinalizationMaxWaitTime: 160,
                                maxTurnSilence: 400,
                            },
                        ],
                    },
                },
                model: {
                    messages: [{ role: "assistant" }],
                    tools: [
                        {
                            type: "apiRequest",
                            method: "POST",
                            timeoutSeconds: 20,
                            url: "url",
                            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                        },
                    ],
                    toolIds: ["toolIds"],
                    knowledgeBase: {
                        provider: "custom-knowledge-base",
                        server: {
                            timeoutSeconds: 20,
                            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                        },
                    },
                    knowledgeBaseId: "knowledgeBaseId",
                    model: "claude-3-opus-20240229",
                    provider: "anthropic",
                    thinking: { type: "enabled", budgetTokens: 1.1 },
                    temperature: 1.1,
                    maxTokens: 1.1,
                    emotionRecognitionEnabled: true,
                    numFastTurns: 1.1,
                },
                voice: {
                    cachingEnabled: true,
                    provider: "azure",
                    voiceId: "andrew",
                    chunkPlan: { enabled: true, minCharacters: 30 },
                    speed: 1.1,
                    fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
                },
                firstMessage: "Hello! How can I help you today?",
                firstMessageInterruptionsEnabled: true,
                firstMessageMode: "assistant-speaks-first",
                voicemailDetection: { beepMaxAwaitSeconds: 1.1, provider: "google" },
                clientMessages: [
                    "conversation-update",
                    "function-call",
                    "hang",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transfer-update",
                    "transcript",
                    "tool-calls",
                    "user-interrupted",
                    "voice-input",
                    "workflow.node.started",
                ],
                serverMessages: [
                    "conversation-update",
                    "end-of-call-report",
                    "function-call",
                    "hang",
                    "speech-update",
                    "status-update",
                    "tool-calls",
                    "transfer-destination-request",
                    "user-interrupted",
                ],
                silenceTimeoutSeconds: 30,
                maxDurationSeconds: 600,
                backgroundSound: "off",
                modelOutputInMessagesEnabled: false,
                transportConfigurations: [{ provider: "twilio", timeout: 60, record: false }],
                observabilityPlan: { provider: "langfuse", tags: ["tags"], metadata: { key: "value" } },
                credentials: [{ provider: "11labs", apiKey: "apiKey" }],
                hooks: [{ on: "call.ending", do: [{ type: "transfer" }] }],
                variableValues: { key: "value" },
                name: "name",
                voicemailMessage: "voicemailMessage",
                endCallMessage: "endCallMessage",
                endCallPhrases: ["endCallPhrases"],
                compliancePlan: { hipaaEnabled: true, pciEnabled: true },
                metadata: { key: "value" },
                backgroundSpeechDenoisingPlan: {
                    fourierDenoisingPlan: {
                        mediaDetectionEnabled: true,
                        staticThreshold: -35,
                        baselineOffsetDb: -15,
                        windowSizeMs: 3000,
                        baselinePercentile: 85,
                    },
                },
                analysisPlan: { minMessagesThreshold: 1.1, structuredDataMultiPlan: [{ key: "key", plan: {} }] },
                artifactPlan: {
                    recordingEnabled: true,
                    recordingFormat: "wav;l16",
                    videoRecordingEnabled: false,
                    pcapEnabled: true,
                    pcapS3PathPrefix: "/pcaps",
                    transcriptPlan: { enabled: true },
                    recordingPath: "recordingPath",
                },
                messagePlan: {
                    idleMessages: ["idleMessages"],
                    idleMessageMaxSpokenCount: 1.1,
                    idleMessageResetCountOnUserSpeechEnabled: true,
                    idleTimeoutSeconds: 1.1,
                    silenceTimeoutMessage: "silenceTimeoutMessage",
                },
                startSpeakingPlan: {
                    waitSeconds: 0.4,
                    smartEndpointingPlan: { provider: "vapi" },
                    customEndpointingRules: [{ type: "assistant", regex: "regex", timeoutSeconds: 1.1 }],
                    transcriptionEndpointingPlan: {
                        onPunctuationSeconds: 0.1,
                        onNoPunctuationSeconds: 1.5,
                        onNumberSeconds: 0.5,
                    },
                },
                stopSpeakingPlan: {
                    numWords: 0,
                    voiceSeconds: 0.2,
                    backoffSeconds: 1,
                    acknowledgementPhrases: [
                        "i understand",
                        "i see",
                        "i got it",
                        "i hear you",
                        "im listening",
                        "im with you",
                        "right",
                        "okay",
                        "ok",
                        "sure",
                        "alright",
                        "got it",
                        "understood",
                        "yeah",
                        "yes",
                        "uh-huh",
                        "mm-hmm",
                        "gotcha",
                        "mhmm",
                        "ah",
                        "yeah okay",
                        "yeah sure",
                    ],
                    interruptionPhrases: [
                        "stop",
                        "shut",
                        "up",
                        "enough",
                        "quiet",
                        "silence",
                        "but",
                        "dont",
                        "not",
                        "no",
                        "hold",
                        "wait",
                        "cut",
                        "pause",
                        "nope",
                        "nah",
                        "nevermind",
                        "never",
                        "bad",
                        "actually",
                    ],
                },
                monitorPlan: {
                    listenEnabled: false,
                    listenAuthenticationEnabled: false,
                    controlEnabled: false,
                    controlAuthenticationEnabled: false,
                },
                credentialIds: ["credentialIds"],
                server: {
                    timeoutSeconds: 20,
                    url: "url",
                    headers: { key: "value" },
                    backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                },
                keypadInputPlan: { enabled: true, timeoutSeconds: 1.1, delimiters: "#" },
            },
            name: "name",
            sessionId: "sessionId",
            input: "input",
            stream: true,
            previousChatId: "previousChatId",
            id: "id",
            orgId: "orgId",
            messages: [{ role: "role", message: "message", time: 1.1, secondsFromStart: 1.1 }],
            output: [{ role: "role", message: "message", time: 1.1, secondsFromStart: 1.1 }],
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            costs: [{ type: "model", model: { key: "value" }, promptTokens: 1.1, completionTokens: 1.1, cost: 1.1 }],
            cost: 1.1,
        };
        server.mockEndpoint().delete("/chat/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.chats.delete("id");
        expect(response).toEqual({
            assistantId: "assistantId",
            assistant: {
                transcriber: {
                    provider: "assembly-ai",
                    language: "en",
                    confidenceThreshold: 0.4,
                    enableUniversalStreamingApi: false,
                    formatTurns: false,
                    endOfTurnConfidenceThreshold: 0.7,
                    minEndOfTurnSilenceWhenConfident: 160,
                    wordFinalizationMaxWaitTime: 160,
                    maxTurnSilence: 400,
                    realtimeUrl: "realtimeUrl",
                    wordBoost: ["wordBoost"],
                    endUtteranceSilenceThreshold: 1.1,
                    disablePartialTranscripts: true,
                    fallbackPlan: {
                        transcribers: [
                            {
                                provider: "assembly-ai",
                                confidenceThreshold: 0.4,
                                enableUniversalStreamingApi: false,
                                formatTurns: false,
                                endOfTurnConfidenceThreshold: 0.7,
                                minEndOfTurnSilenceWhenConfident: 160,
                                wordFinalizationMaxWaitTime: 160,
                                maxTurnSilence: 400,
                            },
                        ],
                    },
                },
                model: {
                    messages: [
                        {
                            role: "assistant",
                        },
                    ],
                    tools: [
                        {
                            type: "apiRequest",
                            method: "POST",
                            timeoutSeconds: 20,
                            url: "url",
                            backoffPlan: {
                                type: {
                                    key: "value",
                                },
                                maxRetries: 0,
                                baseDelaySeconds: 1,
                            },
                        },
                    ],
                    toolIds: ["toolIds"],
                    knowledgeBase: {
                        provider: "custom-knowledge-base",
                        server: {
                            timeoutSeconds: 20,
                            backoffPlan: {
                                type: {
                                    key: "value",
                                },
                                maxRetries: 0,
                                baseDelaySeconds: 1,
                            },
                        },
                    },
                    knowledgeBaseId: "knowledgeBaseId",
                    model: "claude-3-opus-20240229",
                    provider: "anthropic",
                    thinking: {
                        type: "enabled",
                        budgetTokens: 1.1,
                    },
                    temperature: 1.1,
                    maxTokens: 1.1,
                    emotionRecognitionEnabled: true,
                    numFastTurns: 1.1,
                },
                voice: {
                    cachingEnabled: true,
                    provider: "azure",
                    voiceId: "andrew",
                    chunkPlan: {
                        enabled: true,
                        minCharacters: 30,
                    },
                    speed: 1.1,
                    fallbackPlan: {
                        voices: [
                            {
                                cachingEnabled: true,
                                provider: "azure",
                                voiceId: "andrew",
                            },
                        ],
                    },
                },
                firstMessage: "Hello! How can I help you today?",
                firstMessageInterruptionsEnabled: true,
                firstMessageMode: "assistant-speaks-first",
                voicemailDetection: {
                    beepMaxAwaitSeconds: 1.1,
                    provider: "google",
                },
                clientMessages: [
                    "conversation-update",
                    "function-call",
                    "hang",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transfer-update",
                    "transcript",
                    "tool-calls",
                    "user-interrupted",
                    "voice-input",
                    "workflow.node.started",
                ],
                serverMessages: [
                    "conversation-update",
                    "end-of-call-report",
                    "function-call",
                    "hang",
                    "speech-update",
                    "status-update",
                    "tool-calls",
                    "transfer-destination-request",
                    "user-interrupted",
                ],
                silenceTimeoutSeconds: 30,
                maxDurationSeconds: 600,
                backgroundSound: "off",
                modelOutputInMessagesEnabled: false,
                transportConfigurations: [
                    {
                        provider: "twilio",
                        timeout: 60,
                        record: false,
                    },
                ],
                observabilityPlan: {
                    provider: "langfuse",
                    tags: ["tags"],
                    metadata: {
                        key: "value",
                    },
                },
                credentials: [
                    {
                        provider: "11labs",
                        apiKey: "apiKey",
                    },
                ],
                hooks: [
                    {
                        on: "call.ending",
                        do: [
                            {
                                type: "transfer",
                            },
                        ],
                    },
                ],
                name: "name",
                voicemailMessage: "voicemailMessage",
                endCallMessage: "endCallMessage",
                endCallPhrases: ["endCallPhrases"],
                compliancePlan: {
                    hipaaEnabled: true,
                    pciEnabled: true,
                },
                metadata: {
                    key: "value",
                },
                backgroundSpeechDenoisingPlan: {
                    fourierDenoisingPlan: {
                        mediaDetectionEnabled: true,
                        staticThreshold: -35,
                        baselineOffsetDb: -15,
                        windowSizeMs: 3000,
                        baselinePercentile: 85,
                    },
                },
                analysisPlan: {
                    minMessagesThreshold: 1.1,
                    structuredDataMultiPlan: [
                        {
                            key: "key",
                            plan: {},
                        },
                    ],
                },
                artifactPlan: {
                    recordingEnabled: true,
                    recordingFormat: "wav;l16",
                    videoRecordingEnabled: false,
                    pcapEnabled: true,
                    pcapS3PathPrefix: "/pcaps",
                    transcriptPlan: {
                        enabled: true,
                    },
                    recordingPath: "recordingPath",
                },
                messagePlan: {
                    idleMessages: ["idleMessages"],
                    idleMessageMaxSpokenCount: 1.1,
                    idleMessageResetCountOnUserSpeechEnabled: true,
                    idleTimeoutSeconds: 1.1,
                    silenceTimeoutMessage: "silenceTimeoutMessage",
                },
                startSpeakingPlan: {
                    waitSeconds: 0.4,
                    smartEndpointingPlan: {
                        provider: "vapi",
                    },
                    customEndpointingRules: [
                        {
                            type: "assistant",
                            regex: "regex",
                            timeoutSeconds: 1.1,
                        },
                    ],
                    transcriptionEndpointingPlan: {
                        onPunctuationSeconds: 0.1,
                        onNoPunctuationSeconds: 1.5,
                        onNumberSeconds: 0.5,
                    },
                },
                stopSpeakingPlan: {
                    numWords: 0,
                    voiceSeconds: 0.2,
                    backoffSeconds: 1,
                    acknowledgementPhrases: [
                        "i understand",
                        "i see",
                        "i got it",
                        "i hear you",
                        "im listening",
                        "im with you",
                        "right",
                        "okay",
                        "ok",
                        "sure",
                        "alright",
                        "got it",
                        "understood",
                        "yeah",
                        "yes",
                        "uh-huh",
                        "mm-hmm",
                        "gotcha",
                        "mhmm",
                        "ah",
                        "yeah okay",
                        "yeah sure",
                    ],
                    interruptionPhrases: [
                        "stop",
                        "shut",
                        "up",
                        "enough",
                        "quiet",
                        "silence",
                        "but",
                        "dont",
                        "not",
                        "no",
                        "hold",
                        "wait",
                        "cut",
                        "pause",
                        "nope",
                        "nah",
                        "nevermind",
                        "never",
                        "bad",
                        "actually",
                    ],
                },
                monitorPlan: {
                    listenEnabled: false,
                    listenAuthenticationEnabled: false,
                    controlEnabled: false,
                    controlAuthenticationEnabled: false,
                },
                credentialIds: ["credentialIds"],
                server: {
                    timeoutSeconds: 20,
                    url: "url",
                    headers: {
                        key: "value",
                    },
                    backoffPlan: {
                        type: {
                            key: "value",
                        },
                        maxRetries: 0,
                        baseDelaySeconds: 1,
                    },
                },
                keypadInputPlan: {
                    enabled: true,
                    timeoutSeconds: 1.1,
                    delimiters: "#",
                },
            },
            assistantOverrides: {
                transcriber: {
                    provider: "assembly-ai",
                    language: "en",
                    confidenceThreshold: 0.4,
                    enableUniversalStreamingApi: false,
                    formatTurns: false,
                    endOfTurnConfidenceThreshold: 0.7,
                    minEndOfTurnSilenceWhenConfident: 160,
                    wordFinalizationMaxWaitTime: 160,
                    maxTurnSilence: 400,
                    realtimeUrl: "realtimeUrl",
                    wordBoost: ["wordBoost"],
                    endUtteranceSilenceThreshold: 1.1,
                    disablePartialTranscripts: true,
                    fallbackPlan: {
                        transcribers: [
                            {
                                provider: "assembly-ai",
                                confidenceThreshold: 0.4,
                                enableUniversalStreamingApi: false,
                                formatTurns: false,
                                endOfTurnConfidenceThreshold: 0.7,
                                minEndOfTurnSilenceWhenConfident: 160,
                                wordFinalizationMaxWaitTime: 160,
                                maxTurnSilence: 400,
                            },
                        ],
                    },
                },
                model: {
                    messages: [
                        {
                            role: "assistant",
                        },
                    ],
                    tools: [
                        {
                            type: "apiRequest",
                            method: "POST",
                            timeoutSeconds: 20,
                            url: "url",
                            backoffPlan: {
                                type: {
                                    key: "value",
                                },
                                maxRetries: 0,
                                baseDelaySeconds: 1,
                            },
                        },
                    ],
                    toolIds: ["toolIds"],
                    knowledgeBase: {
                        provider: "custom-knowledge-base",
                        server: {
                            timeoutSeconds: 20,
                            backoffPlan: {
                                type: {
                                    key: "value",
                                },
                                maxRetries: 0,
                                baseDelaySeconds: 1,
                            },
                        },
                    },
                    knowledgeBaseId: "knowledgeBaseId",
                    model: "claude-3-opus-20240229",
                    provider: "anthropic",
                    thinking: {
                        type: "enabled",
                        budgetTokens: 1.1,
                    },
                    temperature: 1.1,
                    maxTokens: 1.1,
                    emotionRecognitionEnabled: true,
                    numFastTurns: 1.1,
                },
                voice: {
                    cachingEnabled: true,
                    provider: "azure",
                    voiceId: "andrew",
                    chunkPlan: {
                        enabled: true,
                        minCharacters: 30,
                    },
                    speed: 1.1,
                    fallbackPlan: {
                        voices: [
                            {
                                cachingEnabled: true,
                                provider: "azure",
                                voiceId: "andrew",
                            },
                        ],
                    },
                },
                firstMessage: "Hello! How can I help you today?",
                firstMessageInterruptionsEnabled: true,
                firstMessageMode: "assistant-speaks-first",
                voicemailDetection: {
                    beepMaxAwaitSeconds: 1.1,
                    provider: "google",
                },
                clientMessages: [
                    "conversation-update",
                    "function-call",
                    "hang",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transfer-update",
                    "transcript",
                    "tool-calls",
                    "user-interrupted",
                    "voice-input",
                    "workflow.node.started",
                ],
                serverMessages: [
                    "conversation-update",
                    "end-of-call-report",
                    "function-call",
                    "hang",
                    "speech-update",
                    "status-update",
                    "tool-calls",
                    "transfer-destination-request",
                    "user-interrupted",
                ],
                silenceTimeoutSeconds: 30,
                maxDurationSeconds: 600,
                backgroundSound: "off",
                modelOutputInMessagesEnabled: false,
                transportConfigurations: [
                    {
                        provider: "twilio",
                        timeout: 60,
                        record: false,
                    },
                ],
                observabilityPlan: {
                    provider: "langfuse",
                    tags: ["tags"],
                    metadata: {
                        key: "value",
                    },
                },
                credentials: [
                    {
                        provider: "11labs",
                        apiKey: "apiKey",
                    },
                ],
                hooks: [
                    {
                        on: "call.ending",
                        do: [
                            {
                                type: "transfer",
                            },
                        ],
                    },
                ],
                variableValues: {
                    key: "value",
                },
                name: "name",
                voicemailMessage: "voicemailMessage",
                endCallMessage: "endCallMessage",
                endCallPhrases: ["endCallPhrases"],
                compliancePlan: {
                    hipaaEnabled: true,
                    pciEnabled: true,
                },
                metadata: {
                    key: "value",
                },
                backgroundSpeechDenoisingPlan: {
                    fourierDenoisingPlan: {
                        mediaDetectionEnabled: true,
                        staticThreshold: -35,
                        baselineOffsetDb: -15,
                        windowSizeMs: 3000,
                        baselinePercentile: 85,
                    },
                },
                analysisPlan: {
                    minMessagesThreshold: 1.1,
                    structuredDataMultiPlan: [
                        {
                            key: "key",
                            plan: {},
                        },
                    ],
                },
                artifactPlan: {
                    recordingEnabled: true,
                    recordingFormat: "wav;l16",
                    videoRecordingEnabled: false,
                    pcapEnabled: true,
                    pcapS3PathPrefix: "/pcaps",
                    transcriptPlan: {
                        enabled: true,
                    },
                    recordingPath: "recordingPath",
                },
                messagePlan: {
                    idleMessages: ["idleMessages"],
                    idleMessageMaxSpokenCount: 1.1,
                    idleMessageResetCountOnUserSpeechEnabled: true,
                    idleTimeoutSeconds: 1.1,
                    silenceTimeoutMessage: "silenceTimeoutMessage",
                },
                startSpeakingPlan: {
                    waitSeconds: 0.4,
                    smartEndpointingPlan: {
                        provider: "vapi",
                    },
                    customEndpointingRules: [
                        {
                            type: "assistant",
                            regex: "regex",
                            timeoutSeconds: 1.1,
                        },
                    ],
                    transcriptionEndpointingPlan: {
                        onPunctuationSeconds: 0.1,
                        onNoPunctuationSeconds: 1.5,
                        onNumberSeconds: 0.5,
                    },
                },
                stopSpeakingPlan: {
                    numWords: 0,
                    voiceSeconds: 0.2,
                    backoffSeconds: 1,
                    acknowledgementPhrases: [
                        "i understand",
                        "i see",
                        "i got it",
                        "i hear you",
                        "im listening",
                        "im with you",
                        "right",
                        "okay",
                        "ok",
                        "sure",
                        "alright",
                        "got it",
                        "understood",
                        "yeah",
                        "yes",
                        "uh-huh",
                        "mm-hmm",
                        "gotcha",
                        "mhmm",
                        "ah",
                        "yeah okay",
                        "yeah sure",
                    ],
                    interruptionPhrases: [
                        "stop",
                        "shut",
                        "up",
                        "enough",
                        "quiet",
                        "silence",
                        "but",
                        "dont",
                        "not",
                        "no",
                        "hold",
                        "wait",
                        "cut",
                        "pause",
                        "nope",
                        "nah",
                        "nevermind",
                        "never",
                        "bad",
                        "actually",
                    ],
                },
                monitorPlan: {
                    listenEnabled: false,
                    listenAuthenticationEnabled: false,
                    controlEnabled: false,
                    controlAuthenticationEnabled: false,
                },
                credentialIds: ["credentialIds"],
                server: {
                    timeoutSeconds: 20,
                    url: "url",
                    headers: {
                        key: "value",
                    },
                    backoffPlan: {
                        type: {
                            key: "value",
                        },
                        maxRetries: 0,
                        baseDelaySeconds: 1,
                    },
                },
                keypadInputPlan: {
                    enabled: true,
                    timeoutSeconds: 1.1,
                    delimiters: "#",
                },
            },
            name: "name",
            sessionId: "sessionId",
            input: "input",
            stream: true,
            previousChatId: "previousChatId",
            id: "id",
            orgId: "orgId",
            messages: [
                {
                    role: "role",
                    message: "message",
                    time: 1.1,
                    secondsFromStart: 1.1,
                },
            ],
            output: [
                {
                    role: "role",
                    message: "message",
                    time: 1.1,
                    secondsFromStart: 1.1,
                },
            ],
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            costs: [
                {
                    type: "model",
                    model: {
                        key: "value",
                    },
                    promptTokens: 1.1,
                    completionTokens: 1.1,
                    cost: 1.1,
                },
            ],
            cost: 1.1,
        });
    });

    test("createResponse", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { input: "input" };
        const rawResponseBody = {
            id: "id",
            object: "response",
            created_at: 1.1,
            status: "completed",
            error: "error",
            output: [
                {
                    id: "id",
                    content: [{ annotations: [{ key: "value" }], text: "text", type: "output_text" }],
                    role: "assistant",
                    status: "in_progress",
                    type: "message",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/chat/responses")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.chats.createResponse({
            input: "input",
        });
        expect(response).toEqual({
            id: "id",
            object: "response",
            created_at: 1.1,
            status: "completed",
            error: "error",
            output: [
                {
                    id: "id",
                    content: [
                        {
                            annotations: [
                                {
                                    key: "value",
                                },
                            ],
                            text: "text",
                            type: "output_text",
                        },
                    ],
                    role: "assistant",
                    status: "in_progress",
                    type: "message",
                },
            ],
        });
    });
});
