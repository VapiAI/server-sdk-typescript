/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { VapiClient } from "../../src/Client";
import * as Vapi from "../../src/api/index";

describe("PhoneNumbers", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                fallbackDestination: {
                    message: "message",
                    type: "number",
                    numberE164CheckEnabled: true,
                    number: "number",
                    extension: "extension",
                    callerId: "callerId",
                    transferPlan: { mode: "blind-transfer" },
                    description: "description",
                },
                hooks: [{ on: "call.ringing", do: [{ type: "transfer" }] }],
                provider: "byo-phone-number",
                numberE164CheckEnabled: true,
                id: "id",
                orgId: "orgId",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                status: "active",
                name: "name",
                assistantId: "assistantId",
                workflowId: "workflowId",
                squadId: "squadId",
                server: {
                    timeoutSeconds: 20,
                    credentialId: "550e8400-e29b-41d4-a716-446655440000",
                    url: "url",
                    headers: { key: "value" },
                    backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                },
                number: "number",
                credentialId: "credentialId",
            },
        ];
        server.mockEndpoint().get("/phone-number").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.phoneNumbers.list();
        expect(response).toEqual([
            {
                fallbackDestination: {
                    message: "message",
                    type: "number",
                    numberE164CheckEnabled: true,
                    number: "number",
                    extension: "extension",
                    callerId: "callerId",
                    transferPlan: {
                        mode: "blind-transfer",
                    },
                    description: "description",
                },
                hooks: [
                    {
                        on: "call.ringing",
                        do: [
                            {
                                type: "transfer",
                            },
                        ],
                    },
                ],
                provider: "byo-phone-number",
                numberE164CheckEnabled: true,
                id: "id",
                orgId: "orgId",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                status: "active",
                name: "name",
                assistantId: "assistantId",
                workflowId: "workflowId",
                squadId: "squadId",
                server: {
                    timeoutSeconds: 20,
                    credentialId: "550e8400-e29b-41d4-a716-446655440000",
                    url: "url",
                    headers: {
                        key: "value",
                    },
                    backoffPlan: {
                        type: {
                            key: "value",
                        },
                        maxRetries: 0,
                        baseDelaySeconds: 1,
                    },
                },
                number: "number",
                credentialId: "credentialId",
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { provider: "byo-phone-number", credentialId: "credentialId" };
        const rawResponseBody = {
            fallbackDestination: {
                message: "message",
                type: "number",
                numberE164CheckEnabled: true,
                number: "number",
                extension: "extension",
                callerId: "callerId",
                transferPlan: {
                    mode: "blind-transfer",
                    message: "message",
                    timeout: 1.1,
                    sipVerb: { key: "value" },
                    holdAudioUrl: "holdAudioUrl",
                    transferCompleteAudioUrl: "transferCompleteAudioUrl",
                    twiml: "twiml",
                    sipHeadersInReferToEnabled: true,
                    fallbackPlan: { message: "message" },
                },
                description: "description",
            },
            hooks: [{ on: "call.ringing", do: [{ type: "transfer" }] }],
            provider: "byo-phone-number",
            numberE164CheckEnabled: true,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            status: "active",
            name: "name",
            assistantId: "assistantId",
            workflowId: "workflowId",
            squadId: "squadId",
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: { key: "value" },
                backoffPlan: {
                    type: { key: "value" },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [{ key: "value" }, { key: "value" }, { key: "value" }, { key: "value" }],
                },
            },
            number: "number",
            credentialId: "credentialId",
        };
        server
            .mockEndpoint()
            .post("/phone-number")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.create({
            provider: "byo-phone-number",
            credentialId: "credentialId",
        });
        expect(response).toEqual({
            fallbackDestination: {
                message: "message",
                type: "number",
                numberE164CheckEnabled: true,
                number: "number",
                extension: "extension",
                callerId: "callerId",
                transferPlan: {
                    mode: "blind-transfer",
                    message: "message",
                    timeout: 1.1,
                    sipVerb: {
                        key: "value",
                    },
                    holdAudioUrl: "holdAudioUrl",
                    transferCompleteAudioUrl: "transferCompleteAudioUrl",
                    twiml: "twiml",
                    sipHeadersInReferToEnabled: true,
                    fallbackPlan: {
                        message: "message",
                    },
                },
                description: "description",
            },
            hooks: [
                {
                    on: "call.ringing",
                    do: [
                        {
                            type: "transfer",
                        },
                    ],
                },
            ],
            provider: "byo-phone-number",
            numberE164CheckEnabled: true,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            status: "active",
            name: "name",
            assistantId: "assistantId",
            workflowId: "workflowId",
            squadId: "squadId",
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: {
                    key: "value",
                },
                backoffPlan: {
                    type: {
                        key: "value",
                    },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                    ],
                },
            },
            number: "number",
            credentialId: "credentialId",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            fallbackDestination: {
                message: "message",
                type: "number",
                numberE164CheckEnabled: true,
                number: "number",
                extension: "extension",
                callerId: "callerId",
                transferPlan: {
                    mode: "blind-transfer",
                    message: "message",
                    timeout: 1.1,
                    sipVerb: { key: "value" },
                    holdAudioUrl: "holdAudioUrl",
                    transferCompleteAudioUrl: "transferCompleteAudioUrl",
                    twiml: "twiml",
                    sipHeadersInReferToEnabled: true,
                    fallbackPlan: { message: "message" },
                },
                description: "description",
            },
            hooks: [{ on: "call.ringing", do: [{ type: "transfer" }] }],
            provider: "byo-phone-number",
            numberE164CheckEnabled: true,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            status: "active",
            name: "name",
            assistantId: "assistantId",
            workflowId: "workflowId",
            squadId: "squadId",
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: { key: "value" },
                backoffPlan: {
                    type: { key: "value" },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [{ key: "value" }, { key: "value" }, { key: "value" }, { key: "value" }],
                },
            },
            number: "number",
            credentialId: "credentialId",
        };
        server.mockEndpoint().get("/phone-number/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.phoneNumbers.get("id");
        expect(response).toEqual({
            fallbackDestination: {
                message: "message",
                type: "number",
                numberE164CheckEnabled: true,
                number: "number",
                extension: "extension",
                callerId: "callerId",
                transferPlan: {
                    mode: "blind-transfer",
                    message: "message",
                    timeout: 1.1,
                    sipVerb: {
                        key: "value",
                    },
                    holdAudioUrl: "holdAudioUrl",
                    transferCompleteAudioUrl: "transferCompleteAudioUrl",
                    twiml: "twiml",
                    sipHeadersInReferToEnabled: true,
                    fallbackPlan: {
                        message: "message",
                    },
                },
                description: "description",
            },
            hooks: [
                {
                    on: "call.ringing",
                    do: [
                        {
                            type: "transfer",
                        },
                    ],
                },
            ],
            provider: "byo-phone-number",
            numberE164CheckEnabled: true,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            status: "active",
            name: "name",
            assistantId: "assistantId",
            workflowId: "workflowId",
            squadId: "squadId",
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: {
                    key: "value",
                },
                backoffPlan: {
                    type: {
                        key: "value",
                    },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                    ],
                },
            },
            number: "number",
            credentialId: "credentialId",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            fallbackDestination: {
                message: "message",
                type: "number",
                numberE164CheckEnabled: true,
                number: "number",
                extension: "extension",
                callerId: "callerId",
                transferPlan: {
                    mode: "blind-transfer",
                    message: "message",
                    timeout: 1.1,
                    sipVerb: { key: "value" },
                    holdAudioUrl: "holdAudioUrl",
                    transferCompleteAudioUrl: "transferCompleteAudioUrl",
                    twiml: "twiml",
                    sipHeadersInReferToEnabled: true,
                    fallbackPlan: { message: "message" },
                },
                description: "description",
            },
            hooks: [{ on: "call.ringing", do: [{ type: "transfer" }] }],
            provider: "byo-phone-number",
            numberE164CheckEnabled: true,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            status: "active",
            name: "name",
            assistantId: "assistantId",
            workflowId: "workflowId",
            squadId: "squadId",
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: { key: "value" },
                backoffPlan: {
                    type: { key: "value" },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [{ key: "value" }, { key: "value" }, { key: "value" }, { key: "value" }],
                },
            },
            number: "number",
            credentialId: "credentialId",
        };
        server
            .mockEndpoint()
            .delete("/phone-number/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.delete("id");
        expect(response).toEqual({
            fallbackDestination: {
                message: "message",
                type: "number",
                numberE164CheckEnabled: true,
                number: "number",
                extension: "extension",
                callerId: "callerId",
                transferPlan: {
                    mode: "blind-transfer",
                    message: "message",
                    timeout: 1.1,
                    sipVerb: {
                        key: "value",
                    },
                    holdAudioUrl: "holdAudioUrl",
                    transferCompleteAudioUrl: "transferCompleteAudioUrl",
                    twiml: "twiml",
                    sipHeadersInReferToEnabled: true,
                    fallbackPlan: {
                        message: "message",
                    },
                },
                description: "description",
            },
            hooks: [
                {
                    on: "call.ringing",
                    do: [
                        {
                            type: "transfer",
                        },
                    ],
                },
            ],
            provider: "byo-phone-number",
            numberE164CheckEnabled: true,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            status: "active",
            name: "name",
            assistantId: "assistantId",
            workflowId: "workflowId",
            squadId: "squadId",
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: {
                    key: "value",
                },
                backoffPlan: {
                    type: {
                        key: "value",
                    },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                    ],
                },
            },
            number: "number",
            credentialId: "credentialId",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            fallbackDestination: {
                message: "message",
                type: "number",
                numberE164CheckEnabled: true,
                number: "number",
                extension: "extension",
                callerId: "callerId",
                transferPlan: {
                    mode: "blind-transfer",
                    message: "message",
                    timeout: 1.1,
                    sipVerb: { key: "value" },
                    holdAudioUrl: "holdAudioUrl",
                    transferCompleteAudioUrl: "transferCompleteAudioUrl",
                    twiml: "twiml",
                    sipHeadersInReferToEnabled: true,
                    fallbackPlan: { message: "message" },
                },
                description: "description",
            },
            hooks: [{ on: "call.ringing", do: [{ type: "transfer" }] }],
            provider: "byo-phone-number",
            numberE164CheckEnabled: true,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            status: "active",
            name: "name",
            assistantId: "assistantId",
            workflowId: "workflowId",
            squadId: "squadId",
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: { key: "value" },
                backoffPlan: {
                    type: { key: "value" },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [{ key: "value" }, { key: "value" }, { key: "value" }, { key: "value" }],
                },
            },
            number: "number",
            credentialId: "credentialId",
        };
        server
            .mockEndpoint()
            .patch("/phone-number/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.update("id", {});
        expect(response).toEqual({
            fallbackDestination: {
                message: "message",
                type: "number",
                numberE164CheckEnabled: true,
                number: "number",
                extension: "extension",
                callerId: "callerId",
                transferPlan: {
                    mode: "blind-transfer",
                    message: "message",
                    timeout: 1.1,
                    sipVerb: {
                        key: "value",
                    },
                    holdAudioUrl: "holdAudioUrl",
                    transferCompleteAudioUrl: "transferCompleteAudioUrl",
                    twiml: "twiml",
                    sipHeadersInReferToEnabled: true,
                    fallbackPlan: {
                        message: "message",
                    },
                },
                description: "description",
            },
            hooks: [
                {
                    on: "call.ringing",
                    do: [
                        {
                            type: "transfer",
                        },
                    ],
                },
            ],
            provider: "byo-phone-number",
            numberE164CheckEnabled: true,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            status: "active",
            name: "name",
            assistantId: "assistantId",
            workflowId: "workflowId",
            squadId: "squadId",
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: {
                    key: "value",
                },
                backoffPlan: {
                    type: {
                        key: "value",
                    },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                    ],
                },
            },
            number: "number",
            credentialId: "credentialId",
        });
    });
});
