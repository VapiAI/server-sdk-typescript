/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { VapiClient } from "../../src/Client";

describe("ProviderResources", () => {
    test("ProviderResourceController_getProviderResourcesPaginated", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            results: [
                {
                    id: "id",
                    orgId: "orgId",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    provider: "11labs",
                    resourceName: "pronunciation-dictionary",
                    resourceId: "resourceId",
                    resource: {
                        pronunciationDictionaryId: "5xM3yVvZQKV0EfqQpLrJ",
                        dictionaryName: "My Dictionary",
                        createdBy: "ar6633Es2kUjFXBdR1iVc9ztsXl1",
                        creationTimeUnix: 1714156800,
                        versionId: "5xM3yVvZQKV0EfqQpLrJ",
                        versionRulesNum: 5,
                        description: "This is a test dictionary",
                    },
                },
            ],
            metadata: { itemsPerPage: 1.1, totalItems: 1.1, currentPage: 1.1, itemsBeyondRetention: true },
        };
        server
            .mockEndpoint()
            .get("/provider/11labs/pronunciation-dictionary")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providerResources.providerResourceControllerGetProviderResourcesPaginated(
            "11labs",
            "pronunciation-dictionary",
        );
        expect(response).toEqual({
            results: [
                {
                    id: "id",
                    orgId: "orgId",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    provider: "11labs",
                    resourceName: "pronunciation-dictionary",
                    resourceId: "resourceId",
                    resource: {
                        pronunciationDictionaryId: "5xM3yVvZQKV0EfqQpLrJ",
                        dictionaryName: "My Dictionary",
                        createdBy: "ar6633Es2kUjFXBdR1iVc9ztsXl1",
                        creationTimeUnix: 1714156800,
                        versionId: "5xM3yVvZQKV0EfqQpLrJ",
                        versionRulesNum: 5,
                        description: "This is a test dictionary",
                    },
                },
            ],
            metadata: {
                itemsPerPage: 1.1,
                totalItems: 1.1,
                currentPage: 1.1,
                itemsBeyondRetention: true,
            },
        });
    });

    test("ProviderResourceController_createProviderResource", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            provider: "11labs",
            resourceName: "pronunciation-dictionary",
            resourceId: "resourceId",
            resource: {
                pronunciationDictionaryId: "5xM3yVvZQKV0EfqQpLrJ",
                dictionaryName: "My Dictionary",
                createdBy: "ar6633Es2kUjFXBdR1iVc9ztsXl1",
                creationTimeUnix: 1714156800,
                versionId: "5xM3yVvZQKV0EfqQpLrJ",
                versionRulesNum: 5,
                permissionOnResource: "admin",
                description: "This is a test dictionary",
            },
        };
        server
            .mockEndpoint()
            .post("/provider/11labs/pronunciation-dictionary")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providerResources.providerResourceControllerCreateProviderResource(
            "11labs",
            "pronunciation-dictionary",
        );
        expect(response).toEqual({
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            provider: "11labs",
            resourceName: "pronunciation-dictionary",
            resourceId: "resourceId",
            resource: {
                pronunciationDictionaryId: "5xM3yVvZQKV0EfqQpLrJ",
                dictionaryName: "My Dictionary",
                createdBy: "ar6633Es2kUjFXBdR1iVc9ztsXl1",
                creationTimeUnix: 1714156800,
                versionId: "5xM3yVvZQKV0EfqQpLrJ",
                versionRulesNum: 5,
                permissionOnResource: "admin",
                description: "This is a test dictionary",
            },
        });
    });

    test("ProviderResourceController_getProviderResource", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            provider: "11labs",
            resourceName: "pronunciation-dictionary",
            resourceId: "resourceId",
            resource: {
                pronunciationDictionaryId: "5xM3yVvZQKV0EfqQpLrJ",
                dictionaryName: "My Dictionary",
                createdBy: "ar6633Es2kUjFXBdR1iVc9ztsXl1",
                creationTimeUnix: 1714156800,
                versionId: "5xM3yVvZQKV0EfqQpLrJ",
                versionRulesNum: 5,
                permissionOnResource: "admin",
                description: "This is a test dictionary",
            },
        };
        server
            .mockEndpoint()
            .get("/provider/11labs/pronunciation-dictionary/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providerResources.providerResourceControllerGetProviderResource(
            "11labs",
            "pronunciation-dictionary",
            "id",
        );
        expect(response).toEqual({
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            provider: "11labs",
            resourceName: "pronunciation-dictionary",
            resourceId: "resourceId",
            resource: {
                pronunciationDictionaryId: "5xM3yVvZQKV0EfqQpLrJ",
                dictionaryName: "My Dictionary",
                createdBy: "ar6633Es2kUjFXBdR1iVc9ztsXl1",
                creationTimeUnix: 1714156800,
                versionId: "5xM3yVvZQKV0EfqQpLrJ",
                versionRulesNum: 5,
                permissionOnResource: "admin",
                description: "This is a test dictionary",
            },
        });
    });

    test("ProviderResourceController_deleteProviderResource", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            provider: "11labs",
            resourceName: "pronunciation-dictionary",
            resourceId: "resourceId",
            resource: {
                pronunciationDictionaryId: "5xM3yVvZQKV0EfqQpLrJ",
                dictionaryName: "My Dictionary",
                createdBy: "ar6633Es2kUjFXBdR1iVc9ztsXl1",
                creationTimeUnix: 1714156800,
                versionId: "5xM3yVvZQKV0EfqQpLrJ",
                versionRulesNum: 5,
                permissionOnResource: "admin",
                description: "This is a test dictionary",
            },
        };
        server
            .mockEndpoint()
            .delete("/provider/11labs/pronunciation-dictionary/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providerResources.providerResourceControllerDeleteProviderResource(
            "11labs",
            "pronunciation-dictionary",
            "id",
        );
        expect(response).toEqual({
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            provider: "11labs",
            resourceName: "pronunciation-dictionary",
            resourceId: "resourceId",
            resource: {
                pronunciationDictionaryId: "5xM3yVvZQKV0EfqQpLrJ",
                dictionaryName: "My Dictionary",
                createdBy: "ar6633Es2kUjFXBdR1iVc9ztsXl1",
                creationTimeUnix: 1714156800,
                versionId: "5xM3yVvZQKV0EfqQpLrJ",
                versionRulesNum: 5,
                permissionOnResource: "admin",
                description: "This is a test dictionary",
            },
        });
    });

    test("ProviderResourceController_updateProviderResource", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            provider: "11labs",
            resourceName: "pronunciation-dictionary",
            resourceId: "resourceId",
            resource: {
                pronunciationDictionaryId: "5xM3yVvZQKV0EfqQpLrJ",
                dictionaryName: "My Dictionary",
                createdBy: "ar6633Es2kUjFXBdR1iVc9ztsXl1",
                creationTimeUnix: 1714156800,
                versionId: "5xM3yVvZQKV0EfqQpLrJ",
                versionRulesNum: 5,
                permissionOnResource: "admin",
                description: "This is a test dictionary",
            },
        };
        server
            .mockEndpoint()
            .patch("/provider/11labs/pronunciation-dictionary/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providerResources.providerResourceControllerUpdateProviderResource(
            "11labs",
            "pronunciation-dictionary",
            "id",
        );
        expect(response).toEqual({
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            provider: "11labs",
            resourceName: "pronunciation-dictionary",
            resourceId: "resourceId",
            resource: {
                pronunciationDictionaryId: "5xM3yVvZQKV0EfqQpLrJ",
                dictionaryName: "My Dictionary",
                createdBy: "ar6633Es2kUjFXBdR1iVc9ztsXl1",
                creationTimeUnix: 1714156800,
                versionId: "5xM3yVvZQKV0EfqQpLrJ",
                versionRulesNum: 5,
                permissionOnResource: "admin",
                description: "This is a test dictionary",
            },
        });
    });
});
