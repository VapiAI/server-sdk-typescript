/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { VapiClient } from "../../src/Client";

describe("Campaigns", () => {
    test("CampaignController_findAll", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            results: [
                {
                    status: "scheduled",
                    endedReason: "campaign.scheduled.ended-by-user",
                    name: "Q2 Sales Campaign",
                    assistantId: "assistantId",
                    workflowId: "workflowId",
                    phoneNumberId: "phoneNumberId",
                    schedulePlan: { earliestAt: "2024-01-15T09:30:00Z" },
                    customers: [{}],
                    id: "id",
                    orgId: "orgId",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    calls: { key: "value" },
                    callsCounterScheduled: 1.1,
                    callsCounterQueued: 1.1,
                    callsCounterInProgress: 1.1,
                    callsCounterEndedVoicemail: 1.1,
                    callsCounterEnded: 1.1,
                },
            ],
            metadata: {
                itemsPerPage: 1.1,
                totalItems: 1.1,
                currentPage: 1.1,
                itemsBeyondRetention: true,
                createdAtLe: "2024-01-15T09:30:00Z",
                createdAtGe: "2024-01-15T09:30:00Z",
            },
        };
        server.mockEndpoint().get("/campaign").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.campaigns.campaignControllerFindAll();
        expect(response).toEqual({
            results: [
                {
                    status: "scheduled",
                    endedReason: "campaign.scheduled.ended-by-user",
                    name: "Q2 Sales Campaign",
                    assistantId: "assistantId",
                    workflowId: "workflowId",
                    phoneNumberId: "phoneNumberId",
                    schedulePlan: {
                        earliestAt: "2024-01-15T09:30:00Z",
                    },
                    customers: [{}],
                    id: "id",
                    orgId: "orgId",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    calls: {
                        key: "value",
                    },
                    callsCounterScheduled: 1.1,
                    callsCounterQueued: 1.1,
                    callsCounterInProgress: 1.1,
                    callsCounterEndedVoicemail: 1.1,
                    callsCounterEnded: 1.1,
                },
            ],
            metadata: {
                itemsPerPage: 1.1,
                totalItems: 1.1,
                currentPage: 1.1,
                itemsBeyondRetention: true,
                createdAtLe: "2024-01-15T09:30:00Z",
                createdAtGe: "2024-01-15T09:30:00Z",
            },
        });
    });

    test("CampaignController_create", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "Q2 Sales Campaign", phoneNumberId: "phoneNumberId", customers: [{}] };
        const rawResponseBody = {
            status: "scheduled",
            endedReason: "campaign.scheduled.ended-by-user",
            name: "Q2 Sales Campaign",
            assistantId: "assistantId",
            workflowId: "workflowId",
            phoneNumberId: "phoneNumberId",
            schedulePlan: { earliestAt: "2024-01-15T09:30:00Z", latestAt: "2024-01-15T09:30:00Z" },
            customers: [
                {
                    numberE164CheckEnabled: true,
                    extension: "extension",
                    assistantOverrides: {
                        voice: {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                            fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
                        },
                        firstMessage: "Hello! How can I help you today?",
                        maxDurationSeconds: 600,
                        backgroundSound: "off",
                        modelOutputInMessagesEnabled: false,
                        credentials: [{ provider: "11labs", apiKey: "apiKey" }],
                    },
                    number: "number",
                    sipUri: "sipUri",
                    name: "name",
                    email: "email",
                    externalId: "externalId",
                },
            ],
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            calls: { key: "value" },
            callsCounterScheduled: 1.1,
            callsCounterQueued: 1.1,
            callsCounterInProgress: 1.1,
            callsCounterEndedVoicemail: 1.1,
            callsCounterEnded: 1.1,
        };
        server
            .mockEndpoint()
            .post("/campaign")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.campaigns.campaignControllerCreate({
            name: "Q2 Sales Campaign",
            phoneNumberId: "phoneNumberId",
            customers: [{}],
        });
        expect(response).toEqual({
            status: "scheduled",
            endedReason: "campaign.scheduled.ended-by-user",
            name: "Q2 Sales Campaign",
            assistantId: "assistantId",
            workflowId: "workflowId",
            phoneNumberId: "phoneNumberId",
            schedulePlan: {
                earliestAt: "2024-01-15T09:30:00Z",
                latestAt: "2024-01-15T09:30:00Z",
            },
            customers: [
                {
                    numberE164CheckEnabled: true,
                    extension: "extension",
                    assistantOverrides: {
                        voice: {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                            fallbackPlan: {
                                voices: [
                                    {
                                        cachingEnabled: true,
                                        provider: "azure",
                                        voiceId: "andrew",
                                    },
                                ],
                            },
                        },
                        firstMessage: "Hello! How can I help you today?",
                        maxDurationSeconds: 600,
                        backgroundSound: "off",
                        modelOutputInMessagesEnabled: false,
                        credentials: [
                            {
                                provider: "11labs",
                                apiKey: "apiKey",
                            },
                        ],
                    },
                    number: "number",
                    sipUri: "sipUri",
                    name: "name",
                    email: "email",
                    externalId: "externalId",
                },
            ],
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            calls: {
                key: "value",
            },
            callsCounterScheduled: 1.1,
            callsCounterQueued: 1.1,
            callsCounterInProgress: 1.1,
            callsCounterEndedVoicemail: 1.1,
            callsCounterEnded: 1.1,
        });
    });

    test("CampaignController_findOne", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            status: "scheduled",
            endedReason: "campaign.scheduled.ended-by-user",
            name: "Q2 Sales Campaign",
            assistantId: "assistantId",
            workflowId: "workflowId",
            phoneNumberId: "phoneNumberId",
            schedulePlan: { earliestAt: "2024-01-15T09:30:00Z", latestAt: "2024-01-15T09:30:00Z" },
            customers: [
                {
                    numberE164CheckEnabled: true,
                    extension: "extension",
                    assistantOverrides: {
                        voice: {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                            fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
                        },
                        firstMessage: "Hello! How can I help you today?",
                        maxDurationSeconds: 600,
                        backgroundSound: "off",
                        modelOutputInMessagesEnabled: false,
                        credentials: [{ provider: "11labs", apiKey: "apiKey" }],
                    },
                    number: "number",
                    sipUri: "sipUri",
                    name: "name",
                    email: "email",
                    externalId: "externalId",
                },
            ],
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            calls: { key: "value" },
            callsCounterScheduled: 1.1,
            callsCounterQueued: 1.1,
            callsCounterInProgress: 1.1,
            callsCounterEndedVoicemail: 1.1,
            callsCounterEnded: 1.1,
        };
        server.mockEndpoint().get("/campaign/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.campaigns.campaignControllerFindOne("id");
        expect(response).toEqual({
            status: "scheduled",
            endedReason: "campaign.scheduled.ended-by-user",
            name: "Q2 Sales Campaign",
            assistantId: "assistantId",
            workflowId: "workflowId",
            phoneNumberId: "phoneNumberId",
            schedulePlan: {
                earliestAt: "2024-01-15T09:30:00Z",
                latestAt: "2024-01-15T09:30:00Z",
            },
            customers: [
                {
                    numberE164CheckEnabled: true,
                    extension: "extension",
                    assistantOverrides: {
                        voice: {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                            fallbackPlan: {
                                voices: [
                                    {
                                        cachingEnabled: true,
                                        provider: "azure",
                                        voiceId: "andrew",
                                    },
                                ],
                            },
                        },
                        firstMessage: "Hello! How can I help you today?",
                        maxDurationSeconds: 600,
                        backgroundSound: "off",
                        modelOutputInMessagesEnabled: false,
                        credentials: [
                            {
                                provider: "11labs",
                                apiKey: "apiKey",
                            },
                        ],
                    },
                    number: "number",
                    sipUri: "sipUri",
                    name: "name",
                    email: "email",
                    externalId: "externalId",
                },
            ],
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            calls: {
                key: "value",
            },
            callsCounterScheduled: 1.1,
            callsCounterQueued: 1.1,
            callsCounterInProgress: 1.1,
            callsCounterEndedVoicemail: 1.1,
            callsCounterEnded: 1.1,
        });
    });

    test("CampaignController_remove", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            status: "scheduled",
            endedReason: "campaign.scheduled.ended-by-user",
            name: "Q2 Sales Campaign",
            assistantId: "assistantId",
            workflowId: "workflowId",
            phoneNumberId: "phoneNumberId",
            schedulePlan: { earliestAt: "2024-01-15T09:30:00Z", latestAt: "2024-01-15T09:30:00Z" },
            customers: [
                {
                    numberE164CheckEnabled: true,
                    extension: "extension",
                    assistantOverrides: {
                        voice: {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                            fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
                        },
                        firstMessage: "Hello! How can I help you today?",
                        maxDurationSeconds: 600,
                        backgroundSound: "off",
                        modelOutputInMessagesEnabled: false,
                        credentials: [{ provider: "11labs", apiKey: "apiKey" }],
                    },
                    number: "number",
                    sipUri: "sipUri",
                    name: "name",
                    email: "email",
                    externalId: "externalId",
                },
            ],
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            calls: { key: "value" },
            callsCounterScheduled: 1.1,
            callsCounterQueued: 1.1,
            callsCounterInProgress: 1.1,
            callsCounterEndedVoicemail: 1.1,
            callsCounterEnded: 1.1,
        };
        server.mockEndpoint().delete("/campaign/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.campaigns.campaignControllerRemove("id");
        expect(response).toEqual({
            status: "scheduled",
            endedReason: "campaign.scheduled.ended-by-user",
            name: "Q2 Sales Campaign",
            assistantId: "assistantId",
            workflowId: "workflowId",
            phoneNumberId: "phoneNumberId",
            schedulePlan: {
                earliestAt: "2024-01-15T09:30:00Z",
                latestAt: "2024-01-15T09:30:00Z",
            },
            customers: [
                {
                    numberE164CheckEnabled: true,
                    extension: "extension",
                    assistantOverrides: {
                        voice: {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                            fallbackPlan: {
                                voices: [
                                    {
                                        cachingEnabled: true,
                                        provider: "azure",
                                        voiceId: "andrew",
                                    },
                                ],
                            },
                        },
                        firstMessage: "Hello! How can I help you today?",
                        maxDurationSeconds: 600,
                        backgroundSound: "off",
                        modelOutputInMessagesEnabled: false,
                        credentials: [
                            {
                                provider: "11labs",
                                apiKey: "apiKey",
                            },
                        ],
                    },
                    number: "number",
                    sipUri: "sipUri",
                    name: "name",
                    email: "email",
                    externalId: "externalId",
                },
            ],
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            calls: {
                key: "value",
            },
            callsCounterScheduled: 1.1,
            callsCounterQueued: 1.1,
            callsCounterInProgress: 1.1,
            callsCounterEndedVoicemail: 1.1,
            callsCounterEnded: 1.1,
        });
    });

    test("CampaignController_update", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            status: "scheduled",
            endedReason: "campaign.scheduled.ended-by-user",
            name: "Q2 Sales Campaign",
            assistantId: "assistantId",
            workflowId: "workflowId",
            phoneNumberId: "phoneNumberId",
            schedulePlan: { earliestAt: "2024-01-15T09:30:00Z", latestAt: "2024-01-15T09:30:00Z" },
            customers: [
                {
                    numberE164CheckEnabled: true,
                    extension: "extension",
                    assistantOverrides: {
                        voice: {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                            fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
                        },
                        firstMessage: "Hello! How can I help you today?",
                        maxDurationSeconds: 600,
                        backgroundSound: "off",
                        modelOutputInMessagesEnabled: false,
                        credentials: [{ provider: "11labs", apiKey: "apiKey" }],
                    },
                    number: "number",
                    sipUri: "sipUri",
                    name: "name",
                    email: "email",
                    externalId: "externalId",
                },
            ],
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            calls: { key: "value" },
            callsCounterScheduled: 1.1,
            callsCounterQueued: 1.1,
            callsCounterInProgress: 1.1,
            callsCounterEndedVoicemail: 1.1,
            callsCounterEnded: 1.1,
        };
        server
            .mockEndpoint()
            .patch("/campaign/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.campaigns.campaignControllerUpdate("id");
        expect(response).toEqual({
            status: "scheduled",
            endedReason: "campaign.scheduled.ended-by-user",
            name: "Q2 Sales Campaign",
            assistantId: "assistantId",
            workflowId: "workflowId",
            phoneNumberId: "phoneNumberId",
            schedulePlan: {
                earliestAt: "2024-01-15T09:30:00Z",
                latestAt: "2024-01-15T09:30:00Z",
            },
            customers: [
                {
                    numberE164CheckEnabled: true,
                    extension: "extension",
                    assistantOverrides: {
                        voice: {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                            fallbackPlan: {
                                voices: [
                                    {
                                        cachingEnabled: true,
                                        provider: "azure",
                                        voiceId: "andrew",
                                    },
                                ],
                            },
                        },
                        firstMessage: "Hello! How can I help you today?",
                        maxDurationSeconds: 600,
                        backgroundSound: "off",
                        modelOutputInMessagesEnabled: false,
                        credentials: [
                            {
                                provider: "11labs",
                                apiKey: "apiKey",
                            },
                        ],
                    },
                    number: "number",
                    sipUri: "sipUri",
                    name: "name",
                    email: "email",
                    externalId: "externalId",
                },
            ],
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            calls: {
                key: "value",
            },
            callsCounterScheduled: 1.1,
            callsCounterQueued: 1.1,
            callsCounterInProgress: 1.1,
            callsCounterEndedVoicemail: 1.1,
            callsCounterEnded: 1.1,
        });
    });
});
