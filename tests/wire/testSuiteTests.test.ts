/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { VapiClient } from "../../src/Client";

describe("TestSuiteTests", () => {
    test("TestSuiteTestController_findAllPaginated", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            results: [
                {
                    scorers: [{ type: "ai", rubric: "rubric" }],
                    type: "voice",
                    id: "id",
                    testSuiteId: "testSuiteId",
                    orgId: "orgId",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    name: "name",
                    script: "script",
                    numAttempts: 1.1,
                },
            ],
            metadata: { itemsPerPage: 1.1, totalItems: 1.1, currentPage: 1.1 },
        };
        server
            .mockEndpoint()
            .get("/test-suite/testSuiteId/test")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.testSuiteTests.testSuiteTestControllerFindAllPaginated("testSuiteId");
        expect(response).toEqual({
            results: [
                {
                    scorers: [
                        {
                            type: "ai",
                            rubric: "rubric",
                        },
                    ],
                    type: "voice",
                    id: "id",
                    testSuiteId: "testSuiteId",
                    orgId: "orgId",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    name: "name",
                    script: "script",
                    numAttempts: 1.1,
                },
            ],
            metadata: {
                itemsPerPage: 1.1,
                totalItems: 1.1,
                currentPage: 1.1,
            },
        });
    });

    test("TestSuiteTestController_create", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { scorers: [{ type: "ai", rubric: "rubric" }], type: "voice", script: "script" };
        const rawResponseBody = {
            scorers: [{ type: "ai", rubric: "rubric" }],
            type: "voice",
            id: "id",
            testSuiteId: "testSuiteId",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            script: "script",
            numAttempts: 1.1,
        };
        server
            .mockEndpoint()
            .post("/test-suite/testSuiteId/test")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.testSuiteTests.testSuiteTestControllerCreate("testSuiteId", {
            scorers: [
                {
                    type: "ai",
                    rubric: "rubric",
                },
            ],
            type: "voice",
            script: "script",
        });
        expect(response).toEqual({
            scorers: [
                {
                    type: "ai",
                    rubric: "rubric",
                },
            ],
            type: "voice",
            id: "id",
            testSuiteId: "testSuiteId",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            script: "script",
            numAttempts: 1.1,
        });
    });

    test("TestSuiteTestController_findOne", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            scorers: [{ type: "ai", rubric: "rubric" }],
            type: "voice",
            id: "id",
            testSuiteId: "testSuiteId",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            script: "script",
            numAttempts: 1.1,
        };
        server
            .mockEndpoint()
            .get("/test-suite/testSuiteId/test/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.testSuiteTests.testSuiteTestControllerFindOne("testSuiteId", "id");
        expect(response).toEqual({
            scorers: [
                {
                    type: "ai",
                    rubric: "rubric",
                },
            ],
            type: "voice",
            id: "id",
            testSuiteId: "testSuiteId",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            script: "script",
            numAttempts: 1.1,
        });
    });

    test("TestSuiteTestController_remove", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            scorers: [{ type: "ai", rubric: "rubric" }],
            type: "voice",
            id: "id",
            testSuiteId: "testSuiteId",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            script: "script",
            numAttempts: 1.1,
        };
        server
            .mockEndpoint()
            .delete("/test-suite/testSuiteId/test/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.testSuiteTests.testSuiteTestControllerRemove("testSuiteId", "id");
        expect(response).toEqual({
            scorers: [
                {
                    type: "ai",
                    rubric: "rubric",
                },
            ],
            type: "voice",
            id: "id",
            testSuiteId: "testSuiteId",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            script: "script",
            numAttempts: 1.1,
        });
    });

    test("TestSuiteTestController_update", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "voice" };
        const rawResponseBody = {
            scorers: [{ type: "ai", rubric: "rubric" }],
            type: "voice",
            id: "id",
            testSuiteId: "testSuiteId",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            script: "script",
            numAttempts: 1.1,
        };
        server
            .mockEndpoint()
            .patch("/test-suite/testSuiteId/test/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.testSuiteTests.testSuiteTestControllerUpdate("testSuiteId", "id", {
            type: "voice",
        });
        expect(response).toEqual({
            scorers: [
                {
                    type: "ai",
                    rubric: "rubric",
                },
            ],
            type: "voice",
            id: "id",
            testSuiteId: "testSuiteId",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            name: "name",
            script: "script",
            numAttempts: 1.1,
        });
    });
});
