/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { VapiClient } from "../../src/Client";
import * as Vapi from "../../src/api/index";

describe("Assistants", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                transcriber: {
                    provider: "assembly-ai",
                    language: "en",
                    confidenceThreshold: 0.4,
                    formatTurns: true,
                    endOfTurnConfidenceThreshold: 0.7,
                    minEndOfTurnSilenceWhenConfident: 160,
                    wordFinalizationMaxWaitTime: 160,
                    maxTurnSilence: 400,
                    realtimeUrl: "realtimeUrl",
                    wordBoost: ["wordBoost"],
                    endUtteranceSilenceThreshold: 1.1,
                    disablePartialTranscripts: true,
                    fallbackPlan: {
                        transcribers: [
                            {
                                provider: "assembly-ai",
                                confidenceThreshold: 0.4,
                                formatTurns: true,
                                endOfTurnConfidenceThreshold: 0.7,
                                minEndOfTurnSilenceWhenConfident: 160,
                                wordFinalizationMaxWaitTime: 160,
                                maxTurnSilence: 400,
                            },
                        ],
                    },
                },
                model: {
                    messages: [{ role: "assistant" }],
                    tools: [
                        {
                            type: "apiRequest",
                            method: "POST",
                            timeoutSeconds: 20,
                            credentialId: "550e8400-e29b-41d4-a716-446655440000",
                            url: "url",
                            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                        },
                    ],
                    toolIds: ["toolIds"],
                    knowledgeBase: {
                        provider: "custom-knowledge-base",
                        server: {
                            timeoutSeconds: 20,
                            credentialId: "550e8400-e29b-41d4-a716-446655440000",
                            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                        },
                    },
                    model: "claude-3-opus-20240229",
                    provider: "anthropic",
                    thinking: { type: "enabled", budgetTokens: 1.1 },
                    temperature: 1.1,
                    maxTokens: 1.1,
                    emotionRecognitionEnabled: true,
                    numFastTurns: 1.1,
                },
                voice: {
                    cachingEnabled: true,
                    provider: "azure",
                    voiceId: "andrew",
                    chunkPlan: { enabled: true, minCharacters: 30 },
                    speed: 1.1,
                    fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
                },
                firstMessage: "Hello! How can I help you today?",
                firstMessageInterruptionsEnabled: true,
                firstMessageMode: "assistant-speaks-first",
                voicemailDetection: { beepMaxAwaitSeconds: 1.1, provider: "google", type: "audio" },
                clientMessages: [
                    "conversation-update",
                    "function-call",
                    "hang",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transfer-update",
                    "transcript",
                    "tool-calls",
                    "user-interrupted",
                    "voice-input",
                    "workflow.node.started",
                ],
                serverMessages: [
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                ],
                maxDurationSeconds: 600,
                backgroundSound: "off",
                modelOutputInMessagesEnabled: false,
                transportConfigurations: [{ provider: "twilio", timeout: 60, record: false }],
                observabilityPlan: { provider: "langfuse", tags: ["tags"], metadata: { key: "value" } },
                credentials: [{ provider: "11labs", apiKey: "apiKey" }],
                hooks: [{ on: "call.ending", do: [{ type: "tool" }] }],
                name: "name",
                voicemailMessage: "voicemailMessage",
                endCallMessage: "endCallMessage",
                endCallPhrases: ["endCallPhrases"],
                compliancePlan: { hipaaEnabled: true, pciEnabled: true },
                metadata: { key: "value" },
                backgroundSpeechDenoisingPlan: {
                    fourierDenoisingPlan: {
                        mediaDetectionEnabled: true,
                        staticThreshold: -35,
                        baselineOffsetDb: -15,
                        windowSizeMs: 3000,
                        baselinePercentile: 85,
                    },
                },
                analysisPlan: {
                    minMessagesThreshold: 1.1,
                    structuredDataMultiPlan: [{ key: "key", plan: {} }],
                    outcomeIds: ["outcomeIds"],
                },
                artifactPlan: {
                    recordingEnabled: true,
                    recordingFormat: "wav;l16",
                    recordingUseCustomStorageEnabled: true,
                    videoRecordingEnabled: false,
                    pcapEnabled: true,
                    pcapS3PathPrefix: "/pcaps",
                    pcapUseCustomStorageEnabled: true,
                    loggingEnabled: true,
                    loggingUseCustomStorageEnabled: true,
                    transcriptPlan: { enabled: true },
                    recordingPath: "recordingPath",
                    structuredOutputIds: ["structuredOutputIds"],
                    loggingPath: "loggingPath",
                },
                startSpeakingPlan: {
                    waitSeconds: 0.4,
                    smartEndpointingPlan: { provider: "vapi" },
                    customEndpointingRules: [{ type: "assistant", regex: "regex", timeoutSeconds: 1.1 }],
                    transcriptionEndpointingPlan: {
                        onPunctuationSeconds: 0.1,
                        onNoPunctuationSeconds: 1.5,
                        onNumberSeconds: 0.5,
                    },
                },
                stopSpeakingPlan: {
                    numWords: 0,
                    voiceSeconds: 0.2,
                    backoffSeconds: 1,
                    acknowledgementPhrases: [
                        "i understand",
                        "i see",
                        "i got it",
                        "i hear you",
                        "im listening",
                        "im with you",
                        "right",
                        "okay",
                        "ok",
                        "sure",
                        "alright",
                        "got it",
                        "understood",
                        "yeah",
                        "yes",
                        "uh-huh",
                        "mm-hmm",
                        "gotcha",
                        "mhmm",
                        "ah",
                        "yeah okay",
                        "yeah sure",
                    ],
                    interruptionPhrases: [
                        "stop",
                        "shut",
                        "up",
                        "enough",
                        "quiet",
                        "silence",
                        "but",
                        "dont",
                        "not",
                        "no",
                        "hold",
                        "wait",
                        "cut",
                        "pause",
                        "nope",
                        "nah",
                        "nevermind",
                        "never",
                        "bad",
                        "actually",
                    ],
                },
                monitorPlan: {
                    listenEnabled: false,
                    listenAuthenticationEnabled: false,
                    controlEnabled: false,
                    controlAuthenticationEnabled: false,
                },
                credentialIds: ["credentialIds"],
                server: {
                    timeoutSeconds: 20,
                    credentialId: "550e8400-e29b-41d4-a716-446655440000",
                    url: "url",
                    headers: { key: "value" },
                    backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                },
                keypadInputPlan: { enabled: true, timeoutSeconds: 1.1, delimiters: "#" },
                id: "id",
                orgId: "orgId",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
            },
        ];
        server.mockEndpoint().get("/assistant").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.assistants.list();
        expect(response).toEqual([
            {
                transcriber: {
                    provider: "assembly-ai",
                    language: "en",
                    confidenceThreshold: 0.4,
                    formatTurns: true,
                    endOfTurnConfidenceThreshold: 0.7,
                    minEndOfTurnSilenceWhenConfident: 160,
                    wordFinalizationMaxWaitTime: 160,
                    maxTurnSilence: 400,
                    realtimeUrl: "realtimeUrl",
                    wordBoost: ["wordBoost"],
                    endUtteranceSilenceThreshold: 1.1,
                    disablePartialTranscripts: true,
                    fallbackPlan: {
                        transcribers: [
                            {
                                provider: "assembly-ai",
                                confidenceThreshold: 0.4,
                                formatTurns: true,
                                endOfTurnConfidenceThreshold: 0.7,
                                minEndOfTurnSilenceWhenConfident: 160,
                                wordFinalizationMaxWaitTime: 160,
                                maxTurnSilence: 400,
                            },
                        ],
                    },
                },
                model: {
                    messages: [
                        {
                            role: "assistant",
                        },
                    ],
                    tools: [
                        {
                            type: "apiRequest",
                            method: "POST",
                            timeoutSeconds: 20,
                            credentialId: "550e8400-e29b-41d4-a716-446655440000",
                            url: "url",
                            backoffPlan: {
                                type: {
                                    key: "value",
                                },
                                maxRetries: 0,
                                baseDelaySeconds: 1,
                            },
                        },
                    ],
                    toolIds: ["toolIds"],
                    knowledgeBase: {
                        provider: "custom-knowledge-base",
                        server: {
                            timeoutSeconds: 20,
                            credentialId: "550e8400-e29b-41d4-a716-446655440000",
                            backoffPlan: {
                                type: {
                                    key: "value",
                                },
                                maxRetries: 0,
                                baseDelaySeconds: 1,
                            },
                        },
                    },
                    model: "claude-3-opus-20240229",
                    provider: "anthropic",
                    thinking: {
                        type: "enabled",
                        budgetTokens: 1.1,
                    },
                    temperature: 1.1,
                    maxTokens: 1.1,
                    emotionRecognitionEnabled: true,
                    numFastTurns: 1.1,
                },
                voice: {
                    cachingEnabled: true,
                    provider: "azure",
                    voiceId: "andrew",
                    chunkPlan: {
                        enabled: true,
                        minCharacters: 30,
                    },
                    speed: 1.1,
                    fallbackPlan: {
                        voices: [
                            {
                                cachingEnabled: true,
                                provider: "azure",
                                voiceId: "andrew",
                            },
                        ],
                    },
                },
                firstMessage: "Hello! How can I help you today?",
                firstMessageInterruptionsEnabled: true,
                firstMessageMode: "assistant-speaks-first",
                voicemailDetection: {
                    beepMaxAwaitSeconds: 1.1,
                    provider: "google",
                    type: "audio",
                },
                clientMessages: [
                    "conversation-update",
                    "function-call",
                    "hang",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transfer-update",
                    "transcript",
                    "tool-calls",
                    "user-interrupted",
                    "voice-input",
                    "workflow.node.started",
                ],
                serverMessages: [
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                    "transcript[transcriptType='final']",
                ],
                maxDurationSeconds: 600,
                backgroundSound: "off",
                modelOutputInMessagesEnabled: false,
                transportConfigurations: [
                    {
                        provider: "twilio",
                        timeout: 60,
                        record: false,
                    },
                ],
                observabilityPlan: {
                    provider: "langfuse",
                    tags: ["tags"],
                    metadata: {
                        key: "value",
                    },
                },
                credentials: [
                    {
                        provider: "11labs",
                        apiKey: "apiKey",
                    },
                ],
                hooks: [
                    {
                        on: "call.ending",
                        do: [
                            {
                                type: "tool",
                            },
                        ],
                    },
                ],
                name: "name",
                voicemailMessage: "voicemailMessage",
                endCallMessage: "endCallMessage",
                endCallPhrases: ["endCallPhrases"],
                compliancePlan: {
                    hipaaEnabled: true,
                    pciEnabled: true,
                },
                metadata: {
                    key: "value",
                },
                backgroundSpeechDenoisingPlan: {
                    fourierDenoisingPlan: {
                        mediaDetectionEnabled: true,
                        staticThreshold: -35,
                        baselineOffsetDb: -15,
                        windowSizeMs: 3000,
                        baselinePercentile: 85,
                    },
                },
                analysisPlan: {
                    minMessagesThreshold: 1.1,
                    structuredDataMultiPlan: [
                        {
                            key: "key",
                            plan: {},
                        },
                    ],
                    outcomeIds: ["outcomeIds"],
                },
                artifactPlan: {
                    recordingEnabled: true,
                    recordingFormat: "wav;l16",
                    recordingUseCustomStorageEnabled: true,
                    videoRecordingEnabled: false,
                    pcapEnabled: true,
                    pcapS3PathPrefix: "/pcaps",
                    pcapUseCustomStorageEnabled: true,
                    loggingEnabled: true,
                    loggingUseCustomStorageEnabled: true,
                    transcriptPlan: {
                        enabled: true,
                    },
                    recordingPath: "recordingPath",
                    structuredOutputIds: ["structuredOutputIds"],
                    loggingPath: "loggingPath",
                },
                startSpeakingPlan: {
                    waitSeconds: 0.4,
                    smartEndpointingPlan: {
                        provider: "vapi",
                    },
                    customEndpointingRules: [
                        {
                            type: "assistant",
                            regex: "regex",
                            timeoutSeconds: 1.1,
                        },
                    ],
                    transcriptionEndpointingPlan: {
                        onPunctuationSeconds: 0.1,
                        onNoPunctuationSeconds: 1.5,
                        onNumberSeconds: 0.5,
                    },
                },
                stopSpeakingPlan: {
                    numWords: 0,
                    voiceSeconds: 0.2,
                    backoffSeconds: 1,
                    acknowledgementPhrases: [
                        "i understand",
                        "i see",
                        "i got it",
                        "i hear you",
                        "im listening",
                        "im with you",
                        "right",
                        "okay",
                        "ok",
                        "sure",
                        "alright",
                        "got it",
                        "understood",
                        "yeah",
                        "yes",
                        "uh-huh",
                        "mm-hmm",
                        "gotcha",
                        "mhmm",
                        "ah",
                        "yeah okay",
                        "yeah sure",
                    ],
                    interruptionPhrases: [
                        "stop",
                        "shut",
                        "up",
                        "enough",
                        "quiet",
                        "silence",
                        "but",
                        "dont",
                        "not",
                        "no",
                        "hold",
                        "wait",
                        "cut",
                        "pause",
                        "nope",
                        "nah",
                        "nevermind",
                        "never",
                        "bad",
                        "actually",
                    ],
                },
                monitorPlan: {
                    listenEnabled: false,
                    listenAuthenticationEnabled: false,
                    controlEnabled: false,
                    controlAuthenticationEnabled: false,
                },
                credentialIds: ["credentialIds"],
                server: {
                    timeoutSeconds: 20,
                    credentialId: "550e8400-e29b-41d4-a716-446655440000",
                    url: "url",
                    headers: {
                        key: "value",
                    },
                    backoffPlan: {
                        type: {
                            key: "value",
                        },
                        maxRetries: 0,
                        baseDelaySeconds: 1,
                    },
                },
                keypadInputPlan: {
                    enabled: true,
                    timeoutSeconds: 1.1,
                    delimiters: "#",
                },
                id: "id",
                orgId: "orgId",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            transcriber: {
                provider: "assembly-ai",
                language: "en",
                confidenceThreshold: 0.4,
                formatTurns: true,
                endOfTurnConfidenceThreshold: 0.7,
                minEndOfTurnSilenceWhenConfident: 160,
                wordFinalizationMaxWaitTime: 160,
                maxTurnSilence: 400,
                realtimeUrl: "realtimeUrl",
                wordBoost: ["wordBoost"],
                endUtteranceSilenceThreshold: 1.1,
                disablePartialTranscripts: true,
                fallbackPlan: {
                    transcribers: [
                        {
                            provider: "assembly-ai",
                            confidenceThreshold: 0.4,
                            formatTurns: true,
                            endOfTurnConfidenceThreshold: 0.7,
                            minEndOfTurnSilenceWhenConfident: 160,
                            wordFinalizationMaxWaitTime: 160,
                            maxTurnSilence: 400,
                        },
                    ],
                },
            },
            model: {
                messages: [{ role: "assistant" }],
                tools: [
                    {
                        type: "apiRequest",
                        method: "POST",
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        url: "url",
                        backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                    },
                ],
                toolIds: ["toolIds"],
                knowledgeBase: {
                    provider: "custom-knowledge-base",
                    server: {
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                    },
                },
                model: "claude-3-opus-20240229",
                provider: "anthropic",
                thinking: { type: "enabled", budgetTokens: 1.1 },
                temperature: 1.1,
                maxTokens: 1.1,
                emotionRecognitionEnabled: true,
                numFastTurns: 1.1,
            },
            voice: {
                cachingEnabled: true,
                provider: "azure",
                voiceId: "andrew",
                chunkPlan: {
                    enabled: true,
                    minCharacters: 30,
                    punctuationBoundaries: ["。", "，", ".", "!", "?", ";", "،", "۔", "।", "॥", "|", "||", ",", ":"],
                    formatPlan: { enabled: true, numberToDigitsCutoff: 2025 },
                },
                speed: 1.1,
                fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
            },
            firstMessage: "Hello! How can I help you today?",
            firstMessageInterruptionsEnabled: true,
            firstMessageMode: "assistant-speaks-first",
            voicemailDetection: {
                beepMaxAwaitSeconds: 1.1,
                provider: "google",
                backoffPlan: { startAtSeconds: 1.1, frequencySeconds: 1.1, maxRetries: 1.1 },
                type: "audio",
            },
            clientMessages: [
                "conversation-update",
                "function-call",
                "hang",
                "model-output",
                "speech-update",
                "status-update",
                "transfer-update",
                "transcript",
                "tool-calls",
                "user-interrupted",
                "voice-input",
                "workflow.node.started",
            ],
            serverMessages: [
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
            ],
            maxDurationSeconds: 600,
            backgroundSound: "off",
            modelOutputInMessagesEnabled: false,
            transportConfigurations: [{ provider: "twilio", timeout: 60, record: false, recordingChannels: "mono" }],
            observabilityPlan: { provider: "langfuse", tags: ["tags"], metadata: { key: "value" } },
            credentials: [{ provider: "11labs", apiKey: "apiKey", name: "name" }],
            hooks: [
                {
                    on: "call.ending",
                    do: [{ type: "tool" }],
                    filters: [{ type: "oneOf", key: "key", oneOf: ["oneOf"] }],
                },
            ],
            name: "name",
            voicemailMessage: "voicemailMessage",
            endCallMessage: "endCallMessage",
            endCallPhrases: ["endCallPhrases"],
            compliancePlan: {
                hipaaEnabled: true,
                pciEnabled: true,
                securityFilterPlan: {
                    enabled: true,
                    filters: [{}],
                    mode: "sanitize",
                    replacementText: "replacementText",
                },
            },
            metadata: { key: "value" },
            backgroundSpeechDenoisingPlan: {
                smartDenoisingPlan: { enabled: true },
                fourierDenoisingPlan: {
                    enabled: true,
                    mediaDetectionEnabled: true,
                    staticThreshold: -35,
                    baselineOffsetDb: -15,
                    windowSizeMs: 3000,
                    baselinePercentile: 85,
                },
            },
            analysisPlan: {
                minMessagesThreshold: 1.1,
                summaryPlan: { messages: [{ key: "value" }], enabled: true, timeoutSeconds: 1.1 },
                structuredDataPlan: {
                    messages: [{ key: "value" }],
                    enabled: true,
                    schema: { type: "string" },
                    timeoutSeconds: 1.1,
                },
                structuredDataMultiPlan: [{ key: "key", plan: {} }],
                successEvaluationPlan: {
                    rubric: "NumericScale",
                    messages: [{ key: "value" }],
                    enabled: true,
                    timeoutSeconds: 1.1,
                },
                outcomeIds: ["outcomeIds"],
            },
            artifactPlan: {
                recordingEnabled: true,
                recordingFormat: "wav;l16",
                recordingUseCustomStorageEnabled: true,
                videoRecordingEnabled: false,
                pcapEnabled: true,
                pcapS3PathPrefix: "/pcaps",
                pcapUseCustomStorageEnabled: true,
                loggingEnabled: true,
                loggingUseCustomStorageEnabled: true,
                transcriptPlan: { enabled: true, assistantName: "assistantName", userName: "userName" },
                recordingPath: "recordingPath",
                structuredOutputIds: ["structuredOutputIds"],
                loggingPath: "loggingPath",
            },
            startSpeakingPlan: {
                waitSeconds: 0.4,
                smartEndpointingPlan: { provider: "vapi" },
                customEndpointingRules: [{ type: "assistant", regex: "regex", timeoutSeconds: 1.1 }],
                transcriptionEndpointingPlan: {
                    onPunctuationSeconds: 0.1,
                    onNoPunctuationSeconds: 1.5,
                    onNumberSeconds: 0.5,
                },
            },
            stopSpeakingPlan: {
                numWords: 0,
                voiceSeconds: 0.2,
                backoffSeconds: 1,
                acknowledgementPhrases: [
                    "i understand",
                    "i see",
                    "i got it",
                    "i hear you",
                    "im listening",
                    "im with you",
                    "right",
                    "okay",
                    "ok",
                    "sure",
                    "alright",
                    "got it",
                    "understood",
                    "yeah",
                    "yes",
                    "uh-huh",
                    "mm-hmm",
                    "gotcha",
                    "mhmm",
                    "ah",
                    "yeah okay",
                    "yeah sure",
                ],
                interruptionPhrases: [
                    "stop",
                    "shut",
                    "up",
                    "enough",
                    "quiet",
                    "silence",
                    "but",
                    "dont",
                    "not",
                    "no",
                    "hold",
                    "wait",
                    "cut",
                    "pause",
                    "nope",
                    "nah",
                    "nevermind",
                    "never",
                    "bad",
                    "actually",
                ],
            },
            monitorPlan: {
                listenEnabled: false,
                listenAuthenticationEnabled: false,
                controlEnabled: false,
                controlAuthenticationEnabled: false,
            },
            credentialIds: ["credentialIds"],
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: { key: "value" },
                backoffPlan: {
                    type: { key: "value" },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [{ key: "value" }, { key: "value" }, { key: "value" }, { key: "value" }],
                },
            },
            keypadInputPlan: { enabled: true, timeoutSeconds: 1.1, delimiters: "#" },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .post("/assistant")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.assistants.create({});
        expect(response).toEqual({
            transcriber: {
                provider: "assembly-ai",
                language: "en",
                confidenceThreshold: 0.4,
                formatTurns: true,
                endOfTurnConfidenceThreshold: 0.7,
                minEndOfTurnSilenceWhenConfident: 160,
                wordFinalizationMaxWaitTime: 160,
                maxTurnSilence: 400,
                realtimeUrl: "realtimeUrl",
                wordBoost: ["wordBoost"],
                endUtteranceSilenceThreshold: 1.1,
                disablePartialTranscripts: true,
                fallbackPlan: {
                    transcribers: [
                        {
                            provider: "assembly-ai",
                            confidenceThreshold: 0.4,
                            formatTurns: true,
                            endOfTurnConfidenceThreshold: 0.7,
                            minEndOfTurnSilenceWhenConfident: 160,
                            wordFinalizationMaxWaitTime: 160,
                            maxTurnSilence: 400,
                        },
                    ],
                },
            },
            model: {
                messages: [
                    {
                        role: "assistant",
                    },
                ],
                tools: [
                    {
                        type: "apiRequest",
                        method: "POST",
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        url: "url",
                        backoffPlan: {
                            type: {
                                key: "value",
                            },
                            maxRetries: 0,
                            baseDelaySeconds: 1,
                        },
                    },
                ],
                toolIds: ["toolIds"],
                knowledgeBase: {
                    provider: "custom-knowledge-base",
                    server: {
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        backoffPlan: {
                            type: {
                                key: "value",
                            },
                            maxRetries: 0,
                            baseDelaySeconds: 1,
                        },
                    },
                },
                model: "claude-3-opus-20240229",
                provider: "anthropic",
                thinking: {
                    type: "enabled",
                    budgetTokens: 1.1,
                },
                temperature: 1.1,
                maxTokens: 1.1,
                emotionRecognitionEnabled: true,
                numFastTurns: 1.1,
            },
            voice: {
                cachingEnabled: true,
                provider: "azure",
                voiceId: "andrew",
                chunkPlan: {
                    enabled: true,
                    minCharacters: 30,
                    punctuationBoundaries: [
                        "\u3002",
                        "\uFF0C",
                        ".",
                        "!",
                        "?",
                        ";",
                        "\u060C",
                        "\u06D4",
                        "\u0964",
                        "\u0965",
                        "|",
                        "||",
                        ",",
                        ":",
                    ],
                    formatPlan: {
                        enabled: true,
                        numberToDigitsCutoff: 2025,
                    },
                },
                speed: 1.1,
                fallbackPlan: {
                    voices: [
                        {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                        },
                    ],
                },
            },
            firstMessage: "Hello! How can I help you today?",
            firstMessageInterruptionsEnabled: true,
            firstMessageMode: "assistant-speaks-first",
            voicemailDetection: {
                beepMaxAwaitSeconds: 1.1,
                provider: "google",
                backoffPlan: {
                    startAtSeconds: 1.1,
                    frequencySeconds: 1.1,
                    maxRetries: 1.1,
                },
                type: "audio",
            },
            clientMessages: [
                "conversation-update",
                "function-call",
                "hang",
                "model-output",
                "speech-update",
                "status-update",
                "transfer-update",
                "transcript",
                "tool-calls",
                "user-interrupted",
                "voice-input",
                "workflow.node.started",
            ],
            serverMessages: [
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
            ],
            maxDurationSeconds: 600,
            backgroundSound: "off",
            modelOutputInMessagesEnabled: false,
            transportConfigurations: [
                {
                    provider: "twilio",
                    timeout: 60,
                    record: false,
                    recordingChannels: "mono",
                },
            ],
            observabilityPlan: {
                provider: "langfuse",
                tags: ["tags"],
                metadata: {
                    key: "value",
                },
            },
            credentials: [
                {
                    provider: "11labs",
                    apiKey: "apiKey",
                    name: "name",
                },
            ],
            hooks: [
                {
                    on: "call.ending",
                    do: [
                        {
                            type: "tool",
                        },
                    ],
                    filters: [
                        {
                            type: "oneOf",
                            key: "key",
                            oneOf: ["oneOf"],
                        },
                    ],
                },
            ],
            name: "name",
            voicemailMessage: "voicemailMessage",
            endCallMessage: "endCallMessage",
            endCallPhrases: ["endCallPhrases"],
            compliancePlan: {
                hipaaEnabled: true,
                pciEnabled: true,
                securityFilterPlan: {
                    enabled: true,
                    filters: [{}],
                    mode: "sanitize",
                    replacementText: "replacementText",
                },
            },
            metadata: {
                key: "value",
            },
            backgroundSpeechDenoisingPlan: {
                smartDenoisingPlan: {
                    enabled: true,
                },
                fourierDenoisingPlan: {
                    enabled: true,
                    mediaDetectionEnabled: true,
                    staticThreshold: -35,
                    baselineOffsetDb: -15,
                    windowSizeMs: 3000,
                    baselinePercentile: 85,
                },
            },
            analysisPlan: {
                minMessagesThreshold: 1.1,
                summaryPlan: {
                    messages: [
                        {
                            key: "value",
                        },
                    ],
                    enabled: true,
                    timeoutSeconds: 1.1,
                },
                structuredDataPlan: {
                    messages: [
                        {
                            key: "value",
                        },
                    ],
                    enabled: true,
                    schema: {
                        type: "string",
                    },
                    timeoutSeconds: 1.1,
                },
                structuredDataMultiPlan: [
                    {
                        key: "key",
                        plan: {},
                    },
                ],
                successEvaluationPlan: {
                    rubric: "NumericScale",
                    messages: [
                        {
                            key: "value",
                        },
                    ],
                    enabled: true,
                    timeoutSeconds: 1.1,
                },
                outcomeIds: ["outcomeIds"],
            },
            artifactPlan: {
                recordingEnabled: true,
                recordingFormat: "wav;l16",
                recordingUseCustomStorageEnabled: true,
                videoRecordingEnabled: false,
                pcapEnabled: true,
                pcapS3PathPrefix: "/pcaps",
                pcapUseCustomStorageEnabled: true,
                loggingEnabled: true,
                loggingUseCustomStorageEnabled: true,
                transcriptPlan: {
                    enabled: true,
                    assistantName: "assistantName",
                    userName: "userName",
                },
                recordingPath: "recordingPath",
                structuredOutputIds: ["structuredOutputIds"],
                loggingPath: "loggingPath",
            },
            startSpeakingPlan: {
                waitSeconds: 0.4,
                smartEndpointingPlan: {
                    provider: "vapi",
                },
                customEndpointingRules: [
                    {
                        type: "assistant",
                        regex: "regex",
                        timeoutSeconds: 1.1,
                    },
                ],
                transcriptionEndpointingPlan: {
                    onPunctuationSeconds: 0.1,
                    onNoPunctuationSeconds: 1.5,
                    onNumberSeconds: 0.5,
                },
            },
            stopSpeakingPlan: {
                numWords: 0,
                voiceSeconds: 0.2,
                backoffSeconds: 1,
                acknowledgementPhrases: [
                    "i understand",
                    "i see",
                    "i got it",
                    "i hear you",
                    "im listening",
                    "im with you",
                    "right",
                    "okay",
                    "ok",
                    "sure",
                    "alright",
                    "got it",
                    "understood",
                    "yeah",
                    "yes",
                    "uh-huh",
                    "mm-hmm",
                    "gotcha",
                    "mhmm",
                    "ah",
                    "yeah okay",
                    "yeah sure",
                ],
                interruptionPhrases: [
                    "stop",
                    "shut",
                    "up",
                    "enough",
                    "quiet",
                    "silence",
                    "but",
                    "dont",
                    "not",
                    "no",
                    "hold",
                    "wait",
                    "cut",
                    "pause",
                    "nope",
                    "nah",
                    "nevermind",
                    "never",
                    "bad",
                    "actually",
                ],
            },
            monitorPlan: {
                listenEnabled: false,
                listenAuthenticationEnabled: false,
                controlEnabled: false,
                controlAuthenticationEnabled: false,
            },
            credentialIds: ["credentialIds"],
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: {
                    key: "value",
                },
                backoffPlan: {
                    type: {
                        key: "value",
                    },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                    ],
                },
            },
            keypadInputPlan: {
                enabled: true,
                timeoutSeconds: 1.1,
                delimiters: "#",
            },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            transcriber: {
                provider: "assembly-ai",
                language: "en",
                confidenceThreshold: 0.4,
                formatTurns: true,
                endOfTurnConfidenceThreshold: 0.7,
                minEndOfTurnSilenceWhenConfident: 160,
                wordFinalizationMaxWaitTime: 160,
                maxTurnSilence: 400,
                realtimeUrl: "realtimeUrl",
                wordBoost: ["wordBoost"],
                endUtteranceSilenceThreshold: 1.1,
                disablePartialTranscripts: true,
                fallbackPlan: {
                    transcribers: [
                        {
                            provider: "assembly-ai",
                            confidenceThreshold: 0.4,
                            formatTurns: true,
                            endOfTurnConfidenceThreshold: 0.7,
                            minEndOfTurnSilenceWhenConfident: 160,
                            wordFinalizationMaxWaitTime: 160,
                            maxTurnSilence: 400,
                        },
                    ],
                },
            },
            model: {
                messages: [{ role: "assistant" }],
                tools: [
                    {
                        type: "apiRequest",
                        method: "POST",
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        url: "url",
                        backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                    },
                ],
                toolIds: ["toolIds"],
                knowledgeBase: {
                    provider: "custom-knowledge-base",
                    server: {
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                    },
                },
                model: "claude-3-opus-20240229",
                provider: "anthropic",
                thinking: { type: "enabled", budgetTokens: 1.1 },
                temperature: 1.1,
                maxTokens: 1.1,
                emotionRecognitionEnabled: true,
                numFastTurns: 1.1,
            },
            voice: {
                cachingEnabled: true,
                provider: "azure",
                voiceId: "andrew",
                chunkPlan: {
                    enabled: true,
                    minCharacters: 30,
                    punctuationBoundaries: ["。", "，", ".", "!", "?", ";", "،", "۔", "।", "॥", "|", "||", ",", ":"],
                    formatPlan: { enabled: true, numberToDigitsCutoff: 2025 },
                },
                speed: 1.1,
                fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
            },
            firstMessage: "Hello! How can I help you today?",
            firstMessageInterruptionsEnabled: true,
            firstMessageMode: "assistant-speaks-first",
            voicemailDetection: {
                beepMaxAwaitSeconds: 1.1,
                provider: "google",
                backoffPlan: { startAtSeconds: 1.1, frequencySeconds: 1.1, maxRetries: 1.1 },
                type: "audio",
            },
            clientMessages: [
                "conversation-update",
                "function-call",
                "hang",
                "model-output",
                "speech-update",
                "status-update",
                "transfer-update",
                "transcript",
                "tool-calls",
                "user-interrupted",
                "voice-input",
                "workflow.node.started",
            ],
            serverMessages: [
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
            ],
            maxDurationSeconds: 600,
            backgroundSound: "off",
            modelOutputInMessagesEnabled: false,
            transportConfigurations: [{ provider: "twilio", timeout: 60, record: false, recordingChannels: "mono" }],
            observabilityPlan: { provider: "langfuse", tags: ["tags"], metadata: { key: "value" } },
            credentials: [{ provider: "11labs", apiKey: "apiKey", name: "name" }],
            hooks: [
                {
                    on: "call.ending",
                    do: [{ type: "tool" }],
                    filters: [{ type: "oneOf", key: "key", oneOf: ["oneOf"] }],
                },
            ],
            name: "name",
            voicemailMessage: "voicemailMessage",
            endCallMessage: "endCallMessage",
            endCallPhrases: ["endCallPhrases"],
            compliancePlan: {
                hipaaEnabled: true,
                pciEnabled: true,
                securityFilterPlan: {
                    enabled: true,
                    filters: [{}],
                    mode: "sanitize",
                    replacementText: "replacementText",
                },
            },
            metadata: { key: "value" },
            backgroundSpeechDenoisingPlan: {
                smartDenoisingPlan: { enabled: true },
                fourierDenoisingPlan: {
                    enabled: true,
                    mediaDetectionEnabled: true,
                    staticThreshold: -35,
                    baselineOffsetDb: -15,
                    windowSizeMs: 3000,
                    baselinePercentile: 85,
                },
            },
            analysisPlan: {
                minMessagesThreshold: 1.1,
                summaryPlan: { messages: [{ key: "value" }], enabled: true, timeoutSeconds: 1.1 },
                structuredDataPlan: {
                    messages: [{ key: "value" }],
                    enabled: true,
                    schema: { type: "string" },
                    timeoutSeconds: 1.1,
                },
                structuredDataMultiPlan: [{ key: "key", plan: {} }],
                successEvaluationPlan: {
                    rubric: "NumericScale",
                    messages: [{ key: "value" }],
                    enabled: true,
                    timeoutSeconds: 1.1,
                },
                outcomeIds: ["outcomeIds"],
            },
            artifactPlan: {
                recordingEnabled: true,
                recordingFormat: "wav;l16",
                recordingUseCustomStorageEnabled: true,
                videoRecordingEnabled: false,
                pcapEnabled: true,
                pcapS3PathPrefix: "/pcaps",
                pcapUseCustomStorageEnabled: true,
                loggingEnabled: true,
                loggingUseCustomStorageEnabled: true,
                transcriptPlan: { enabled: true, assistantName: "assistantName", userName: "userName" },
                recordingPath: "recordingPath",
                structuredOutputIds: ["structuredOutputIds"],
                loggingPath: "loggingPath",
            },
            startSpeakingPlan: {
                waitSeconds: 0.4,
                smartEndpointingPlan: { provider: "vapi" },
                customEndpointingRules: [{ type: "assistant", regex: "regex", timeoutSeconds: 1.1 }],
                transcriptionEndpointingPlan: {
                    onPunctuationSeconds: 0.1,
                    onNoPunctuationSeconds: 1.5,
                    onNumberSeconds: 0.5,
                },
            },
            stopSpeakingPlan: {
                numWords: 0,
                voiceSeconds: 0.2,
                backoffSeconds: 1,
                acknowledgementPhrases: [
                    "i understand",
                    "i see",
                    "i got it",
                    "i hear you",
                    "im listening",
                    "im with you",
                    "right",
                    "okay",
                    "ok",
                    "sure",
                    "alright",
                    "got it",
                    "understood",
                    "yeah",
                    "yes",
                    "uh-huh",
                    "mm-hmm",
                    "gotcha",
                    "mhmm",
                    "ah",
                    "yeah okay",
                    "yeah sure",
                ],
                interruptionPhrases: [
                    "stop",
                    "shut",
                    "up",
                    "enough",
                    "quiet",
                    "silence",
                    "but",
                    "dont",
                    "not",
                    "no",
                    "hold",
                    "wait",
                    "cut",
                    "pause",
                    "nope",
                    "nah",
                    "nevermind",
                    "never",
                    "bad",
                    "actually",
                ],
            },
            monitorPlan: {
                listenEnabled: false,
                listenAuthenticationEnabled: false,
                controlEnabled: false,
                controlAuthenticationEnabled: false,
            },
            credentialIds: ["credentialIds"],
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: { key: "value" },
                backoffPlan: {
                    type: { key: "value" },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [{ key: "value" }, { key: "value" }, { key: "value" }, { key: "value" }],
                },
            },
            keypadInputPlan: { enabled: true, timeoutSeconds: 1.1, delimiters: "#" },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
        };
        server.mockEndpoint().get("/assistant/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.assistants.get("id");
        expect(response).toEqual({
            transcriber: {
                provider: "assembly-ai",
                language: "en",
                confidenceThreshold: 0.4,
                formatTurns: true,
                endOfTurnConfidenceThreshold: 0.7,
                minEndOfTurnSilenceWhenConfident: 160,
                wordFinalizationMaxWaitTime: 160,
                maxTurnSilence: 400,
                realtimeUrl: "realtimeUrl",
                wordBoost: ["wordBoost"],
                endUtteranceSilenceThreshold: 1.1,
                disablePartialTranscripts: true,
                fallbackPlan: {
                    transcribers: [
                        {
                            provider: "assembly-ai",
                            confidenceThreshold: 0.4,
                            formatTurns: true,
                            endOfTurnConfidenceThreshold: 0.7,
                            minEndOfTurnSilenceWhenConfident: 160,
                            wordFinalizationMaxWaitTime: 160,
                            maxTurnSilence: 400,
                        },
                    ],
                },
            },
            model: {
                messages: [
                    {
                        role: "assistant",
                    },
                ],
                tools: [
                    {
                        type: "apiRequest",
                        method: "POST",
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        url: "url",
                        backoffPlan: {
                            type: {
                                key: "value",
                            },
                            maxRetries: 0,
                            baseDelaySeconds: 1,
                        },
                    },
                ],
                toolIds: ["toolIds"],
                knowledgeBase: {
                    provider: "custom-knowledge-base",
                    server: {
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        backoffPlan: {
                            type: {
                                key: "value",
                            },
                            maxRetries: 0,
                            baseDelaySeconds: 1,
                        },
                    },
                },
                model: "claude-3-opus-20240229",
                provider: "anthropic",
                thinking: {
                    type: "enabled",
                    budgetTokens: 1.1,
                },
                temperature: 1.1,
                maxTokens: 1.1,
                emotionRecognitionEnabled: true,
                numFastTurns: 1.1,
            },
            voice: {
                cachingEnabled: true,
                provider: "azure",
                voiceId: "andrew",
                chunkPlan: {
                    enabled: true,
                    minCharacters: 30,
                    punctuationBoundaries: [
                        "\u3002",
                        "\uFF0C",
                        ".",
                        "!",
                        "?",
                        ";",
                        "\u060C",
                        "\u06D4",
                        "\u0964",
                        "\u0965",
                        "|",
                        "||",
                        ",",
                        ":",
                    ],
                    formatPlan: {
                        enabled: true,
                        numberToDigitsCutoff: 2025,
                    },
                },
                speed: 1.1,
                fallbackPlan: {
                    voices: [
                        {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                        },
                    ],
                },
            },
            firstMessage: "Hello! How can I help you today?",
            firstMessageInterruptionsEnabled: true,
            firstMessageMode: "assistant-speaks-first",
            voicemailDetection: {
                beepMaxAwaitSeconds: 1.1,
                provider: "google",
                backoffPlan: {
                    startAtSeconds: 1.1,
                    frequencySeconds: 1.1,
                    maxRetries: 1.1,
                },
                type: "audio",
            },
            clientMessages: [
                "conversation-update",
                "function-call",
                "hang",
                "model-output",
                "speech-update",
                "status-update",
                "transfer-update",
                "transcript",
                "tool-calls",
                "user-interrupted",
                "voice-input",
                "workflow.node.started",
            ],
            serverMessages: [
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
            ],
            maxDurationSeconds: 600,
            backgroundSound: "off",
            modelOutputInMessagesEnabled: false,
            transportConfigurations: [
                {
                    provider: "twilio",
                    timeout: 60,
                    record: false,
                    recordingChannels: "mono",
                },
            ],
            observabilityPlan: {
                provider: "langfuse",
                tags: ["tags"],
                metadata: {
                    key: "value",
                },
            },
            credentials: [
                {
                    provider: "11labs",
                    apiKey: "apiKey",
                    name: "name",
                },
            ],
            hooks: [
                {
                    on: "call.ending",
                    do: [
                        {
                            type: "tool",
                        },
                    ],
                    filters: [
                        {
                            type: "oneOf",
                            key: "key",
                            oneOf: ["oneOf"],
                        },
                    ],
                },
            ],
            name: "name",
            voicemailMessage: "voicemailMessage",
            endCallMessage: "endCallMessage",
            endCallPhrases: ["endCallPhrases"],
            compliancePlan: {
                hipaaEnabled: true,
                pciEnabled: true,
                securityFilterPlan: {
                    enabled: true,
                    filters: [{}],
                    mode: "sanitize",
                    replacementText: "replacementText",
                },
            },
            metadata: {
                key: "value",
            },
            backgroundSpeechDenoisingPlan: {
                smartDenoisingPlan: {
                    enabled: true,
                },
                fourierDenoisingPlan: {
                    enabled: true,
                    mediaDetectionEnabled: true,
                    staticThreshold: -35,
                    baselineOffsetDb: -15,
                    windowSizeMs: 3000,
                    baselinePercentile: 85,
                },
            },
            analysisPlan: {
                minMessagesThreshold: 1.1,
                summaryPlan: {
                    messages: [
                        {
                            key: "value",
                        },
                    ],
                    enabled: true,
                    timeoutSeconds: 1.1,
                },
                structuredDataPlan: {
                    messages: [
                        {
                            key: "value",
                        },
                    ],
                    enabled: true,
                    schema: {
                        type: "string",
                    },
                    timeoutSeconds: 1.1,
                },
                structuredDataMultiPlan: [
                    {
                        key: "key",
                        plan: {},
                    },
                ],
                successEvaluationPlan: {
                    rubric: "NumericScale",
                    messages: [
                        {
                            key: "value",
                        },
                    ],
                    enabled: true,
                    timeoutSeconds: 1.1,
                },
                outcomeIds: ["outcomeIds"],
            },
            artifactPlan: {
                recordingEnabled: true,
                recordingFormat: "wav;l16",
                recordingUseCustomStorageEnabled: true,
                videoRecordingEnabled: false,
                pcapEnabled: true,
                pcapS3PathPrefix: "/pcaps",
                pcapUseCustomStorageEnabled: true,
                loggingEnabled: true,
                loggingUseCustomStorageEnabled: true,
                transcriptPlan: {
                    enabled: true,
                    assistantName: "assistantName",
                    userName: "userName",
                },
                recordingPath: "recordingPath",
                structuredOutputIds: ["structuredOutputIds"],
                loggingPath: "loggingPath",
            },
            startSpeakingPlan: {
                waitSeconds: 0.4,
                smartEndpointingPlan: {
                    provider: "vapi",
                },
                customEndpointingRules: [
                    {
                        type: "assistant",
                        regex: "regex",
                        timeoutSeconds: 1.1,
                    },
                ],
                transcriptionEndpointingPlan: {
                    onPunctuationSeconds: 0.1,
                    onNoPunctuationSeconds: 1.5,
                    onNumberSeconds: 0.5,
                },
            },
            stopSpeakingPlan: {
                numWords: 0,
                voiceSeconds: 0.2,
                backoffSeconds: 1,
                acknowledgementPhrases: [
                    "i understand",
                    "i see",
                    "i got it",
                    "i hear you",
                    "im listening",
                    "im with you",
                    "right",
                    "okay",
                    "ok",
                    "sure",
                    "alright",
                    "got it",
                    "understood",
                    "yeah",
                    "yes",
                    "uh-huh",
                    "mm-hmm",
                    "gotcha",
                    "mhmm",
                    "ah",
                    "yeah okay",
                    "yeah sure",
                ],
                interruptionPhrases: [
                    "stop",
                    "shut",
                    "up",
                    "enough",
                    "quiet",
                    "silence",
                    "but",
                    "dont",
                    "not",
                    "no",
                    "hold",
                    "wait",
                    "cut",
                    "pause",
                    "nope",
                    "nah",
                    "nevermind",
                    "never",
                    "bad",
                    "actually",
                ],
            },
            monitorPlan: {
                listenEnabled: false,
                listenAuthenticationEnabled: false,
                controlEnabled: false,
                controlAuthenticationEnabled: false,
            },
            credentialIds: ["credentialIds"],
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: {
                    key: "value",
                },
                backoffPlan: {
                    type: {
                        key: "value",
                    },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                    ],
                },
            },
            keypadInputPlan: {
                enabled: true,
                timeoutSeconds: 1.1,
                delimiters: "#",
            },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            transcriber: {
                provider: "assembly-ai",
                language: "en",
                confidenceThreshold: 0.4,
                formatTurns: true,
                endOfTurnConfidenceThreshold: 0.7,
                minEndOfTurnSilenceWhenConfident: 160,
                wordFinalizationMaxWaitTime: 160,
                maxTurnSilence: 400,
                realtimeUrl: "realtimeUrl",
                wordBoost: ["wordBoost"],
                endUtteranceSilenceThreshold: 1.1,
                disablePartialTranscripts: true,
                fallbackPlan: {
                    transcribers: [
                        {
                            provider: "assembly-ai",
                            confidenceThreshold: 0.4,
                            formatTurns: true,
                            endOfTurnConfidenceThreshold: 0.7,
                            minEndOfTurnSilenceWhenConfident: 160,
                            wordFinalizationMaxWaitTime: 160,
                            maxTurnSilence: 400,
                        },
                    ],
                },
            },
            model: {
                messages: [{ role: "assistant" }],
                tools: [
                    {
                        type: "apiRequest",
                        method: "POST",
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        url: "url",
                        backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                    },
                ],
                toolIds: ["toolIds"],
                knowledgeBase: {
                    provider: "custom-knowledge-base",
                    server: {
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                    },
                },
                model: "claude-3-opus-20240229",
                provider: "anthropic",
                thinking: { type: "enabled", budgetTokens: 1.1 },
                temperature: 1.1,
                maxTokens: 1.1,
                emotionRecognitionEnabled: true,
                numFastTurns: 1.1,
            },
            voice: {
                cachingEnabled: true,
                provider: "azure",
                voiceId: "andrew",
                chunkPlan: {
                    enabled: true,
                    minCharacters: 30,
                    punctuationBoundaries: ["。", "，", ".", "!", "?", ";", "،", "۔", "।", "॥", "|", "||", ",", ":"],
                    formatPlan: { enabled: true, numberToDigitsCutoff: 2025 },
                },
                speed: 1.1,
                fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
            },
            firstMessage: "Hello! How can I help you today?",
            firstMessageInterruptionsEnabled: true,
            firstMessageMode: "assistant-speaks-first",
            voicemailDetection: {
                beepMaxAwaitSeconds: 1.1,
                provider: "google",
                backoffPlan: { startAtSeconds: 1.1, frequencySeconds: 1.1, maxRetries: 1.1 },
                type: "audio",
            },
            clientMessages: [
                "conversation-update",
                "function-call",
                "hang",
                "model-output",
                "speech-update",
                "status-update",
                "transfer-update",
                "transcript",
                "tool-calls",
                "user-interrupted",
                "voice-input",
                "workflow.node.started",
            ],
            serverMessages: [
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
            ],
            maxDurationSeconds: 600,
            backgroundSound: "off",
            modelOutputInMessagesEnabled: false,
            transportConfigurations: [{ provider: "twilio", timeout: 60, record: false, recordingChannels: "mono" }],
            observabilityPlan: { provider: "langfuse", tags: ["tags"], metadata: { key: "value" } },
            credentials: [{ provider: "11labs", apiKey: "apiKey", name: "name" }],
            hooks: [
                {
                    on: "call.ending",
                    do: [{ type: "tool" }],
                    filters: [{ type: "oneOf", key: "key", oneOf: ["oneOf"] }],
                },
            ],
            name: "name",
            voicemailMessage: "voicemailMessage",
            endCallMessage: "endCallMessage",
            endCallPhrases: ["endCallPhrases"],
            compliancePlan: {
                hipaaEnabled: true,
                pciEnabled: true,
                securityFilterPlan: {
                    enabled: true,
                    filters: [{}],
                    mode: "sanitize",
                    replacementText: "replacementText",
                },
            },
            metadata: { key: "value" },
            backgroundSpeechDenoisingPlan: {
                smartDenoisingPlan: { enabled: true },
                fourierDenoisingPlan: {
                    enabled: true,
                    mediaDetectionEnabled: true,
                    staticThreshold: -35,
                    baselineOffsetDb: -15,
                    windowSizeMs: 3000,
                    baselinePercentile: 85,
                },
            },
            analysisPlan: {
                minMessagesThreshold: 1.1,
                summaryPlan: { messages: [{ key: "value" }], enabled: true, timeoutSeconds: 1.1 },
                structuredDataPlan: {
                    messages: [{ key: "value" }],
                    enabled: true,
                    schema: { type: "string" },
                    timeoutSeconds: 1.1,
                },
                structuredDataMultiPlan: [{ key: "key", plan: {} }],
                successEvaluationPlan: {
                    rubric: "NumericScale",
                    messages: [{ key: "value" }],
                    enabled: true,
                    timeoutSeconds: 1.1,
                },
                outcomeIds: ["outcomeIds"],
            },
            artifactPlan: {
                recordingEnabled: true,
                recordingFormat: "wav;l16",
                recordingUseCustomStorageEnabled: true,
                videoRecordingEnabled: false,
                pcapEnabled: true,
                pcapS3PathPrefix: "/pcaps",
                pcapUseCustomStorageEnabled: true,
                loggingEnabled: true,
                loggingUseCustomStorageEnabled: true,
                transcriptPlan: { enabled: true, assistantName: "assistantName", userName: "userName" },
                recordingPath: "recordingPath",
                structuredOutputIds: ["structuredOutputIds"],
                loggingPath: "loggingPath",
            },
            startSpeakingPlan: {
                waitSeconds: 0.4,
                smartEndpointingPlan: { provider: "vapi" },
                customEndpointingRules: [{ type: "assistant", regex: "regex", timeoutSeconds: 1.1 }],
                transcriptionEndpointingPlan: {
                    onPunctuationSeconds: 0.1,
                    onNoPunctuationSeconds: 1.5,
                    onNumberSeconds: 0.5,
                },
            },
            stopSpeakingPlan: {
                numWords: 0,
                voiceSeconds: 0.2,
                backoffSeconds: 1,
                acknowledgementPhrases: [
                    "i understand",
                    "i see",
                    "i got it",
                    "i hear you",
                    "im listening",
                    "im with you",
                    "right",
                    "okay",
                    "ok",
                    "sure",
                    "alright",
                    "got it",
                    "understood",
                    "yeah",
                    "yes",
                    "uh-huh",
                    "mm-hmm",
                    "gotcha",
                    "mhmm",
                    "ah",
                    "yeah okay",
                    "yeah sure",
                ],
                interruptionPhrases: [
                    "stop",
                    "shut",
                    "up",
                    "enough",
                    "quiet",
                    "silence",
                    "but",
                    "dont",
                    "not",
                    "no",
                    "hold",
                    "wait",
                    "cut",
                    "pause",
                    "nope",
                    "nah",
                    "nevermind",
                    "never",
                    "bad",
                    "actually",
                ],
            },
            monitorPlan: {
                listenEnabled: false,
                listenAuthenticationEnabled: false,
                controlEnabled: false,
                controlAuthenticationEnabled: false,
            },
            credentialIds: ["credentialIds"],
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: { key: "value" },
                backoffPlan: {
                    type: { key: "value" },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [{ key: "value" }, { key: "value" }, { key: "value" }, { key: "value" }],
                },
            },
            keypadInputPlan: { enabled: true, timeoutSeconds: 1.1, delimiters: "#" },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
        };
        server.mockEndpoint().delete("/assistant/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.assistants.delete("id");
        expect(response).toEqual({
            transcriber: {
                provider: "assembly-ai",
                language: "en",
                confidenceThreshold: 0.4,
                formatTurns: true,
                endOfTurnConfidenceThreshold: 0.7,
                minEndOfTurnSilenceWhenConfident: 160,
                wordFinalizationMaxWaitTime: 160,
                maxTurnSilence: 400,
                realtimeUrl: "realtimeUrl",
                wordBoost: ["wordBoost"],
                endUtteranceSilenceThreshold: 1.1,
                disablePartialTranscripts: true,
                fallbackPlan: {
                    transcribers: [
                        {
                            provider: "assembly-ai",
                            confidenceThreshold: 0.4,
                            formatTurns: true,
                            endOfTurnConfidenceThreshold: 0.7,
                            minEndOfTurnSilenceWhenConfident: 160,
                            wordFinalizationMaxWaitTime: 160,
                            maxTurnSilence: 400,
                        },
                    ],
                },
            },
            model: {
                messages: [
                    {
                        role: "assistant",
                    },
                ],
                tools: [
                    {
                        type: "apiRequest",
                        method: "POST",
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        url: "url",
                        backoffPlan: {
                            type: {
                                key: "value",
                            },
                            maxRetries: 0,
                            baseDelaySeconds: 1,
                        },
                    },
                ],
                toolIds: ["toolIds"],
                knowledgeBase: {
                    provider: "custom-knowledge-base",
                    server: {
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        backoffPlan: {
                            type: {
                                key: "value",
                            },
                            maxRetries: 0,
                            baseDelaySeconds: 1,
                        },
                    },
                },
                model: "claude-3-opus-20240229",
                provider: "anthropic",
                thinking: {
                    type: "enabled",
                    budgetTokens: 1.1,
                },
                temperature: 1.1,
                maxTokens: 1.1,
                emotionRecognitionEnabled: true,
                numFastTurns: 1.1,
            },
            voice: {
                cachingEnabled: true,
                provider: "azure",
                voiceId: "andrew",
                chunkPlan: {
                    enabled: true,
                    minCharacters: 30,
                    punctuationBoundaries: [
                        "\u3002",
                        "\uFF0C",
                        ".",
                        "!",
                        "?",
                        ";",
                        "\u060C",
                        "\u06D4",
                        "\u0964",
                        "\u0965",
                        "|",
                        "||",
                        ",",
                        ":",
                    ],
                    formatPlan: {
                        enabled: true,
                        numberToDigitsCutoff: 2025,
                    },
                },
                speed: 1.1,
                fallbackPlan: {
                    voices: [
                        {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                        },
                    ],
                },
            },
            firstMessage: "Hello! How can I help you today?",
            firstMessageInterruptionsEnabled: true,
            firstMessageMode: "assistant-speaks-first",
            voicemailDetection: {
                beepMaxAwaitSeconds: 1.1,
                provider: "google",
                backoffPlan: {
                    startAtSeconds: 1.1,
                    frequencySeconds: 1.1,
                    maxRetries: 1.1,
                },
                type: "audio",
            },
            clientMessages: [
                "conversation-update",
                "function-call",
                "hang",
                "model-output",
                "speech-update",
                "status-update",
                "transfer-update",
                "transcript",
                "tool-calls",
                "user-interrupted",
                "voice-input",
                "workflow.node.started",
            ],
            serverMessages: [
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
            ],
            maxDurationSeconds: 600,
            backgroundSound: "off",
            modelOutputInMessagesEnabled: false,
            transportConfigurations: [
                {
                    provider: "twilio",
                    timeout: 60,
                    record: false,
                    recordingChannels: "mono",
                },
            ],
            observabilityPlan: {
                provider: "langfuse",
                tags: ["tags"],
                metadata: {
                    key: "value",
                },
            },
            credentials: [
                {
                    provider: "11labs",
                    apiKey: "apiKey",
                    name: "name",
                },
            ],
            hooks: [
                {
                    on: "call.ending",
                    do: [
                        {
                            type: "tool",
                        },
                    ],
                    filters: [
                        {
                            type: "oneOf",
                            key: "key",
                            oneOf: ["oneOf"],
                        },
                    ],
                },
            ],
            name: "name",
            voicemailMessage: "voicemailMessage",
            endCallMessage: "endCallMessage",
            endCallPhrases: ["endCallPhrases"],
            compliancePlan: {
                hipaaEnabled: true,
                pciEnabled: true,
                securityFilterPlan: {
                    enabled: true,
                    filters: [{}],
                    mode: "sanitize",
                    replacementText: "replacementText",
                },
            },
            metadata: {
                key: "value",
            },
            backgroundSpeechDenoisingPlan: {
                smartDenoisingPlan: {
                    enabled: true,
                },
                fourierDenoisingPlan: {
                    enabled: true,
                    mediaDetectionEnabled: true,
                    staticThreshold: -35,
                    baselineOffsetDb: -15,
                    windowSizeMs: 3000,
                    baselinePercentile: 85,
                },
            },
            analysisPlan: {
                minMessagesThreshold: 1.1,
                summaryPlan: {
                    messages: [
                        {
                            key: "value",
                        },
                    ],
                    enabled: true,
                    timeoutSeconds: 1.1,
                },
                structuredDataPlan: {
                    messages: [
                        {
                            key: "value",
                        },
                    ],
                    enabled: true,
                    schema: {
                        type: "string",
                    },
                    timeoutSeconds: 1.1,
                },
                structuredDataMultiPlan: [
                    {
                        key: "key",
                        plan: {},
                    },
                ],
                successEvaluationPlan: {
                    rubric: "NumericScale",
                    messages: [
                        {
                            key: "value",
                        },
                    ],
                    enabled: true,
                    timeoutSeconds: 1.1,
                },
                outcomeIds: ["outcomeIds"],
            },
            artifactPlan: {
                recordingEnabled: true,
                recordingFormat: "wav;l16",
                recordingUseCustomStorageEnabled: true,
                videoRecordingEnabled: false,
                pcapEnabled: true,
                pcapS3PathPrefix: "/pcaps",
                pcapUseCustomStorageEnabled: true,
                loggingEnabled: true,
                loggingUseCustomStorageEnabled: true,
                transcriptPlan: {
                    enabled: true,
                    assistantName: "assistantName",
                    userName: "userName",
                },
                recordingPath: "recordingPath",
                structuredOutputIds: ["structuredOutputIds"],
                loggingPath: "loggingPath",
            },
            startSpeakingPlan: {
                waitSeconds: 0.4,
                smartEndpointingPlan: {
                    provider: "vapi",
                },
                customEndpointingRules: [
                    {
                        type: "assistant",
                        regex: "regex",
                        timeoutSeconds: 1.1,
                    },
                ],
                transcriptionEndpointingPlan: {
                    onPunctuationSeconds: 0.1,
                    onNoPunctuationSeconds: 1.5,
                    onNumberSeconds: 0.5,
                },
            },
            stopSpeakingPlan: {
                numWords: 0,
                voiceSeconds: 0.2,
                backoffSeconds: 1,
                acknowledgementPhrases: [
                    "i understand",
                    "i see",
                    "i got it",
                    "i hear you",
                    "im listening",
                    "im with you",
                    "right",
                    "okay",
                    "ok",
                    "sure",
                    "alright",
                    "got it",
                    "understood",
                    "yeah",
                    "yes",
                    "uh-huh",
                    "mm-hmm",
                    "gotcha",
                    "mhmm",
                    "ah",
                    "yeah okay",
                    "yeah sure",
                ],
                interruptionPhrases: [
                    "stop",
                    "shut",
                    "up",
                    "enough",
                    "quiet",
                    "silence",
                    "but",
                    "dont",
                    "not",
                    "no",
                    "hold",
                    "wait",
                    "cut",
                    "pause",
                    "nope",
                    "nah",
                    "nevermind",
                    "never",
                    "bad",
                    "actually",
                ],
            },
            monitorPlan: {
                listenEnabled: false,
                listenAuthenticationEnabled: false,
                controlEnabled: false,
                controlAuthenticationEnabled: false,
            },
            credentialIds: ["credentialIds"],
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: {
                    key: "value",
                },
                backoffPlan: {
                    type: {
                        key: "value",
                    },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                    ],
                },
            },
            keypadInputPlan: {
                enabled: true,
                timeoutSeconds: 1.1,
                delimiters: "#",
            },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            transcriber: {
                provider: "assembly-ai",
                language: "en",
                confidenceThreshold: 0.4,
                formatTurns: true,
                endOfTurnConfidenceThreshold: 0.7,
                minEndOfTurnSilenceWhenConfident: 160,
                wordFinalizationMaxWaitTime: 160,
                maxTurnSilence: 400,
                realtimeUrl: "realtimeUrl",
                wordBoost: ["wordBoost"],
                endUtteranceSilenceThreshold: 1.1,
                disablePartialTranscripts: true,
                fallbackPlan: {
                    transcribers: [
                        {
                            provider: "assembly-ai",
                            confidenceThreshold: 0.4,
                            formatTurns: true,
                            endOfTurnConfidenceThreshold: 0.7,
                            minEndOfTurnSilenceWhenConfident: 160,
                            wordFinalizationMaxWaitTime: 160,
                            maxTurnSilence: 400,
                        },
                    ],
                },
            },
            model: {
                messages: [{ role: "assistant" }],
                tools: [
                    {
                        type: "apiRequest",
                        method: "POST",
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        url: "url",
                        backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                    },
                ],
                toolIds: ["toolIds"],
                knowledgeBase: {
                    provider: "custom-knowledge-base",
                    server: {
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                    },
                },
                model: "claude-3-opus-20240229",
                provider: "anthropic",
                thinking: { type: "enabled", budgetTokens: 1.1 },
                temperature: 1.1,
                maxTokens: 1.1,
                emotionRecognitionEnabled: true,
                numFastTurns: 1.1,
            },
            voice: {
                cachingEnabled: true,
                provider: "azure",
                voiceId: "andrew",
                chunkPlan: {
                    enabled: true,
                    minCharacters: 30,
                    punctuationBoundaries: ["。", "，", ".", "!", "?", ";", "،", "۔", "।", "॥", "|", "||", ",", ":"],
                    formatPlan: { enabled: true, numberToDigitsCutoff: 2025 },
                },
                speed: 1.1,
                fallbackPlan: { voices: [{ cachingEnabled: true, provider: "azure", voiceId: "andrew" }] },
            },
            firstMessage: "Hello! How can I help you today?",
            firstMessageInterruptionsEnabled: true,
            firstMessageMode: "assistant-speaks-first",
            voicemailDetection: {
                beepMaxAwaitSeconds: 1.1,
                provider: "google",
                backoffPlan: { startAtSeconds: 1.1, frequencySeconds: 1.1, maxRetries: 1.1 },
                type: "audio",
            },
            clientMessages: [
                "conversation-update",
                "function-call",
                "hang",
                "model-output",
                "speech-update",
                "status-update",
                "transfer-update",
                "transcript",
                "tool-calls",
                "user-interrupted",
                "voice-input",
                "workflow.node.started",
            ],
            serverMessages: [
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
            ],
            maxDurationSeconds: 600,
            backgroundSound: "off",
            modelOutputInMessagesEnabled: false,
            transportConfigurations: [{ provider: "twilio", timeout: 60, record: false, recordingChannels: "mono" }],
            observabilityPlan: { provider: "langfuse", tags: ["tags"], metadata: { key: "value" } },
            credentials: [{ provider: "11labs", apiKey: "apiKey", name: "name" }],
            hooks: [
                {
                    on: "call.ending",
                    do: [{ type: "tool" }],
                    filters: [{ type: "oneOf", key: "key", oneOf: ["oneOf"] }],
                },
            ],
            name: "name",
            voicemailMessage: "voicemailMessage",
            endCallMessage: "endCallMessage",
            endCallPhrases: ["endCallPhrases"],
            compliancePlan: {
                hipaaEnabled: true,
                pciEnabled: true,
                securityFilterPlan: {
                    enabled: true,
                    filters: [{}],
                    mode: "sanitize",
                    replacementText: "replacementText",
                },
            },
            metadata: { key: "value" },
            backgroundSpeechDenoisingPlan: {
                smartDenoisingPlan: { enabled: true },
                fourierDenoisingPlan: {
                    enabled: true,
                    mediaDetectionEnabled: true,
                    staticThreshold: -35,
                    baselineOffsetDb: -15,
                    windowSizeMs: 3000,
                    baselinePercentile: 85,
                },
            },
            analysisPlan: {
                minMessagesThreshold: 1.1,
                summaryPlan: { messages: [{ key: "value" }], enabled: true, timeoutSeconds: 1.1 },
                structuredDataPlan: {
                    messages: [{ key: "value" }],
                    enabled: true,
                    schema: { type: "string" },
                    timeoutSeconds: 1.1,
                },
                structuredDataMultiPlan: [{ key: "key", plan: {} }],
                successEvaluationPlan: {
                    rubric: "NumericScale",
                    messages: [{ key: "value" }],
                    enabled: true,
                    timeoutSeconds: 1.1,
                },
                outcomeIds: ["outcomeIds"],
            },
            artifactPlan: {
                recordingEnabled: true,
                recordingFormat: "wav;l16",
                recordingUseCustomStorageEnabled: true,
                videoRecordingEnabled: false,
                pcapEnabled: true,
                pcapS3PathPrefix: "/pcaps",
                pcapUseCustomStorageEnabled: true,
                loggingEnabled: true,
                loggingUseCustomStorageEnabled: true,
                transcriptPlan: { enabled: true, assistantName: "assistantName", userName: "userName" },
                recordingPath: "recordingPath",
                structuredOutputIds: ["structuredOutputIds"],
                loggingPath: "loggingPath",
            },
            startSpeakingPlan: {
                waitSeconds: 0.4,
                smartEndpointingPlan: { provider: "vapi" },
                customEndpointingRules: [{ type: "assistant", regex: "regex", timeoutSeconds: 1.1 }],
                transcriptionEndpointingPlan: {
                    onPunctuationSeconds: 0.1,
                    onNoPunctuationSeconds: 1.5,
                    onNumberSeconds: 0.5,
                },
            },
            stopSpeakingPlan: {
                numWords: 0,
                voiceSeconds: 0.2,
                backoffSeconds: 1,
                acknowledgementPhrases: [
                    "i understand",
                    "i see",
                    "i got it",
                    "i hear you",
                    "im listening",
                    "im with you",
                    "right",
                    "okay",
                    "ok",
                    "sure",
                    "alright",
                    "got it",
                    "understood",
                    "yeah",
                    "yes",
                    "uh-huh",
                    "mm-hmm",
                    "gotcha",
                    "mhmm",
                    "ah",
                    "yeah okay",
                    "yeah sure",
                ],
                interruptionPhrases: [
                    "stop",
                    "shut",
                    "up",
                    "enough",
                    "quiet",
                    "silence",
                    "but",
                    "dont",
                    "not",
                    "no",
                    "hold",
                    "wait",
                    "cut",
                    "pause",
                    "nope",
                    "nah",
                    "nevermind",
                    "never",
                    "bad",
                    "actually",
                ],
            },
            monitorPlan: {
                listenEnabled: false,
                listenAuthenticationEnabled: false,
                controlEnabled: false,
                controlAuthenticationEnabled: false,
            },
            credentialIds: ["credentialIds"],
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: { key: "value" },
                backoffPlan: {
                    type: { key: "value" },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [{ key: "value" }, { key: "value" }, { key: "value" }, { key: "value" }],
                },
            },
            keypadInputPlan: { enabled: true, timeoutSeconds: 1.1, delimiters: "#" },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .patch("/assistant/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.assistants.update("id");
        expect(response).toEqual({
            transcriber: {
                provider: "assembly-ai",
                language: "en",
                confidenceThreshold: 0.4,
                formatTurns: true,
                endOfTurnConfidenceThreshold: 0.7,
                minEndOfTurnSilenceWhenConfident: 160,
                wordFinalizationMaxWaitTime: 160,
                maxTurnSilence: 400,
                realtimeUrl: "realtimeUrl",
                wordBoost: ["wordBoost"],
                endUtteranceSilenceThreshold: 1.1,
                disablePartialTranscripts: true,
                fallbackPlan: {
                    transcribers: [
                        {
                            provider: "assembly-ai",
                            confidenceThreshold: 0.4,
                            formatTurns: true,
                            endOfTurnConfidenceThreshold: 0.7,
                            minEndOfTurnSilenceWhenConfident: 160,
                            wordFinalizationMaxWaitTime: 160,
                            maxTurnSilence: 400,
                        },
                    ],
                },
            },
            model: {
                messages: [
                    {
                        role: "assistant",
                    },
                ],
                tools: [
                    {
                        type: "apiRequest",
                        method: "POST",
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        url: "url",
                        backoffPlan: {
                            type: {
                                key: "value",
                            },
                            maxRetries: 0,
                            baseDelaySeconds: 1,
                        },
                    },
                ],
                toolIds: ["toolIds"],
                knowledgeBase: {
                    provider: "custom-knowledge-base",
                    server: {
                        timeoutSeconds: 20,
                        credentialId: "550e8400-e29b-41d4-a716-446655440000",
                        backoffPlan: {
                            type: {
                                key: "value",
                            },
                            maxRetries: 0,
                            baseDelaySeconds: 1,
                        },
                    },
                },
                model: "claude-3-opus-20240229",
                provider: "anthropic",
                thinking: {
                    type: "enabled",
                    budgetTokens: 1.1,
                },
                temperature: 1.1,
                maxTokens: 1.1,
                emotionRecognitionEnabled: true,
                numFastTurns: 1.1,
            },
            voice: {
                cachingEnabled: true,
                provider: "azure",
                voiceId: "andrew",
                chunkPlan: {
                    enabled: true,
                    minCharacters: 30,
                    punctuationBoundaries: [
                        "\u3002",
                        "\uFF0C",
                        ".",
                        "!",
                        "?",
                        ";",
                        "\u060C",
                        "\u06D4",
                        "\u0964",
                        "\u0965",
                        "|",
                        "||",
                        ",",
                        ":",
                    ],
                    formatPlan: {
                        enabled: true,
                        numberToDigitsCutoff: 2025,
                    },
                },
                speed: 1.1,
                fallbackPlan: {
                    voices: [
                        {
                            cachingEnabled: true,
                            provider: "azure",
                            voiceId: "andrew",
                        },
                    ],
                },
            },
            firstMessage: "Hello! How can I help you today?",
            firstMessageInterruptionsEnabled: true,
            firstMessageMode: "assistant-speaks-first",
            voicemailDetection: {
                beepMaxAwaitSeconds: 1.1,
                provider: "google",
                backoffPlan: {
                    startAtSeconds: 1.1,
                    frequencySeconds: 1.1,
                    maxRetries: 1.1,
                },
                type: "audio",
            },
            clientMessages: [
                "conversation-update",
                "function-call",
                "hang",
                "model-output",
                "speech-update",
                "status-update",
                "transfer-update",
                "transcript",
                "tool-calls",
                "user-interrupted",
                "voice-input",
                "workflow.node.started",
            ],
            serverMessages: [
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
                "transcript[transcriptType='final']",
            ],
            maxDurationSeconds: 600,
            backgroundSound: "off",
            modelOutputInMessagesEnabled: false,
            transportConfigurations: [
                {
                    provider: "twilio",
                    timeout: 60,
                    record: false,
                    recordingChannels: "mono",
                },
            ],
            observabilityPlan: {
                provider: "langfuse",
                tags: ["tags"],
                metadata: {
                    key: "value",
                },
            },
            credentials: [
                {
                    provider: "11labs",
                    apiKey: "apiKey",
                    name: "name",
                },
            ],
            hooks: [
                {
                    on: "call.ending",
                    do: [
                        {
                            type: "tool",
                        },
                    ],
                    filters: [
                        {
                            type: "oneOf",
                            key: "key",
                            oneOf: ["oneOf"],
                        },
                    ],
                },
            ],
            name: "name",
            voicemailMessage: "voicemailMessage",
            endCallMessage: "endCallMessage",
            endCallPhrases: ["endCallPhrases"],
            compliancePlan: {
                hipaaEnabled: true,
                pciEnabled: true,
                securityFilterPlan: {
                    enabled: true,
                    filters: [{}],
                    mode: "sanitize",
                    replacementText: "replacementText",
                },
            },
            metadata: {
                key: "value",
            },
            backgroundSpeechDenoisingPlan: {
                smartDenoisingPlan: {
                    enabled: true,
                },
                fourierDenoisingPlan: {
                    enabled: true,
                    mediaDetectionEnabled: true,
                    staticThreshold: -35,
                    baselineOffsetDb: -15,
                    windowSizeMs: 3000,
                    baselinePercentile: 85,
                },
            },
            analysisPlan: {
                minMessagesThreshold: 1.1,
                summaryPlan: {
                    messages: [
                        {
                            key: "value",
                        },
                    ],
                    enabled: true,
                    timeoutSeconds: 1.1,
                },
                structuredDataPlan: {
                    messages: [
                        {
                            key: "value",
                        },
                    ],
                    enabled: true,
                    schema: {
                        type: "string",
                    },
                    timeoutSeconds: 1.1,
                },
                structuredDataMultiPlan: [
                    {
                        key: "key",
                        plan: {},
                    },
                ],
                successEvaluationPlan: {
                    rubric: "NumericScale",
                    messages: [
                        {
                            key: "value",
                        },
                    ],
                    enabled: true,
                    timeoutSeconds: 1.1,
                },
                outcomeIds: ["outcomeIds"],
            },
            artifactPlan: {
                recordingEnabled: true,
                recordingFormat: "wav;l16",
                recordingUseCustomStorageEnabled: true,
                videoRecordingEnabled: false,
                pcapEnabled: true,
                pcapS3PathPrefix: "/pcaps",
                pcapUseCustomStorageEnabled: true,
                loggingEnabled: true,
                loggingUseCustomStorageEnabled: true,
                transcriptPlan: {
                    enabled: true,
                    assistantName: "assistantName",
                    userName: "userName",
                },
                recordingPath: "recordingPath",
                structuredOutputIds: ["structuredOutputIds"],
                loggingPath: "loggingPath",
            },
            startSpeakingPlan: {
                waitSeconds: 0.4,
                smartEndpointingPlan: {
                    provider: "vapi",
                },
                customEndpointingRules: [
                    {
                        type: "assistant",
                        regex: "regex",
                        timeoutSeconds: 1.1,
                    },
                ],
                transcriptionEndpointingPlan: {
                    onPunctuationSeconds: 0.1,
                    onNoPunctuationSeconds: 1.5,
                    onNumberSeconds: 0.5,
                },
            },
            stopSpeakingPlan: {
                numWords: 0,
                voiceSeconds: 0.2,
                backoffSeconds: 1,
                acknowledgementPhrases: [
                    "i understand",
                    "i see",
                    "i got it",
                    "i hear you",
                    "im listening",
                    "im with you",
                    "right",
                    "okay",
                    "ok",
                    "sure",
                    "alright",
                    "got it",
                    "understood",
                    "yeah",
                    "yes",
                    "uh-huh",
                    "mm-hmm",
                    "gotcha",
                    "mhmm",
                    "ah",
                    "yeah okay",
                    "yeah sure",
                ],
                interruptionPhrases: [
                    "stop",
                    "shut",
                    "up",
                    "enough",
                    "quiet",
                    "silence",
                    "but",
                    "dont",
                    "not",
                    "no",
                    "hold",
                    "wait",
                    "cut",
                    "pause",
                    "nope",
                    "nah",
                    "nevermind",
                    "never",
                    "bad",
                    "actually",
                ],
            },
            monitorPlan: {
                listenEnabled: false,
                listenAuthenticationEnabled: false,
                controlEnabled: false,
                controlAuthenticationEnabled: false,
            },
            credentialIds: ["credentialIds"],
            server: {
                timeoutSeconds: 20,
                credentialId: "550e8400-e29b-41d4-a716-446655440000",
                url: "url",
                headers: {
                    key: "value",
                },
                backoffPlan: {
                    type: {
                        key: "value",
                    },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                    excludedStatusCodes: [
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                        {
                            key: "value",
                        },
                    ],
                },
            },
            keypadInputPlan: {
                enabled: true,
                timeoutSeconds: 1.1,
                delimiters: "#",
            },
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
        });
    });
});
