/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { VapiClient } from "../../src/Client";

describe("TestSuiteRuns", () => {
    test("TestSuiteRunController_findAllPaginated", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            results: [
                {
                    status: "queued",
                    id: "id",
                    orgId: "orgId",
                    testSuiteId: "testSuiteId",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    testResults: [
                        {
                            test: {
                                scorers: [{ type: "ai", rubric: "rubric" }],
                                type: "voice",
                                id: "id",
                                testSuiteId: "testSuiteId",
                                orgId: "orgId",
                                createdAt: "2024-01-15T09:30:00Z",
                                updatedAt: "2024-01-15T09:30:00Z",
                                script: "script",
                            },
                            attempts: [
                                {
                                    scorerResults: [
                                        { type: "ai", result: "pass", reasoning: "reasoning", rubric: "rubric" },
                                    ],
                                },
                            ],
                        },
                    ],
                    name: "name",
                },
            ],
            metadata: { itemsPerPage: 1.1, totalItems: 1.1, currentPage: 1.1 },
        };
        server
            .mockEndpoint()
            .get("/test-suite/testSuiteId/run")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.testSuiteRuns.testSuiteRunControllerFindAllPaginated("testSuiteId");
        expect(response).toEqual({
            results: [
                {
                    status: "queued",
                    id: "id",
                    orgId: "orgId",
                    testSuiteId: "testSuiteId",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    testResults: [
                        {
                            test: {
                                scorers: [
                                    {
                                        type: "ai",
                                        rubric: "rubric",
                                    },
                                ],
                                type: "voice",
                                id: "id",
                                testSuiteId: "testSuiteId",
                                orgId: "orgId",
                                createdAt: "2024-01-15T09:30:00Z",
                                updatedAt: "2024-01-15T09:30:00Z",
                                script: "script",
                            },
                            attempts: [
                                {
                                    scorerResults: [
                                        {
                                            type: "ai",
                                            result: "pass",
                                            reasoning: "reasoning",
                                            rubric: "rubric",
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                    name: "name",
                },
            ],
            metadata: {
                itemsPerPage: 1.1,
                totalItems: 1.1,
                currentPage: 1.1,
            },
        });
    });

    test("TestSuiteRunController_create", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            status: "queued",
            id: "id",
            orgId: "orgId",
            testSuiteId: "testSuiteId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            testResults: [
                {
                    test: {
                        scorers: [{ type: "ai", rubric: "rubric" }],
                        type: "voice",
                        id: "id",
                        testSuiteId: "testSuiteId",
                        orgId: "orgId",
                        createdAt: "2024-01-15T09:30:00Z",
                        updatedAt: "2024-01-15T09:30:00Z",
                        script: "script",
                    },
                    attempts: [
                        { scorerResults: [{ type: "ai", result: "pass", reasoning: "reasoning", rubric: "rubric" }] },
                    ],
                },
            ],
            name: "name",
        };
        server
            .mockEndpoint()
            .post("/test-suite/testSuiteId/run")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.testSuiteRuns.testSuiteRunControllerCreate("testSuiteId");
        expect(response).toEqual({
            status: "queued",
            id: "id",
            orgId: "orgId",
            testSuiteId: "testSuiteId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            testResults: [
                {
                    test: {
                        scorers: [
                            {
                                type: "ai",
                                rubric: "rubric",
                            },
                        ],
                        type: "voice",
                        id: "id",
                        testSuiteId: "testSuiteId",
                        orgId: "orgId",
                        createdAt: "2024-01-15T09:30:00Z",
                        updatedAt: "2024-01-15T09:30:00Z",
                        script: "script",
                    },
                    attempts: [
                        {
                            scorerResults: [
                                {
                                    type: "ai",
                                    result: "pass",
                                    reasoning: "reasoning",
                                    rubric: "rubric",
                                },
                            ],
                        },
                    ],
                },
            ],
            name: "name",
        });
    });

    test("TestSuiteRunController_findOne", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            status: "queued",
            id: "id",
            orgId: "orgId",
            testSuiteId: "testSuiteId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            testResults: [
                {
                    test: {
                        scorers: [{ type: "ai", rubric: "rubric" }],
                        type: "voice",
                        id: "id",
                        testSuiteId: "testSuiteId",
                        orgId: "orgId",
                        createdAt: "2024-01-15T09:30:00Z",
                        updatedAt: "2024-01-15T09:30:00Z",
                        script: "script",
                    },
                    attempts: [
                        { scorerResults: [{ type: "ai", result: "pass", reasoning: "reasoning", rubric: "rubric" }] },
                    ],
                },
            ],
            name: "name",
        };
        server
            .mockEndpoint()
            .get("/test-suite/testSuiteId/run/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.testSuiteRuns.testSuiteRunControllerFindOne("testSuiteId", "id");
        expect(response).toEqual({
            status: "queued",
            id: "id",
            orgId: "orgId",
            testSuiteId: "testSuiteId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            testResults: [
                {
                    test: {
                        scorers: [
                            {
                                type: "ai",
                                rubric: "rubric",
                            },
                        ],
                        type: "voice",
                        id: "id",
                        testSuiteId: "testSuiteId",
                        orgId: "orgId",
                        createdAt: "2024-01-15T09:30:00Z",
                        updatedAt: "2024-01-15T09:30:00Z",
                        script: "script",
                    },
                    attempts: [
                        {
                            scorerResults: [
                                {
                                    type: "ai",
                                    result: "pass",
                                    reasoning: "reasoning",
                                    rubric: "rubric",
                                },
                            ],
                        },
                    ],
                },
            ],
            name: "name",
        });
    });

    test("TestSuiteRunController_remove", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            status: "queued",
            id: "id",
            orgId: "orgId",
            testSuiteId: "testSuiteId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            testResults: [
                {
                    test: {
                        scorers: [{ type: "ai", rubric: "rubric" }],
                        type: "voice",
                        id: "id",
                        testSuiteId: "testSuiteId",
                        orgId: "orgId",
                        createdAt: "2024-01-15T09:30:00Z",
                        updatedAt: "2024-01-15T09:30:00Z",
                        script: "script",
                    },
                    attempts: [
                        { scorerResults: [{ type: "ai", result: "pass", reasoning: "reasoning", rubric: "rubric" }] },
                    ],
                },
            ],
            name: "name",
        };
        server
            .mockEndpoint()
            .delete("/test-suite/testSuiteId/run/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.testSuiteRuns.testSuiteRunControllerRemove("testSuiteId", "id");
        expect(response).toEqual({
            status: "queued",
            id: "id",
            orgId: "orgId",
            testSuiteId: "testSuiteId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            testResults: [
                {
                    test: {
                        scorers: [
                            {
                                type: "ai",
                                rubric: "rubric",
                            },
                        ],
                        type: "voice",
                        id: "id",
                        testSuiteId: "testSuiteId",
                        orgId: "orgId",
                        createdAt: "2024-01-15T09:30:00Z",
                        updatedAt: "2024-01-15T09:30:00Z",
                        script: "script",
                    },
                    attempts: [
                        {
                            scorerResults: [
                                {
                                    type: "ai",
                                    result: "pass",
                                    reasoning: "reasoning",
                                    rubric: "rubric",
                                },
                            ],
                        },
                    ],
                },
            ],
            name: "name",
        });
    });

    test("TestSuiteRunController_update", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            status: "queued",
            id: "id",
            orgId: "orgId",
            testSuiteId: "testSuiteId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            testResults: [
                {
                    test: {
                        scorers: [{ type: "ai", rubric: "rubric" }],
                        type: "voice",
                        id: "id",
                        testSuiteId: "testSuiteId",
                        orgId: "orgId",
                        createdAt: "2024-01-15T09:30:00Z",
                        updatedAt: "2024-01-15T09:30:00Z",
                        script: "script",
                    },
                    attempts: [
                        { scorerResults: [{ type: "ai", result: "pass", reasoning: "reasoning", rubric: "rubric" }] },
                    ],
                },
            ],
            name: "name",
        };
        server
            .mockEndpoint()
            .patch("/test-suite/testSuiteId/run/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.testSuiteRuns.testSuiteRunControllerUpdate("testSuiteId", "id");
        expect(response).toEqual({
            status: "queued",
            id: "id",
            orgId: "orgId",
            testSuiteId: "testSuiteId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            testResults: [
                {
                    test: {
                        scorers: [
                            {
                                type: "ai",
                                rubric: "rubric",
                            },
                        ],
                        type: "voice",
                        id: "id",
                        testSuiteId: "testSuiteId",
                        orgId: "orgId",
                        createdAt: "2024-01-15T09:30:00Z",
                        updatedAt: "2024-01-15T09:30:00Z",
                        script: "script",
                    },
                    attempts: [
                        {
                            scorerResults: [
                                {
                                    type: "ai",
                                    result: "pass",
                                    reasoning: "reasoning",
                                    rubric: "rubric",
                                },
                            ],
                        },
                    ],
                },
            ],
            name: "name",
        });
    });
});
