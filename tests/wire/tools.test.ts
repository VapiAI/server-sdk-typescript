/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { VapiClient } from "../../src/Client";
import * as Vapi from "../../src/api/index";

describe("Tools", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                messages: [{ type: "request-start", blocking: false }],
                type: "apiRequest",
                method: "POST",
                timeoutSeconds: 20,
                id: "id",
                orgId: "orgId",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                function: {
                    strict: true,
                    name: "name",
                    description: "description",
                    parameters: { type: "object", properties: { key: { type: "string" } } },
                },
                name: "name",
                description: "description",
                url: "url",
                body: {
                    type: "string",
                    items: { key: "value" },
                    properties: { key: "value" },
                    description: "description",
                    pattern: "pattern",
                    format: "date-time",
                    required: ["required"],
                    enum: ["enum"],
                    title: "title",
                },
                headers: {
                    type: "string",
                    items: { key: "value" },
                    properties: { key: "value" },
                    description: "description",
                    pattern: "pattern",
                    format: "date-time",
                    required: ["required"],
                    enum: ["enum"],
                    title: "title",
                },
                backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
                variableExtractionPlan: { schema: { type: "string" }, aliases: [{ key: "key", value: "value" }] },
            },
        ];
        server.mockEndpoint().get("/tool").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.tools.list();
        expect(response).toEqual([
            {
                messages: [
                    {
                        type: "request-start",
                        blocking: false,
                    },
                ],
                type: "apiRequest",
                method: "POST",
                timeoutSeconds: 20,
                id: "id",
                orgId: "orgId",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                function: {
                    strict: true,
                    name: "name",
                    description: "description",
                    parameters: {
                        type: "object",
                        properties: {
                            key: {
                                type: "string",
                            },
                        },
                    },
                },
                name: "name",
                description: "description",
                url: "url",
                body: {
                    type: "string",
                    items: {
                        key: "value",
                    },
                    properties: {
                        key: "value",
                    },
                    description: "description",
                    pattern: "pattern",
                    format: "date-time",
                    required: ["required"],
                    enum: ["enum"],
                    title: "title",
                },
                headers: {
                    type: "string",
                    items: {
                        key: "value",
                    },
                    properties: {
                        key: "value",
                    },
                    description: "description",
                    pattern: "pattern",
                    format: "date-time",
                    required: ["required"],
                    enum: ["enum"],
                    title: "title",
                },
                backoffPlan: {
                    type: {
                        key: "value",
                    },
                    maxRetries: 0,
                    baseDelaySeconds: 1,
                },
                variableExtractionPlan: {
                    schema: {
                        type: "string",
                    },
                    aliases: [
                        {
                            key: "key",
                            value: "value",
                        },
                    ],
                },
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "apiRequest", method: "POST", url: "url" };
        const rawResponseBody = {
            messages: [
                {
                    contents: [{ type: "text", text: "text", language: "aa" }],
                    type: "request-start",
                    blocking: false,
                    content: "content",
                    conditions: [{ operator: "eq", param: "param", value: "value" }],
                },
            ],
            type: "apiRequest",
            method: "POST",
            timeoutSeconds: 20,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            function: {
                strict: true,
                name: "name",
                description: "description",
                parameters: { type: "object", properties: { key: { type: "string" } }, required: ["required"] },
            },
            name: "name",
            description: "description",
            url: "url",
            body: {
                type: "string",
                items: { key: "value" },
                properties: { key: "value" },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            headers: {
                type: "string",
                items: { key: "value" },
                properties: { key: "value" },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
            variableExtractionPlan: {
                schema: {
                    type: "string",
                    items: { key: "value" },
                    properties: { key: "value" },
                    description: "description",
                    pattern: "pattern",
                    format: "date-time",
                    required: ["required"],
                    enum: ["enum"],
                    title: "title",
                },
                aliases: [{ key: "key", value: "value" }],
            },
        };
        server
            .mockEndpoint()
            .post("/tool")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.create({
            type: "apiRequest",
            method: "POST",
            url: "url",
        });
        expect(response).toEqual({
            messages: [
                {
                    contents: [
                        {
                            type: "text",
                            text: "text",
                            language: "aa",
                        },
                    ],
                    type: "request-start",
                    blocking: false,
                    content: "content",
                    conditions: [
                        {
                            operator: "eq",
                            param: "param",
                            value: "value",
                        },
                    ],
                },
            ],
            type: "apiRequest",
            method: "POST",
            timeoutSeconds: 20,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            function: {
                strict: true,
                name: "name",
                description: "description",
                parameters: {
                    type: "object",
                    properties: {
                        key: {
                            type: "string",
                        },
                    },
                    required: ["required"],
                },
            },
            name: "name",
            description: "description",
            url: "url",
            body: {
                type: "string",
                items: {
                    key: "value",
                },
                properties: {
                    key: "value",
                },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            headers: {
                type: "string",
                items: {
                    key: "value",
                },
                properties: {
                    key: "value",
                },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            backoffPlan: {
                type: {
                    key: "value",
                },
                maxRetries: 0,
                baseDelaySeconds: 1,
            },
            variableExtractionPlan: {
                schema: {
                    type: "string",
                    items: {
                        key: "value",
                    },
                    properties: {
                        key: "value",
                    },
                    description: "description",
                    pattern: "pattern",
                    format: "date-time",
                    required: ["required"],
                    enum: ["enum"],
                    title: "title",
                },
                aliases: [
                    {
                        key: "key",
                        value: "value",
                    },
                ],
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            messages: [
                {
                    contents: [{ type: "text", text: "text", language: "aa" }],
                    type: "request-start",
                    blocking: false,
                    content: "content",
                    conditions: [{ operator: "eq", param: "param", value: "value" }],
                },
            ],
            type: "apiRequest",
            method: "POST",
            timeoutSeconds: 20,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            function: {
                strict: true,
                name: "name",
                description: "description",
                parameters: { type: "object", properties: { key: { type: "string" } }, required: ["required"] },
            },
            name: "name",
            description: "description",
            url: "url",
            body: {
                type: "string",
                items: { key: "value" },
                properties: { key: "value" },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            headers: {
                type: "string",
                items: { key: "value" },
                properties: { key: "value" },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
            variableExtractionPlan: {
                schema: {
                    type: "string",
                    items: { key: "value" },
                    properties: { key: "value" },
                    description: "description",
                    pattern: "pattern",
                    format: "date-time",
                    required: ["required"],
                    enum: ["enum"],
                    title: "title",
                },
                aliases: [{ key: "key", value: "value" }],
            },
        };
        server.mockEndpoint().get("/tool/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.tools.get("id");
        expect(response).toEqual({
            messages: [
                {
                    contents: [
                        {
                            type: "text",
                            text: "text",
                            language: "aa",
                        },
                    ],
                    type: "request-start",
                    blocking: false,
                    content: "content",
                    conditions: [
                        {
                            operator: "eq",
                            param: "param",
                            value: "value",
                        },
                    ],
                },
            ],
            type: "apiRequest",
            method: "POST",
            timeoutSeconds: 20,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            function: {
                strict: true,
                name: "name",
                description: "description",
                parameters: {
                    type: "object",
                    properties: {
                        key: {
                            type: "string",
                        },
                    },
                    required: ["required"],
                },
            },
            name: "name",
            description: "description",
            url: "url",
            body: {
                type: "string",
                items: {
                    key: "value",
                },
                properties: {
                    key: "value",
                },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            headers: {
                type: "string",
                items: {
                    key: "value",
                },
                properties: {
                    key: "value",
                },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            backoffPlan: {
                type: {
                    key: "value",
                },
                maxRetries: 0,
                baseDelaySeconds: 1,
            },
            variableExtractionPlan: {
                schema: {
                    type: "string",
                    items: {
                        key: "value",
                    },
                    properties: {
                        key: "value",
                    },
                    description: "description",
                    pattern: "pattern",
                    format: "date-time",
                    required: ["required"],
                    enum: ["enum"],
                    title: "title",
                },
                aliases: [
                    {
                        key: "key",
                        value: "value",
                    },
                ],
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            messages: [
                {
                    contents: [{ type: "text", text: "text", language: "aa" }],
                    type: "request-start",
                    blocking: false,
                    content: "content",
                    conditions: [{ operator: "eq", param: "param", value: "value" }],
                },
            ],
            type: "apiRequest",
            method: "POST",
            timeoutSeconds: 20,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            function: {
                strict: true,
                name: "name",
                description: "description",
                parameters: { type: "object", properties: { key: { type: "string" } }, required: ["required"] },
            },
            name: "name",
            description: "description",
            url: "url",
            body: {
                type: "string",
                items: { key: "value" },
                properties: { key: "value" },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            headers: {
                type: "string",
                items: { key: "value" },
                properties: { key: "value" },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
            variableExtractionPlan: {
                schema: {
                    type: "string",
                    items: { key: "value" },
                    properties: { key: "value" },
                    description: "description",
                    pattern: "pattern",
                    format: "date-time",
                    required: ["required"],
                    enum: ["enum"],
                    title: "title",
                },
                aliases: [{ key: "key", value: "value" }],
            },
        };
        server.mockEndpoint().delete("/tool/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.tools.delete("id");
        expect(response).toEqual({
            messages: [
                {
                    contents: [
                        {
                            type: "text",
                            text: "text",
                            language: "aa",
                        },
                    ],
                    type: "request-start",
                    blocking: false,
                    content: "content",
                    conditions: [
                        {
                            operator: "eq",
                            param: "param",
                            value: "value",
                        },
                    ],
                },
            ],
            type: "apiRequest",
            method: "POST",
            timeoutSeconds: 20,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            function: {
                strict: true,
                name: "name",
                description: "description",
                parameters: {
                    type: "object",
                    properties: {
                        key: {
                            type: "string",
                        },
                    },
                    required: ["required"],
                },
            },
            name: "name",
            description: "description",
            url: "url",
            body: {
                type: "string",
                items: {
                    key: "value",
                },
                properties: {
                    key: "value",
                },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            headers: {
                type: "string",
                items: {
                    key: "value",
                },
                properties: {
                    key: "value",
                },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            backoffPlan: {
                type: {
                    key: "value",
                },
                maxRetries: 0,
                baseDelaySeconds: 1,
            },
            variableExtractionPlan: {
                schema: {
                    type: "string",
                    items: {
                        key: "value",
                    },
                    properties: {
                        key: "value",
                    },
                    description: "description",
                    pattern: "pattern",
                    format: "date-time",
                    required: ["required"],
                    enum: ["enum"],
                    title: "title",
                },
                aliases: [
                    {
                        key: "key",
                        value: "value",
                    },
                ],
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new VapiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            messages: [
                {
                    contents: [{ type: "text", text: "text", language: "aa" }],
                    type: "request-start",
                    blocking: false,
                    content: "content",
                    conditions: [{ operator: "eq", param: "param", value: "value" }],
                },
            ],
            type: "apiRequest",
            method: "POST",
            timeoutSeconds: 20,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            function: {
                strict: true,
                name: "name",
                description: "description",
                parameters: { type: "object", properties: { key: { type: "string" } }, required: ["required"] },
            },
            name: "name",
            description: "description",
            url: "url",
            body: {
                type: "string",
                items: { key: "value" },
                properties: { key: "value" },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            headers: {
                type: "string",
                items: { key: "value" },
                properties: { key: "value" },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            backoffPlan: { type: { key: "value" }, maxRetries: 0, baseDelaySeconds: 1 },
            variableExtractionPlan: {
                schema: {
                    type: "string",
                    items: { key: "value" },
                    properties: { key: "value" },
                    description: "description",
                    pattern: "pattern",
                    format: "date-time",
                    required: ["required"],
                    enum: ["enum"],
                    title: "title",
                },
                aliases: [{ key: "key", value: "value" }],
            },
        };
        server
            .mockEndpoint()
            .patch("/tool/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.update("id", {});
        expect(response).toEqual({
            messages: [
                {
                    contents: [
                        {
                            type: "text",
                            text: "text",
                            language: "aa",
                        },
                    ],
                    type: "request-start",
                    blocking: false,
                    content: "content",
                    conditions: [
                        {
                            operator: "eq",
                            param: "param",
                            value: "value",
                        },
                    ],
                },
            ],
            type: "apiRequest",
            method: "POST",
            timeoutSeconds: 20,
            id: "id",
            orgId: "orgId",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            function: {
                strict: true,
                name: "name",
                description: "description",
                parameters: {
                    type: "object",
                    properties: {
                        key: {
                            type: "string",
                        },
                    },
                    required: ["required"],
                },
            },
            name: "name",
            description: "description",
            url: "url",
            body: {
                type: "string",
                items: {
                    key: "value",
                },
                properties: {
                    key: "value",
                },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            headers: {
                type: "string",
                items: {
                    key: "value",
                },
                properties: {
                    key: "value",
                },
                description: "description",
                pattern: "pattern",
                format: "date-time",
                required: ["required"],
                enum: ["enum"],
                title: "title",
            },
            backoffPlan: {
                type: {
                    key: "value",
                },
                maxRetries: 0,
                baseDelaySeconds: 1,
            },
            variableExtractionPlan: {
                schema: {
                    type: "string",
                    items: {
                        key: "value",
                    },
                    properties: {
                        key: "value",
                    },
                    description: "description",
                    pattern: "pattern",
                    format: "date-time",
                    required: ["required"],
                    enum: ["enum"],
                    title: "title",
                },
                aliases: [
                    {
                        key: "key",
                        value: "value",
                    },
                ],
            },
        });
    });
});
